
mpu6050_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c5c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08004d14  08004d14  00005d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef8  08004ef8  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  08004ef8  08004ef8  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ef8  08004ef8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00005ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004f00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08004f68  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08004f68  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f211  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002373  00000000  00000000  000152a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00017618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bd  00000000  00000000  00018158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f3a  00000000  00000000  00018a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e17  00000000  00000000  0002f94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000892ad  00000000  00000000  00040766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9a13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f4c  00000000  00000000  000c9a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000cc9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004cfc 	.word	0x08004cfc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	08004cfc 	.word	0x08004cfc

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000404:	f000 fc74 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000408:	f000 f818 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040c:	f000 f8fe 	bl	800060c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000410:	f000 f8ae 	bl	8000570 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000414:	f000 f86c 	bl	80004f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000418:	4b07      	ldr	r3, [pc, #28]	@ (8000438 <main+0x38>)
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fa38 	bl	8000890 <RetargetInit>

  mpu6050_init();
 8000420:	f000 f956 	bl	80006d0 <mpu6050_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  mpu6050_read();
 8000424:	f000 f9e0 	bl	80007e8 <mpu6050_read>
	  HAL_Delay(1000);
 8000428:	23fa      	movs	r3, #250	@ 0xfa
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	0018      	movs	r0, r3
 800042e:	f000 fce5 	bl	8000dfc <HAL_Delay>
	  mpu6050_read();
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	e7f6      	b.n	8000424 <main+0x24>
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	200000d8 	.word	0x200000d8

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b093      	sub	sp, #76	@ 0x4c
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	2414      	movs	r4, #20
 8000444:	193b      	adds	r3, r7, r4
 8000446:	0018      	movs	r0, r3
 8000448:	2334      	movs	r3, #52	@ 0x34
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f003 fea9 	bl	80041a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	0018      	movs	r0, r3
 8000456:	2310      	movs	r3, #16
 8000458:	001a      	movs	r2, r3
 800045a:	2100      	movs	r1, #0
 800045c:	f003 fea2 	bl	80041a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000460:	2380      	movs	r3, #128	@ 0x80
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	0018      	movs	r0, r3
 8000466:	f001 febb 	bl	80021e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2202      	movs	r2, #2
 800046e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2280      	movs	r2, #128	@ 0x80
 8000474:	0052      	lsls	r2, r2, #1
 8000476:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000478:	0021      	movs	r1, r4
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2240      	movs	r2, #64	@ 0x40
 8000484:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2202      	movs	r2, #2
 800048a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2202      	movs	r2, #2
 8000490:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2208      	movs	r2, #8
 800049c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2280      	movs	r2, #128	@ 0x80
 80004a2:	0292      	lsls	r2, r2, #10
 80004a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2280      	movs	r2, #128	@ 0x80
 80004aa:	0592      	lsls	r2, r2, #22
 80004ac:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fee1 	bl	8002278 <HAL_RCC_OscConfig>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ba:	f000 f903 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2207      	movs	r2, #7
 80004c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2202      	movs	r2, #2
 80004c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2102      	movs	r1, #2
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 f9dc 	bl	8002898 <HAL_RCC_ClockConfig>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004e4:	f000 f8ee 	bl	80006c4 <Error_Handler>
  }
}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b013      	add	sp, #76	@ 0x4c
 80004ee:	bd90      	pop	{r4, r7, pc}

080004f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <MX_I2C1_Init+0x74>)
 80004f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000568 <MX_I2C1_Init+0x78>)
 80004f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <MX_I2C1_Init+0x74>)
 80004fc:	4a1b      	ldr	r2, [pc, #108]	@ (800056c <MX_I2C1_Init+0x7c>)
 80004fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000500:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000506:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000508:	2201      	movs	r2, #1
 800050a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800050c:	4b15      	ldr	r3, [pc, #84]	@ (8000564 <MX_I2C1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000512:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000518:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <MX_I2C1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800051e:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000524:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <MX_I2C1_Init+0x74>)
 800052c:	0018      	movs	r0, r3
 800052e:	f000 febf 	bl	80012b0 <HAL_I2C_Init>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000536:	f000 f8c5 	bl	80006c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800053a:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <MX_I2C1_Init+0x74>)
 800053c:	2100      	movs	r1, #0
 800053e:	0018      	movs	r0, r3
 8000540:	f001 fdb6 	bl	80020b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000548:	f000 f8bc 	bl	80006c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <MX_I2C1_Init+0x74>)
 800054e:	2100      	movs	r1, #0
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fdf9 	bl	8002148 <HAL_I2CEx_ConfigDigitalFilter>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800055a:	f000 f8b3 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000084 	.word	0x20000084
 8000568:	40005400 	.word	0x40005400
 800056c:	10b17db5 	.word	0x10b17db5

08000570 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000574:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 8000576:	4a24      	ldr	r2, [pc, #144]	@ (8000608 <MX_USART2_UART_Init+0x98>)
 8000578:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800057a:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 800057c:	22e1      	movs	r2, #225	@ 0xe1
 800057e:	0252      	lsls	r2, r2, #9
 8000580:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800058e:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005ac:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fc4a 	bl	8002e54 <HAL_UART_Init>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80005c4:	f000 f87e 	bl	80006c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f003 fa33 	bl	8003a38 <HAL_UARTEx_SetTxFifoThreshold>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80005d6:	f000 f875 	bl	80006c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 80005dc:	2100      	movs	r1, #0
 80005de:	0018      	movs	r0, r3
 80005e0:	f003 fa6a 	bl	8003ab8 <HAL_UARTEx_SetRxFifoThreshold>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d001      	beq.n	80005ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80005e8:	f000 f86c 	bl	80006c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <MX_USART2_UART_Init+0x94>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f003 f9e8 	bl	80039c4 <HAL_UARTEx_DisableFifoMode>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80005f8:	f000 f864 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	200000d8 	.word	0x200000d8
 8000608:	40004400 	.word	0x40004400

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b08b      	sub	sp, #44	@ 0x2c
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	2414      	movs	r4, #20
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0018      	movs	r0, r3
 8000618:	2314      	movs	r3, #20
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f003 fdc1 	bl	80041a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000628:	2104      	movs	r1, #4
 800062a:	430a      	orrs	r2, r1
 800062c:	635a      	str	r2, [r3, #52]	@ 0x34
 800062e:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000632:	2204      	movs	r2, #4
 8000634:	4013      	ands	r3, r2
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 800063c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000640:	2120      	movs	r1, #32
 8000642:	430a      	orrs	r2, r1
 8000644:	635a      	str	r2, [r3, #52]	@ 0x34
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800064a:	2220      	movs	r2, #32
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000658:	2101      	movs	r1, #1
 800065a:	430a      	orrs	r2, r1
 800065c:	635a      	str	r2, [r3, #52]	@ 0x34
 800065e:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000662:	2201      	movs	r2, #1
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 800066c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000670:	2102      	movs	r1, #2
 8000672:	430a      	orrs	r2, r1
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_GPIO_Init+0xb4>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800067a:	2202      	movs	r2, #2
 800067c:	4013      	ands	r3, r2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000682:	23a0      	movs	r3, #160	@ 0xa0
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	2200      	movs	r2, #0
 8000688:	2120      	movs	r1, #32
 800068a:	0018      	movs	r0, r3
 800068c:	f000 fdf2 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000690:	0021      	movs	r1, r4
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2220      	movs	r2, #32
 8000696:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2201      	movs	r2, #1
 800069c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2202      	movs	r2, #2
 80006a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006aa:	187a      	adds	r2, r7, r1
 80006ac:	23a0      	movs	r3, #160	@ 0xa0
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fc7a 	bl	8000fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b00b      	add	sp, #44	@ 0x2c
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <mpu6050_init>:
#define hi2c &hi2c1


extern I2C_HandleTypeDef hi2c1;

void mpu6050_init(){
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b087      	sub	sp, #28
 80006d4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef mpu_ready = HAL_I2C_IsDeviceReady(hi2c, DEVICE_ADDRESS, Trials, Timeout);
 80006d6:	1dfc      	adds	r4, r7, #7
 80006d8:	483a      	ldr	r0, [pc, #232]	@ (80007c4 <mpu6050_init+0xf4>)
 80006da:	2364      	movs	r3, #100	@ 0x64
 80006dc:	2204      	movs	r2, #4
 80006de:	21d0      	movs	r1, #208	@ 0xd0
 80006e0:	f001 f8ee 	bl	80018c0 <HAL_I2C_IsDeviceReady>
 80006e4:	0003      	movs	r3, r0
 80006e6:	7023      	strb	r3, [r4, #0]

	  if(mpu_ready==HAL_OK){
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d104      	bne.n	80006fa <mpu6050_init+0x2a>
		  printf("\r\n device is ready \r\n");
 80006f0:	4b35      	ldr	r3, [pc, #212]	@ (80007c8 <mpu6050_init+0xf8>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f003 fbaa 	bl	8003e4c <puts>
 80006f8:	e003      	b.n	8000702 <mpu6050_init+0x32>

	  }
	  else{
		  printf("\r\n device is not ready \r\n");
 80006fa:	4b34      	ldr	r3, [pc, #208]	@ (80007cc <mpu6050_init+0xfc>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f003 fba5 	bl	8003e4c <puts>
	  }

	  uint8_t temp= FS_GYRO_500;
 8000702:	1d7b      	adds	r3, r7, #5
 8000704:	2208      	movs	r2, #8
 8000706:	701a      	strb	r2, [r3, #0]

	  HAL_StatusTypeDef mpu_reg_wr = HAL_I2C_Mem_Write(hi2c, DEVICE_ADDRESS, REG_CONFIG_GYRO, 1, &temp, 1, Timeout);
 8000708:	1dbc      	adds	r4, r7, #6
 800070a:	482e      	ldr	r0, [pc, #184]	@ (80007c4 <mpu6050_init+0xf4>)
 800070c:	2364      	movs	r3, #100	@ 0x64
 800070e:	9302      	str	r3, [sp, #8]
 8000710:	2301      	movs	r3, #1
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	1d7b      	adds	r3, r7, #5
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	221b      	movs	r2, #27
 800071c:	21d0      	movs	r1, #208	@ 0xd0
 800071e:	f000 fe6d 	bl	80013fc <HAL_I2C_Mem_Write>
 8000722:	0003      	movs	r3, r0
 8000724:	7023      	strb	r3, [r4, #0]
	  if(mpu_reg_wr==HAL_OK){
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d104      	bne.n	8000738 <mpu6050_init+0x68>
		  printf("\r\n device gyro ready \r\n");
 800072e:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <mpu6050_init+0x100>)
 8000730:	0018      	movs	r0, r3
 8000732:	f003 fb8b 	bl	8003e4c <puts>
 8000736:	e003      	b.n	8000740 <mpu6050_init+0x70>

	  }
	  else{
		  printf("\r\n device is gyro ready \r\n");
 8000738:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <mpu6050_init+0x104>)
 800073a:	0018      	movs	r0, r3
 800073c:	f003 fb86 	bl	8003e4c <puts>
	  }

	  temp= FS_ACC_4G;
 8000740:	1d7b      	adds	r3, r7, #5
 8000742:	2208      	movs	r2, #8
 8000744:	701a      	strb	r2, [r3, #0]
	  	  mpu_reg_wr = HAL_I2C_Mem_Write(hi2c, DEVICE_ADDRESS, REG_CONFIG_ACC, 1, &temp, 1, Timeout);
 8000746:	1dbc      	adds	r4, r7, #6
 8000748:	481e      	ldr	r0, [pc, #120]	@ (80007c4 <mpu6050_init+0xf4>)
 800074a:	2364      	movs	r3, #100	@ 0x64
 800074c:	9302      	str	r3, [sp, #8]
 800074e:	2301      	movs	r3, #1
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	1d7b      	adds	r3, r7, #5
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2301      	movs	r3, #1
 8000758:	221c      	movs	r2, #28
 800075a:	21d0      	movs	r1, #208	@ 0xd0
 800075c:	f000 fe4e 	bl	80013fc <HAL_I2C_Mem_Write>
 8000760:	0003      	movs	r3, r0
 8000762:	7023      	strb	r3, [r4, #0]
	  	  if(mpu_reg_wr==HAL_OK){
 8000764:	1dbb      	adds	r3, r7, #6
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <mpu6050_init+0xa6>
	  		  printf("\r\n device accelorometer ready \r\n");
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <mpu6050_init+0x108>)
 800076e:	0018      	movs	r0, r3
 8000770:	f003 fb6c 	bl	8003e4c <puts>
 8000774:	e003      	b.n	800077e <mpu6050_init+0xae>

	  	  }
	  	  else{
	  		  printf("\r\n device is acclorometer ready \r\n");
 8000776:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <mpu6050_init+0x10c>)
 8000778:	0018      	movs	r0, r3
 800077a:	f003 fb67 	bl	8003e4c <puts>
	  	  }


		  temp= 0;
 800077e:	1d7b      	adds	r3, r7, #5
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
		  	  mpu_reg_wr = HAL_I2C_Mem_Write(hi2c, DEVICE_ADDRESS, REG_USR_CTRL, 1, &temp, 1, Timeout);
 8000784:	1dbc      	adds	r4, r7, #6
 8000786:	480f      	ldr	r0, [pc, #60]	@ (80007c4 <mpu6050_init+0xf4>)
 8000788:	2364      	movs	r3, #100	@ 0x64
 800078a:	9302      	str	r3, [sp, #8]
 800078c:	2301      	movs	r3, #1
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	1d7b      	adds	r3, r7, #5
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2301      	movs	r3, #1
 8000796:	226b      	movs	r2, #107	@ 0x6b
 8000798:	21d0      	movs	r1, #208	@ 0xd0
 800079a:	f000 fe2f 	bl	80013fc <HAL_I2C_Mem_Write>
 800079e:	0003      	movs	r3, r0
 80007a0:	7023      	strb	r3, [r4, #0]
		  	  if(mpu_reg_wr==HAL_OK){
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d104      	bne.n	80007b4 <mpu6050_init+0xe4>
		  		  printf("\r\n exit sleep \r\n");
 80007aa:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <mpu6050_init+0x110>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f003 fb4d 	bl	8003e4c <puts>
		  	  }
		  	  else{
		  		  printf("\r\n exit sleep failed \r\n");
		  	  }

}
 80007b2:	e003      	b.n	80007bc <mpu6050_init+0xec>
		  		  printf("\r\n exit sleep failed \r\n");
 80007b4:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <mpu6050_init+0x114>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f003 fb48 	bl	8003e4c <puts>
}
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b003      	add	sp, #12
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	20000084 	.word	0x20000084
 80007c8:	08004d14 	.word	0x08004d14
 80007cc:	08004d2c 	.word	0x08004d2c
 80007d0:	08004d48 	.word	0x08004d48
 80007d4:	08004d60 	.word	0x08004d60
 80007d8:	08004d7c 	.word	0x08004d7c
 80007dc:	08004d9c 	.word	0x08004d9c
 80007e0:	08004dc0 	.word	0x08004dc0
 80007e4:	08004dd0 	.word	0x08004dd0

080007e8 <mpu6050_read>:

void mpu6050_read(){
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af04      	add	r7, sp, #16
	uint8_t data[6]; // Read 6 bytes: X, Y, Z
	    int16_t x_acc, y_acc, z_acc;

	    // Read 6 bytes starting from REG_DATA
	    HAL_I2C_Mem_Read(hi2c, (DEVICE_ADDRESS)+1, REG_DATA, 1, data, 6, Timeout);
 80007ee:	4824      	ldr	r0, [pc, #144]	@ (8000880 <mpu6050_read+0x98>)
 80007f0:	2364      	movs	r3, #100	@ 0x64
 80007f2:	9302      	str	r3, [sp, #8]
 80007f4:	2306      	movs	r3, #6
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2301      	movs	r3, #1
 80007fe:	223b      	movs	r2, #59	@ 0x3b
 8000800:	21d1      	movs	r1, #209	@ 0xd1
 8000802:	f000 ff29 	bl	8001658 <HAL_I2C_Mem_Read>
	    // Combine high and low bytes for X, Y, Z
	    x_acc = ((int16_t)data[0] << 8) | data[1];
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	b219      	sxth	r1, r3
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	b21a      	sxth	r2, r3
 8000814:	200e      	movs	r0, #14
 8000816:	183b      	adds	r3, r7, r0
 8000818:	430a      	orrs	r2, r1
 800081a:	801a      	strh	r2, [r3, #0]
	    y_acc = ((int16_t)data[2] << 8) | data[3];
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	789b      	ldrb	r3, [r3, #2]
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	b219      	sxth	r1, r3
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	78db      	ldrb	r3, [r3, #3]
 8000828:	b21a      	sxth	r2, r3
 800082a:	240c      	movs	r4, #12
 800082c:	193b      	adds	r3, r7, r4
 800082e:	430a      	orrs	r2, r1
 8000830:	801a      	strh	r2, [r3, #0]
	    z_acc = ((int16_t)data[4] << 8) | data[5];
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b219      	sxth	r1, r3
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	795b      	ldrb	r3, [r3, #5]
 800083e:	b21a      	sxth	r2, r3
 8000840:	250a      	movs	r5, #10
 8000842:	197b      	adds	r3, r7, r5
 8000844:	430a      	orrs	r2, r1
 8000846:	801a      	strh	r2, [r3, #0]

	    // Print the results
	    printf("\r\nX-axis acceleration: %d\r\n", x_acc);
 8000848:	183b      	adds	r3, r7, r0
 800084a:	2200      	movs	r2, #0
 800084c:	5e9a      	ldrsh	r2, [r3, r2]
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <mpu6050_read+0x9c>)
 8000850:	0011      	movs	r1, r2
 8000852:	0018      	movs	r0, r3
 8000854:	f003 fa94 	bl	8003d80 <iprintf>
	    printf("Y-axis acceleration: %d\r\n", y_acc);
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	5e9a      	ldrsh	r2, [r3, r2]
 800085e:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <mpu6050_read+0xa0>)
 8000860:	0011      	movs	r1, r2
 8000862:	0018      	movs	r0, r3
 8000864:	f003 fa8c 	bl	8003d80 <iprintf>
	    printf("Z-axis acceleration: %d\r\n", z_acc);
 8000868:	197b      	adds	r3, r7, r5
 800086a:	2200      	movs	r2, #0
 800086c:	5e9a      	ldrsh	r2, [r3, r2]
 800086e:	4b07      	ldr	r3, [pc, #28]	@ (800088c <mpu6050_read+0xa4>)
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f003 fa84 	bl	8003d80 <iprintf>

}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b004      	add	sp, #16
 800087e:	bdb0      	pop	{r4, r5, r7, pc}
 8000880:	20000084 	.word	0x20000084
 8000884:	08004de8 	.word	0x08004de8
 8000888:	08004e04 	.word	0x08004e04
 800088c:	08004e20 	.word	0x08004e20

08000890 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <RetargetInit+0x28>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <RetargetInit+0x2c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6898      	ldr	r0, [r3, #8]
 80008a4:	2300      	movs	r3, #0
 80008a6:	2202      	movs	r2, #2
 80008a8:	2100      	movs	r1, #0
 80008aa:	f003 fad9 	bl	8003e60 <setvbuf>
}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	2000016c 	.word	0x2000016c
 80008bc:	20000018 	.word	0x20000018

080008c0 <_isatty>:

int _isatty(int fd) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db04      	blt.n	80008d8 <_isatty+0x18>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	dc01      	bgt.n	80008d8 <_isatty+0x18>
    return 1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e005      	b.n	80008e4 <_isatty+0x24>

  errno = EBADF;
 80008d8:	f003 fcba 	bl	8004250 <__errno>
 80008dc:	0003      	movs	r3, r0
 80008de:	2209      	movs	r2, #9
 80008e0:	601a      	str	r2, [r3, #0]
  return 0;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_write>:

int _write(int fd, char* ptr, int len) {
 80008ec:	b5b0      	push	{r4, r5, r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d002      	beq.n	8000904 <_write+0x18>
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d114      	bne.n	800092e <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <_write+0x58>)
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	b29a      	uxth	r2, r3
 800090c:	2517      	movs	r5, #23
 800090e:	197c      	adds	r4, r7, r5
 8000910:	2301      	movs	r3, #1
 8000912:	425b      	negs	r3, r3
 8000914:	68b9      	ldr	r1, [r7, #8]
 8000916:	f002 faf3 	bl	8002f00 <HAL_UART_Transmit>
 800091a:	0003      	movs	r3, r0
 800091c:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 800091e:	197b      	adds	r3, r7, r5
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <_write+0x3e>
      return len;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	e008      	b.n	800093c <_write+0x50>
    else
      return EIO;
 800092a:	2305      	movs	r3, #5
 800092c:	e006      	b.n	800093c <_write+0x50>
  }
  errno = EBADF;
 800092e:	f003 fc8f 	bl	8004250 <__errno>
 8000932:	0003      	movs	r3, r0
 8000934:	2209      	movs	r2, #9
 8000936:	601a      	str	r2, [r3, #0]
  return -1;
 8000938:	2301      	movs	r3, #1
 800093a:	425b      	negs	r3, r3
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	b006      	add	sp, #24
 8000942:	bdb0      	pop	{r4, r5, r7, pc}
 8000944:	2000016c 	.word	0x2000016c

08000948 <_close>:

int _close(int fd) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db04      	blt.n	8000960 <_close+0x18>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b02      	cmp	r3, #2
 800095a:	dc01      	bgt.n	8000960 <_close+0x18>
    return 0;
 800095c:	2300      	movs	r3, #0
 800095e:	e006      	b.n	800096e <_close+0x26>

  errno = EBADF;
 8000960:	f003 fc76 	bl	8004250 <__errno>
 8000964:	0003      	movs	r3, r0
 8000966:	2209      	movs	r2, #9
 8000968:	601a      	str	r2, [r3, #0]
  return -1;
 800096a:	2301      	movs	r3, #1
 800096c:	425b      	negs	r3, r3
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}

08000976 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b084      	sub	sp, #16
 800097a:	af00      	add	r7, sp, #0
 800097c:	60f8      	str	r0, [r7, #12]
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000982:	f003 fc65 	bl	8004250 <__errno>
 8000986:	0003      	movs	r3, r0
 8000988:	2209      	movs	r2, #9
 800098a:	601a      	str	r2, [r3, #0]
  return -1;
 800098c:	2301      	movs	r3, #1
 800098e:	425b      	negs	r3, r3
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	b004      	add	sp, #16
 8000996:	bd80      	pop	{r7, pc}

08000998 <_read>:

int _read(int fd, char* ptr, int len) {
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d113      	bne.n	80009d2 <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <_read+0x50>)
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	2517      	movs	r5, #23
 80009b0:	197c      	adds	r4, r7, r5
 80009b2:	2301      	movs	r3, #1
 80009b4:	425b      	negs	r3, r3
 80009b6:	68b9      	ldr	r1, [r7, #8]
 80009b8:	2201      	movs	r2, #1
 80009ba:	f002 fb45 	bl	8003048 <HAL_UART_Receive>
 80009be:	0003      	movs	r3, r0
 80009c0:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 80009c2:	197b      	adds	r3, r7, r5
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <_read+0x36>
      return 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e008      	b.n	80009e0 <_read+0x48>
    else
      return EIO;
 80009ce:	2305      	movs	r3, #5
 80009d0:	e006      	b.n	80009e0 <_read+0x48>
  }
  errno = EBADF;
 80009d2:	f003 fc3d 	bl	8004250 <__errno>
 80009d6:	0003      	movs	r3, r0
 80009d8:	2209      	movs	r2, #9
 80009da:	601a      	str	r2, [r3, #0]
  return -1;
 80009dc:	2301      	movs	r3, #1
 80009de:	425b      	negs	r3, r3
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b006      	add	sp, #24
 80009e6:	bdb0      	pop	{r4, r5, r7, pc}
 80009e8:	2000016c 	.word	0x2000016c

080009ec <_fstat>:

int _fstat(int fd, struct stat* st) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db08      	blt.n	8000a0e <_fstat+0x22>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	dc05      	bgt.n	8000a0e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	0192      	lsls	r2, r2, #6
 8000a08:	605a      	str	r2, [r3, #4]
    return 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e005      	b.n	8000a1a <_fstat+0x2e>
  }

  errno = EBADF;
 8000a0e:	f003 fc1f 	bl	8004250 <__errno>
 8000a12:	0003      	movs	r3, r0
 8000a14:	2209      	movs	r2, #9
 8000a16:	601a      	str	r2, [r3, #0]
  return 0;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a48:	2180      	movs	r1, #128	@ 0x80
 8000a4a:	0549      	lsls	r1, r1, #21
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_MspInit+0x44>)
 8000a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	055b      	lsls	r3, r3, #21
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b091      	sub	sp, #68	@ 0x44
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	232c      	movs	r3, #44	@ 0x2c
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2314      	movs	r3, #20
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f003 fb90 	bl	80041a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	2410      	movs	r4, #16
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	231c      	movs	r3, #28
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f003 fb88 	bl	80041a4 <memset>
  if(hi2c->Instance==I2C1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a22      	ldr	r2, [pc, #136]	@ (8000b24 <HAL_I2C_MspInit+0xb8>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d13e      	bne.n	8000b1c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	f002 f89d 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000ab6:	f7ff fe05 	bl	80006c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <HAL_I2C_MspInit+0xbc>)
 8000abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <HAL_I2C_MspInit+0xbc>)
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <HAL_I2C_MspInit+0xbc>)
 8000ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aca:	2202      	movs	r2, #2
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ad2:	212c      	movs	r1, #44	@ 0x2c
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	22c0      	movs	r2, #192	@ 0xc0
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2212      	movs	r2, #18
 8000ae0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2206      	movs	r2, #6
 8000af2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <HAL_I2C_MspInit+0xc0>)
 8000af8:	0019      	movs	r1, r3
 8000afa:	0010      	movs	r0, r2
 8000afc:	f000 fa56 	bl	8000fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_I2C_MspInit+0xbc>)
 8000b02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_I2C_MspInit+0xbc>)
 8000b06:	2180      	movs	r1, #128	@ 0x80
 8000b08:	0389      	lsls	r1, r1, #14
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_I2C_MspInit+0xbc>)
 8000b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b12:	2380      	movs	r3, #128	@ 0x80
 8000b14:	039b      	lsls	r3, r3, #14
 8000b16:	4013      	ands	r3, r2
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b011      	add	sp, #68	@ 0x44
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	50000400 	.word	0x50000400

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b091      	sub	sp, #68	@ 0x44
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	232c      	movs	r3, #44	@ 0x2c
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	2314      	movs	r3, #20
 8000b40:	001a      	movs	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	f003 fb2e 	bl	80041a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	2410      	movs	r4, #16
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	231c      	movs	r3, #28
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f003 fb26 	bl	80041a4 <memset>
  if(huart->Instance==USART2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a22      	ldr	r2, [pc, #136]	@ (8000be8 <HAL_UART_MspInit+0xb8>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d13e      	bne.n	8000be0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2202      	movs	r2, #2
 8000b66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 f83b 	bl	8002bec <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b7a:	f7ff fda3 	bl	80006c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <HAL_UART_MspInit+0xbc>)
 8000b80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <HAL_UART_MspInit+0xbc>)
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	0289      	lsls	r1, r1, #10
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <HAL_UART_MspInit+0xbc>)
 8000b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	029b      	lsls	r3, r3, #10
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <HAL_UART_MspInit+0xbc>)
 8000b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <HAL_UART_MspInit+0xbc>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <HAL_UART_MspInit+0xbc>)
 8000ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000baa:	2201      	movs	r2, #1
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb2:	212c      	movs	r1, #44	@ 0x2c
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2201      	movs	r2, #1
 8000bd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	187a      	adds	r2, r7, r1
 8000bd4:	23a0      	movs	r3, #160	@ 0xa0
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	0011      	movs	r1, r2
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 f9e6 	bl	8000fac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b011      	add	sp, #68	@ 0x44
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40021000 	.word	0x40021000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	46c0      	nop			@ (mov r8, r8)
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f8d4 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	@ (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f003 fafc 	bl	8004250 <__errno>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	425b      	negs	r3, r3
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	18d2      	adds	r2, r2, r3
 8000c72:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <_sbrk+0x64>)
 8000c74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b006      	add	sp, #24
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20009000 	.word	0x20009000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	20000170 	.word	0x20000170
 8000c8c:	200002c8 	.word	0x200002c8

08000c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c9c:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca0:	f7ff fff6 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	@ (8000cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <LoopForever+0xe>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce8 <LoopForever+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cca:	f003 fac7 	bl	800425c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cce:	f7ff fb97 	bl	8000400 <main>

08000cd2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cd2:	e7fe      	b.n	8000cd2 <LoopForever>
  ldr   r0, =_estack
 8000cd4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ce0:	08004f00 	.word	0x08004f00
  ldr r2, =_sbss
 8000ce4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ce8:	200002c4 	.word	0x200002c4

08000cec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <HAL_Init+0x3c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <HAL_Init+0x3c>)
 8000d02:	2180      	movs	r1, #128	@ 0x80
 8000d04:	0049      	lsls	r1, r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f810 	bl	8000d30 <HAL_InitTick>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e001      	b.n	8000d20 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fe82 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40022000 	.word	0x40022000

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d38:	230f      	movs	r3, #15
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <HAL_InitTick+0x88>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d02b      	beq.n	8000da0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d48:	4b1c      	ldr	r3, [pc, #112]	@ (8000dbc <HAL_InitTick+0x8c>)
 8000d4a:	681c      	ldr	r4, [r3, #0]
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <HAL_InitTick+0x88>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	0019      	movs	r1, r3
 8000d52:	23fa      	movs	r3, #250	@ 0xfa
 8000d54:	0098      	lsls	r0, r3, #2
 8000d56:	f7ff f9dd 	bl	8000114 <__udivsi3>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0020      	movs	r0, r4
 8000d60:	f7ff f9d8 	bl	8000114 <__udivsi3>
 8000d64:	0003      	movs	r3, r0
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 f913 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d112      	bne.n	8000d96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d80a      	bhi.n	8000d8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 f8f2 	bl	8000f68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <HAL_InitTick+0x90>)
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	e00d      	b.n	8000da8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e008      	b.n	8000da8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d96:	230f      	movs	r3, #15
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e003      	b.n	8000da8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000da8:	230f      	movs	r3, #15
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	781b      	ldrb	r3, [r3, #0]
}
 8000dae:	0018      	movs	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b005      	add	sp, #20
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	001a      	movs	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	18d2      	adds	r2, r2, r3
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000174 	.word	0x20000174

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	@ (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	20000174 	.word	0x20000174

08000dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e04:	f7ff fff0 	bl	8000de8 <HAL_GetTick>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	d005      	beq.n	8000e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <HAL_Delay+0x44>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	189b      	adds	r3, r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	f7ff ffe0 	bl	8000de8 <HAL_GetTick>
 8000e28:	0002      	movs	r2, r0
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8f7      	bhi.n	8000e24 <HAL_Delay+0x28>
  {
  }
}
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	20000008 	.word	0x20000008

08000e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	6039      	str	r1, [r7, #0]
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e58:	d828      	bhi.n	8000eac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f18 <__NVIC_SetPriority+0xd4>)
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	33c0      	adds	r3, #192	@ 0xc0
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	589b      	ldr	r3, [r3, r2]
 8000e6a:	1dfa      	adds	r2, r7, #7
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	0011      	movs	r1, r2
 8000e70:	2203      	movs	r2, #3
 8000e72:	400a      	ands	r2, r1
 8000e74:	00d2      	lsls	r2, r2, #3
 8000e76:	21ff      	movs	r1, #255	@ 0xff
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	43d2      	mvns	r2, r2
 8000e7e:	401a      	ands	r2, r3
 8000e80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	019b      	lsls	r3, r3, #6
 8000e86:	22ff      	movs	r2, #255	@ 0xff
 8000e88:	401a      	ands	r2, r3
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	0018      	movs	r0, r3
 8000e90:	2303      	movs	r3, #3
 8000e92:	4003      	ands	r3, r0
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e98:	481f      	ldr	r0, [pc, #124]	@ (8000f18 <__NVIC_SetPriority+0xd4>)
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	33c0      	adds	r3, #192	@ 0xc0
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eaa:	e031      	b.n	8000f10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eac:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <__NVIC_SetPriority+0xd8>)
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	400b      	ands	r3, r1
 8000eb8:	3b08      	subs	r3, #8
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3306      	adds	r3, #6
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	18d3      	adds	r3, r2, r3
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	1dfa      	adds	r2, r7, #7
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	0011      	movs	r1, r2
 8000ecc:	2203      	movs	r2, #3
 8000ece:	400a      	ands	r2, r1
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	21ff      	movs	r1, #255	@ 0xff
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	43d2      	mvns	r2, r2
 8000eda:	401a      	ands	r2, r3
 8000edc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	019b      	lsls	r3, r3, #6
 8000ee2:	22ff      	movs	r2, #255	@ 0xff
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	0018      	movs	r0, r3
 8000eec:	2303      	movs	r3, #3
 8000eee:	4003      	ands	r3, r0
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef4:	4809      	ldr	r0, [pc, #36]	@ (8000f1c <__NVIC_SetPriority+0xd8>)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	001c      	movs	r4, r3
 8000efc:	230f      	movs	r3, #15
 8000efe:	4023      	ands	r3, r4
 8000f00:	3b08      	subs	r3, #8
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	430a      	orrs	r2, r1
 8000f06:	3306      	adds	r3, #6
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	18c3      	adds	r3, r0, r3
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	601a      	str	r2, [r3, #0]
}
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b003      	add	sp, #12
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	1e5a      	subs	r2, r3, #1
 8000f2c:	2380      	movs	r3, #128	@ 0x80
 8000f2e:	045b      	lsls	r3, r3, #17
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d301      	bcc.n	8000f38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f34:	2301      	movs	r3, #1
 8000f36:	e010      	b.n	8000f5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <SysTick_Config+0x44>)
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	3a01      	subs	r2, #1
 8000f3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f40:	2301      	movs	r3, #1
 8000f42:	425b      	negs	r3, r3
 8000f44:	2103      	movs	r1, #3
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff ff7c 	bl	8000e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x44>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x44>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b002      	add	sp, #8
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	210f      	movs	r1, #15
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	1c02      	adds	r2, r0, #0
 8000f78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff ff5d 	bl	8000e44 <__NVIC_SetPriority>
}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ffbf 	bl	8000f20 <SysTick_Config>
 8000fa2:	0003      	movs	r3, r0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e147      	b.n	800124c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4091      	lsls	r1, r2
 8000fc6:	000a      	movs	r2, r1
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d100      	bne.n	8000fd4 <HAL_GPIO_Init+0x28>
 8000fd2:	e138      	b.n	8001246 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d005      	beq.n	8000fec <HAL_GPIO_Init+0x40>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	0013      	movs	r3, r2
 8000ffc:	43da      	mvns	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	409a      	lsls	r2, r3
 800100e:	0013      	movs	r3, r2
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	43da      	mvns	r2, r3
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	2201      	movs	r2, #1
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2203      	movs	r2, #3
 8001054:	4013      	ands	r3, r2
 8001056:	2b03      	cmp	r3, #3
 8001058:	d017      	beq.n	800108a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	43da      	mvns	r2, r3
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	4013      	ands	r3, r2
 8001092:	2b02      	cmp	r3, #2
 8001094:	d123      	bne.n	80010de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	58d3      	ldr	r3, [r2, r3]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2207      	movs	r2, #7
 80010a8:	4013      	ands	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2107      	movs	r1, #7
 80010c2:	400b      	ands	r3, r1
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	6939      	ldr	r1, [r7, #16]
 80010dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	409a      	lsls	r2, r3
 80010ec:	0013      	movs	r3, r2
 80010ee:	43da      	mvns	r2, r3
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2203      	movs	r2, #3
 80010fc:	401a      	ands	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	23c0      	movs	r3, #192	@ 0xc0
 8001118:	029b      	lsls	r3, r3, #10
 800111a:	4013      	ands	r3, r2
 800111c:	d100      	bne.n	8001120 <HAL_GPIO_Init+0x174>
 800111e:	e092      	b.n	8001246 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001120:	4a50      	ldr	r2, [pc, #320]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3318      	adds	r3, #24
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	589b      	ldr	r3, [r3, r2]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	220f      	movs	r2, #15
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	43da      	mvns	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	23a0      	movs	r3, #160	@ 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	429a      	cmp	r2, r3
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x1ca>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a45      	ldr	r2, [pc, #276]	@ (8001268 <HAL_GPIO_Init+0x2bc>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x1c6>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a44      	ldr	r2, [pc, #272]	@ (800126c <HAL_GPIO_Init+0x2c0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x1c2>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a43      	ldr	r2, [pc, #268]	@ (8001270 <HAL_GPIO_Init+0x2c4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x1be>
 8001166:	2303      	movs	r3, #3
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x1cc>
 800116a:	2305      	movs	r3, #5
 800116c:	e004      	b.n	8001178 <HAL_GPIO_Init+0x1cc>
 800116e:	2302      	movs	r3, #2
 8001170:	e002      	b.n	8001178 <HAL_GPIO_Init+0x1cc>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x1cc>
 8001176:	2300      	movs	r3, #0
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	2103      	movs	r1, #3
 800117c:	400a      	ands	r2, r1
 800117e:	00d2      	lsls	r2, r2, #3
 8001180:	4093      	lsls	r3, r2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001188:	4936      	ldr	r1, [pc, #216]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3318      	adds	r3, #24
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001196:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43da      	mvns	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	035b      	lsls	r3, r3, #13
 80011ae:	4013      	ands	r3, r2
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011c0:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43da      	mvns	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	039b      	lsls	r3, r3, #14
 80011d8:	4013      	ands	r3, r2
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 80011ec:	2384      	movs	r3, #132	@ 0x84
 80011ee:	58d3      	ldr	r3, [r2, r3]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4013      	ands	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001210:	4914      	ldr	r1, [pc, #80]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 8001212:	2284      	movs	r2, #132	@ 0x84
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001218:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	58d3      	ldr	r3, [r2, r3]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43da      	mvns	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	2380      	movs	r3, #128	@ 0x80
 8001230:	025b      	lsls	r3, r3, #9
 8001232:	4013      	ands	r3, r2
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800123e:	4909      	ldr	r1, [pc, #36]	@ (8001264 <HAL_GPIO_Init+0x2b8>)
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	40da      	lsrs	r2, r3
 8001254:	1e13      	subs	r3, r2, #0
 8001256:	d000      	beq.n	800125a <HAL_GPIO_Init+0x2ae>
 8001258:	e6b0      	b.n	8000fbc <HAL_GPIO_Init+0x10>
  }
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	b006      	add	sp, #24
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021800 	.word	0x40021800
 8001268:	50000400 	.word	0x50000400
 800126c:	50000800 	.word	0x50000800
 8001270:	50000c00 	.word	0x50000c00

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	0008      	movs	r0, r1
 800127e:	0011      	movs	r1, r2
 8001280:	1cbb      	adds	r3, r7, #2
 8001282:	1c02      	adds	r2, r0, #0
 8001284:	801a      	strh	r2, [r3, #0]
 8001286:	1c7b      	adds	r3, r7, #1
 8001288:	1c0a      	adds	r2, r1, #0
 800128a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128c:	1c7b      	adds	r3, r7, #1
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001294:	1cbb      	adds	r3, r7, #2
 8001296:	881a      	ldrh	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129e:	1cbb      	adds	r3, r7, #2
 80012a0:	881a      	ldrh	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b002      	add	sp, #8
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e08f      	b.n	80013e2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2241      	movs	r2, #65	@ 0x41
 80012c6:	5c9b      	ldrb	r3, [r3, r2]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d107      	bne.n	80012de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2240      	movs	r2, #64	@ 0x40
 80012d2:	2100      	movs	r1, #0
 80012d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0018      	movs	r0, r3
 80012da:	f7ff fbc7 	bl	8000a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2241      	movs	r2, #65	@ 0x41
 80012e2:	2124      	movs	r1, #36	@ 0x24
 80012e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	438a      	bics	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	493b      	ldr	r1, [pc, #236]	@ (80013ec <HAL_I2C_Init+0x13c>)
 8001300:	400a      	ands	r2, r1
 8001302:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4938      	ldr	r1, [pc, #224]	@ (80013f0 <HAL_I2C_Init+0x140>)
 8001310:	400a      	ands	r2, r1
 8001312:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d108      	bne.n	800132e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2180      	movs	r1, #128	@ 0x80
 8001326:	0209      	lsls	r1, r1, #8
 8001328:	430a      	orrs	r2, r1
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	e007      	b.n	800133e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2184      	movs	r1, #132	@ 0x84
 8001338:	0209      	lsls	r1, r1, #8
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d109      	bne.n	800135a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2180      	movs	r1, #128	@ 0x80
 8001352:	0109      	lsls	r1, r1, #4
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	e007      	b.n	800136a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4923      	ldr	r1, [pc, #140]	@ (80013f4 <HAL_I2C_Init+0x144>)
 8001366:	400a      	ands	r2, r1
 8001368:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4920      	ldr	r1, [pc, #128]	@ (80013f8 <HAL_I2C_Init+0x148>)
 8001376:	430a      	orrs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	491a      	ldr	r1, [pc, #104]	@ (80013f0 <HAL_I2C_Init+0x140>)
 8001386:	400a      	ands	r2, r1
 8001388:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	431a      	orrs	r2, r3
 8001394:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69d9      	ldr	r1, [r3, #28]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1a      	ldr	r2, [r3, #32]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2101      	movs	r1, #1
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2241      	movs	r2, #65	@ 0x41
 80013ce:	2120      	movs	r1, #32
 80013d0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2242      	movs	r2, #66	@ 0x42
 80013dc:	2100      	movs	r1, #0
 80013de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	f0ffffff 	.word	0xf0ffffff
 80013f0:	ffff7fff 	.word	0xffff7fff
 80013f4:	fffff7ff 	.word	0xfffff7ff
 80013f8:	02008000 	.word	0x02008000

080013fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af02      	add	r7, sp, #8
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	000c      	movs	r4, r1
 8001406:	0010      	movs	r0, r2
 8001408:	0019      	movs	r1, r3
 800140a:	230a      	movs	r3, #10
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	1c22      	adds	r2, r4, #0
 8001410:	801a      	strh	r2, [r3, #0]
 8001412:	2308      	movs	r3, #8
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	1c02      	adds	r2, r0, #0
 8001418:	801a      	strh	r2, [r3, #0]
 800141a:	1dbb      	adds	r3, r7, #6
 800141c:	1c0a      	adds	r2, r1, #0
 800141e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2241      	movs	r2, #65	@ 0x41
 8001424:	5c9b      	ldrb	r3, [r3, r2]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b20      	cmp	r3, #32
 800142a:	d000      	beq.n	800142e <HAL_I2C_Mem_Write+0x32>
 800142c:	e10c      	b.n	8001648 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800142e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <HAL_I2C_Mem_Write+0x42>
 8001434:	232c      	movs	r3, #44	@ 0x2c
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d105      	bne.n	800144a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0ff      	b.n	800164a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2240      	movs	r2, #64	@ 0x40
 800144e:	5c9b      	ldrb	r3, [r3, r2]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_I2C_Mem_Write+0x5c>
 8001454:	2302      	movs	r3, #2
 8001456:	e0f8      	b.n	800164a <HAL_I2C_Mem_Write+0x24e>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2240      	movs	r2, #64	@ 0x40
 800145c:	2101      	movs	r1, #1
 800145e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001460:	f7ff fcc2 	bl	8000de8 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	0219      	lsls	r1, r3, #8
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2319      	movs	r3, #25
 8001474:	2201      	movs	r2, #1
 8001476:	f000 fc07 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0e3      	b.n	800164a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2241      	movs	r2, #65	@ 0x41
 8001486:	2121      	movs	r1, #33	@ 0x21
 8001488:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2242      	movs	r2, #66	@ 0x42
 800148e:	2140      	movs	r1, #64	@ 0x40
 8001490:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	222c      	movs	r2, #44	@ 0x2c
 80014a2:	18ba      	adds	r2, r7, r2
 80014a4:	8812      	ldrh	r2, [r2, #0]
 80014a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014ae:	1dbb      	adds	r3, r7, #6
 80014b0:	881c      	ldrh	r4, [r3, #0]
 80014b2:	2308      	movs	r3, #8
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	881a      	ldrh	r2, [r3, #0]
 80014b8:	230a      	movs	r3, #10
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	8819      	ldrh	r1, [r3, #0]
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	0023      	movs	r3, r4
 80014ca:	f000 faf5 	bl	8001ab8 <I2C_RequestMemoryWrite>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d005      	beq.n	80014de <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2240      	movs	r2, #64	@ 0x40
 80014d6:	2100      	movs	r1, #0
 80014d8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0b5      	b.n	800164a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	2bff      	cmp	r3, #255	@ 0xff
 80014e6:	d911      	bls.n	800150c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	22ff      	movs	r2, #255	@ 0xff
 80014ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	045c      	lsls	r4, r3, #17
 80014f8:	230a      	movs	r3, #10
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	8819      	ldrh	r1, [r3, #0]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	2300      	movs	r3, #0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	0023      	movs	r3, r4
 8001506:	f000 fd99 	bl	800203c <I2C_TransferConfig>
 800150a:	e012      	b.n	8001532 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001510:	b29a      	uxth	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800151a:	b2da      	uxtb	r2, r3
 800151c:	2380      	movs	r3, #128	@ 0x80
 800151e:	049c      	lsls	r4, r3, #18
 8001520:	230a      	movs	r3, #10
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	8819      	ldrh	r1, [r3, #0]
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	0023      	movs	r3, r4
 800152e:	f000 fd85 	bl	800203c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	0018      	movs	r0, r3
 800153a:	f000 fbfd 	bl	8001d38 <I2C_WaitOnTXISFlagUntilTimeout>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e081      	b.n	800164a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001560:	b29b      	uxth	r3, r3
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800156e:	3b01      	subs	r3, #1
 8001570:	b29a      	uxth	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800157a:	b29b      	uxth	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d03a      	beq.n	80015f6 <HAL_I2C_Mem_Write+0x1fa>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d136      	bne.n	80015f6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	0013      	movs	r3, r2
 8001592:	2200      	movs	r2, #0
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	f000 fb77 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d001      	beq.n	80015a2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e053      	b.n	800164a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	2bff      	cmp	r3, #255	@ 0xff
 80015aa:	d911      	bls.n	80015d0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	22ff      	movs	r2, #255	@ 0xff
 80015b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	045c      	lsls	r4, r3, #17
 80015bc:	230a      	movs	r3, #10
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	8819      	ldrh	r1, [r3, #0]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	2300      	movs	r3, #0
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	0023      	movs	r3, r4
 80015ca:	f000 fd37 	bl	800203c <I2C_TransferConfig>
 80015ce:	e012      	b.n	80015f6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	049c      	lsls	r4, r3, #18
 80015e4:	230a      	movs	r3, #10
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	8819      	ldrh	r1, [r3, #0]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	0023      	movs	r3, r4
 80015f2:	f000 fd23 	bl	800203c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d198      	bne.n	8001532 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	0018      	movs	r0, r3
 8001608:	f000 fbdc 	bl	8001dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e01a      	b.n	800164a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2220      	movs	r2, #32
 800161a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	490b      	ldr	r1, [pc, #44]	@ (8001654 <HAL_I2C_Mem_Write+0x258>)
 8001628:	400a      	ands	r2, r1
 800162a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2241      	movs	r2, #65	@ 0x41
 8001630:	2120      	movs	r1, #32
 8001632:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2242      	movs	r2, #66	@ 0x42
 8001638:	2100      	movs	r1, #0
 800163a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	2100      	movs	r1, #0
 8001642:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	e000      	b.n	800164a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001648:	2302      	movs	r3, #2
  }
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b007      	add	sp, #28
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	fe00e800 	.word	0xfe00e800

08001658 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af02      	add	r7, sp, #8
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	000c      	movs	r4, r1
 8001662:	0010      	movs	r0, r2
 8001664:	0019      	movs	r1, r3
 8001666:	230a      	movs	r3, #10
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	1c22      	adds	r2, r4, #0
 800166c:	801a      	strh	r2, [r3, #0]
 800166e:	2308      	movs	r3, #8
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	1c02      	adds	r2, r0, #0
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	1c0a      	adds	r2, r1, #0
 800167a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2241      	movs	r2, #65	@ 0x41
 8001680:	5c9b      	ldrb	r3, [r3, r2]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b20      	cmp	r3, #32
 8001686:	d000      	beq.n	800168a <HAL_I2C_Mem_Read+0x32>
 8001688:	e110      	b.n	80018ac <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800168a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <HAL_I2C_Mem_Read+0x42>
 8001690:	232c      	movs	r3, #44	@ 0x2c
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2280      	movs	r2, #128	@ 0x80
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e103      	b.n	80018ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2240      	movs	r2, #64	@ 0x40
 80016aa:	5c9b      	ldrb	r3, [r3, r2]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_I2C_Mem_Read+0x5c>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e0fc      	b.n	80018ae <HAL_I2C_Mem_Read+0x256>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2240      	movs	r2, #64	@ 0x40
 80016b8:	2101      	movs	r1, #1
 80016ba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016bc:	f7ff fb94 	bl	8000de8 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	0219      	lsls	r1, r3, #8
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2319      	movs	r3, #25
 80016d0:	2201      	movs	r2, #1
 80016d2:	f000 fad9 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0e7      	b.n	80018ae <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2241      	movs	r2, #65	@ 0x41
 80016e2:	2122      	movs	r1, #34	@ 0x22
 80016e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2242      	movs	r2, #66	@ 0x42
 80016ea:	2140      	movs	r1, #64	@ 0x40
 80016ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	222c      	movs	r2, #44	@ 0x2c
 80016fe:	18ba      	adds	r2, r7, r2
 8001700:	8812      	ldrh	r2, [r2, #0]
 8001702:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800170a:	1dbb      	adds	r3, r7, #6
 800170c:	881c      	ldrh	r4, [r3, #0]
 800170e:	2308      	movs	r3, #8
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	881a      	ldrh	r2, [r3, #0]
 8001714:	230a      	movs	r3, #10
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	8819      	ldrh	r1, [r3, #0]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	0023      	movs	r3, r4
 8001726:	f000 fa2b 	bl	8001b80 <I2C_RequestMemoryRead>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d005      	beq.n	800173a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2240      	movs	r2, #64	@ 0x40
 8001732:	2100      	movs	r1, #0
 8001734:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0b9      	b.n	80018ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	2bff      	cmp	r3, #255	@ 0xff
 8001742:	d911      	bls.n	8001768 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	22ff      	movs	r2, #255	@ 0xff
 8001748:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800174e:	b2da      	uxtb	r2, r3
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	045c      	lsls	r4, r3, #17
 8001754:	230a      	movs	r3, #10
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	8819      	ldrh	r1, [r3, #0]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	4b56      	ldr	r3, [pc, #344]	@ (80018b8 <HAL_I2C_Mem_Read+0x260>)
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	0023      	movs	r3, r4
 8001762:	f000 fc6b 	bl	800203c <I2C_TransferConfig>
 8001766:	e012      	b.n	800178e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001776:	b2da      	uxtb	r2, r3
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	049c      	lsls	r4, r3, #18
 800177c:	230a      	movs	r3, #10
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	8819      	ldrh	r1, [r3, #0]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	4b4c      	ldr	r3, [pc, #304]	@ (80018b8 <HAL_I2C_Mem_Read+0x260>)
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	0023      	movs	r3, r4
 800178a:	f000 fc57 	bl	800203c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800178e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	0013      	movs	r3, r2
 8001798:	2200      	movs	r2, #0
 800179a:	2104      	movs	r1, #4
 800179c:	f000 fa74 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 80017a0:	1e03      	subs	r3, r0, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e082      	b.n	80018ae <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d03a      	beq.n	800185a <HAL_I2C_Mem_Read+0x202>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d136      	bne.n	800185a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	0013      	movs	r3, r2
 80017f6:	2200      	movs	r2, #0
 80017f8:	2180      	movs	r1, #128	@ 0x80
 80017fa:	f000 fa45 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 80017fe:	1e03      	subs	r3, r0, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e053      	b.n	80018ae <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800180a:	b29b      	uxth	r3, r3
 800180c:	2bff      	cmp	r3, #255	@ 0xff
 800180e:	d911      	bls.n	8001834 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	22ff      	movs	r2, #255	@ 0xff
 8001814:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181a:	b2da      	uxtb	r2, r3
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	045c      	lsls	r4, r3, #17
 8001820:	230a      	movs	r3, #10
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	8819      	ldrh	r1, [r3, #0]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	2300      	movs	r3, #0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	0023      	movs	r3, r4
 800182e:	f000 fc05 	bl	800203c <I2C_TransferConfig>
 8001832:	e012      	b.n	800185a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001842:	b2da      	uxtb	r2, r3
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	049c      	lsls	r4, r3, #18
 8001848:	230a      	movs	r3, #10
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	8819      	ldrh	r1, [r3, #0]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	0023      	movs	r3, r4
 8001856:	f000 fbf1 	bl	800203c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d194      	bne.n	800178e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	0018      	movs	r0, r3
 800186c:	f000 faaa 	bl	8001dc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001870:	1e03      	subs	r3, r0, #0
 8001872:	d001      	beq.n	8001878 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e01a      	b.n	80018ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2220      	movs	r2, #32
 800187e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	490c      	ldr	r1, [pc, #48]	@ (80018bc <HAL_I2C_Mem_Read+0x264>)
 800188c:	400a      	ands	r2, r1
 800188e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2241      	movs	r2, #65	@ 0x41
 8001894:	2120      	movs	r1, #32
 8001896:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2242      	movs	r2, #66	@ 0x42
 800189c:	2100      	movs	r1, #0
 800189e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2240      	movs	r2, #64	@ 0x40
 80018a4:	2100      	movs	r1, #0
 80018a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e000      	b.n	80018ae <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80018ac:	2302      	movs	r3, #2
  }
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b007      	add	sp, #28
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	80002400 	.word	0x80002400
 80018bc:	fe00e800 	.word	0xfe00e800

080018c0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	230a      	movs	r3, #10
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	1c0a      	adds	r2, r1, #0
 80018d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2241      	movs	r2, #65	@ 0x41
 80018dc:	5c9b      	ldrb	r3, [r3, r2]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d000      	beq.n	80018e6 <HAL_I2C_IsDeviceReady+0x26>
 80018e4:	e0df      	b.n	8001aa6 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699a      	ldr	r2, [r3, #24]
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	401a      	ands	r2, r3
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
 80018fc:	e0d4      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2240      	movs	r2, #64	@ 0x40
 8001902:	5c9b      	ldrb	r3, [r3, r2]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_I2C_IsDeviceReady+0x4c>
 8001908:	2302      	movs	r3, #2
 800190a:	e0cd      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x1e8>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2240      	movs	r2, #64	@ 0x40
 8001910:	2101      	movs	r1, #1
 8001912:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2241      	movs	r2, #65	@ 0x41
 8001918:	2124      	movs	r1, #36	@ 0x24
 800191a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_I2C_IsDeviceReady+0x7a>
 800192a:	230a      	movs	r3, #10
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	059b      	lsls	r3, r3, #22
 8001932:	0d9b      	lsrs	r3, r3, #22
 8001934:	4a5e      	ldr	r2, [pc, #376]	@ (8001ab0 <HAL_I2C_IsDeviceReady+0x1f0>)
 8001936:	431a      	orrs	r2, r3
 8001938:	e006      	b.n	8001948 <HAL_I2C_IsDeviceReady+0x88>
 800193a:	230a      	movs	r3, #10
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	059b      	lsls	r3, r3, #22
 8001942:	0d9b      	lsrs	r3, r3, #22
 8001944:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab4 <HAL_I2C_IsDeviceReady+0x1f4>)
 8001946:	431a      	orrs	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800194e:	f7ff fa4b 	bl	8000de8 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2220      	movs	r2, #32
 800195e:	4013      	ands	r3, r2
 8001960:	3b20      	subs	r3, #32
 8001962:	425a      	negs	r2, r3
 8001964:	4153      	adcs	r3, r2
 8001966:	b2da      	uxtb	r2, r3
 8001968:	231f      	movs	r3, #31
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2210      	movs	r2, #16
 8001976:	4013      	ands	r3, r2
 8001978:	3b10      	subs	r3, #16
 800197a:	425a      	negs	r2, r3
 800197c:	4153      	adcs	r3, r2
 800197e:	b2da      	uxtb	r2, r3
 8001980:	231e      	movs	r3, #30
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001986:	e035      	b.n	80019f4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	d01a      	beq.n	80019c4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7ff fa2b 	bl	8000de8 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d302      	bcc.n	80019a4 <HAL_I2C_IsDeviceReady+0xe4>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10f      	bne.n	80019c4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2241      	movs	r2, #65	@ 0x41
 80019a8:	2120      	movs	r1, #32
 80019aa:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	2220      	movs	r2, #32
 80019b2:	431a      	orrs	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2240      	movs	r2, #64	@ 0x40
 80019bc:	2100      	movs	r1, #0
 80019be:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e071      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	2220      	movs	r2, #32
 80019cc:	4013      	ands	r3, r2
 80019ce:	3b20      	subs	r3, #32
 80019d0:	425a      	negs	r2, r3
 80019d2:	4153      	adcs	r3, r2
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	231f      	movs	r3, #31
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2210      	movs	r2, #16
 80019e4:	4013      	ands	r3, r2
 80019e6:	3b10      	subs	r3, #16
 80019e8:	425a      	negs	r2, r3
 80019ea:	4153      	adcs	r3, r2
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	231e      	movs	r3, #30
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80019f4:	231f      	movs	r3, #31
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <HAL_I2C_IsDeviceReady+0x148>
 80019fe:	231e      	movs	r3, #30
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0bf      	beq.n	8001988 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	2210      	movs	r2, #16
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d01a      	beq.n	8001a4c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	0013      	movs	r3, r2
 8001a20:	2200      	movs	r2, #0
 8001a22:	2120      	movs	r1, #32
 8001a24:	f000 f930 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 8001a28:	1e03      	subs	r3, r0, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e03b      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2220      	movs	r2, #32
 8001a36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2241      	movs	r2, #65	@ 0x41
 8001a3c:	2120      	movs	r1, #32
 8001a3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2240      	movs	r2, #64	@ 0x40
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e02d      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	0013      	movs	r3, r2
 8001a56:	2200      	movs	r2, #0
 8001a58:	2120      	movs	r1, #32
 8001a5a:	f000 f915 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 8001a5e:	1e03      	subs	r3, r0, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e020      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2220      	movs	r2, #32
 8001a74:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d900      	bls.n	8001a86 <HAL_I2C_IsDeviceReady+0x1c6>
 8001a84:	e74d      	b.n	8001922 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2241      	movs	r2, #65	@ 0x41
 8001a8a:	2120      	movs	r1, #32
 8001a8c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	2220      	movs	r2, #32
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2240      	movs	r2, #64	@ 0x40
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8001aa6:	2302      	movs	r3, #2
  }
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b008      	add	sp, #32
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	02002000 	.word	0x02002000
 8001ab4:	02002800 	.word	0x02002800

08001ab8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	000c      	movs	r4, r1
 8001ac2:	0010      	movs	r0, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	250a      	movs	r5, #10
 8001ac8:	197b      	adds	r3, r7, r5
 8001aca:	1c22      	adds	r2, r4, #0
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	2308      	movs	r3, #8
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	1c02      	adds	r2, r0, #0
 8001ad4:	801a      	strh	r2, [r3, #0]
 8001ad6:	1dbb      	adds	r3, r7, #6
 8001ad8:	1c0a      	adds	r2, r1, #0
 8001ada:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001adc:	1dbb      	adds	r3, r7, #6
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	045c      	lsls	r4, r3, #17
 8001ae6:	197b      	adds	r3, r7, r5
 8001ae8:	8819      	ldrh	r1, [r3, #0]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <I2C_RequestMemoryWrite+0xc4>)
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	0023      	movs	r3, r4
 8001af2:	f000 faa3 	bl	800203c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af8:	6a39      	ldr	r1, [r7, #32]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 f91b 	bl	8001d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b02:	1e03      	subs	r3, r0, #0
 8001b04:	d001      	beq.n	8001b0a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e033      	b.n	8001b72 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b0a:	1dbb      	adds	r3, r7, #6
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b12:	2308      	movs	r3, #8
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b20:	e019      	b.n	8001b56 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b22:	2308      	movs	r3, #8
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b36:	6a39      	ldr	r1, [r7, #32]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 f8fc 	bl	8001d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d001      	beq.n	8001b48 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e014      	b.n	8001b72 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b48:	2308      	movs	r3, #8
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b56:	6a3a      	ldr	r2, [r7, #32]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	0013      	movs	r3, r2
 8001b60:	2200      	movs	r2, #0
 8001b62:	2180      	movs	r1, #128	@ 0x80
 8001b64:	f000 f890 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 8001b68:	1e03      	subs	r3, r0, #0
 8001b6a:	d001      	beq.n	8001b70 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b004      	add	sp, #16
 8001b78:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	80002000 	.word	0x80002000

08001b80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	000c      	movs	r4, r1
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	250a      	movs	r5, #10
 8001b90:	197b      	adds	r3, r7, r5
 8001b92:	1c22      	adds	r2, r4, #0
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	2308      	movs	r3, #8
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	1c02      	adds	r2, r0, #0
 8001b9c:	801a      	strh	r2, [r3, #0]
 8001b9e:	1dbb      	adds	r3, r7, #6
 8001ba0:	1c0a      	adds	r2, r1, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ba4:	1dbb      	adds	r3, r7, #6
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	197b      	adds	r3, r7, r5
 8001bac:	8819      	ldrh	r1, [r3, #0]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	4b23      	ldr	r3, [pc, #140]	@ (8001c40 <I2C_RequestMemoryRead+0xc0>)
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f000 fa41 	bl	800203c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 f8b9 	bl	8001d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d001      	beq.n	8001bce <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e033      	b.n	8001c36 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bce:	1dbb      	adds	r3, r7, #6
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d107      	bne.n	8001be6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001be4:	e019      	b.n	8001c1a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001be6:	2308      	movs	r3, #8
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bfa:	6a39      	ldr	r1, [r7, #32]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 f89a 	bl	8001d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c04:	1e03      	subs	r3, r0, #0
 8001c06:	d001      	beq.n	8001c0c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e014      	b.n	8001c36 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c1a:	6a3a      	ldr	r2, [r7, #32]
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	0013      	movs	r3, r2
 8001c24:	2200      	movs	r2, #0
 8001c26:	2140      	movs	r1, #64	@ 0x40
 8001c28:	f000 f82e 	bl	8001c88 <I2C_WaitOnFlagUntilTimeout>
 8001c2c:	1e03      	subs	r3, r0, #0
 8001c2e:	d001      	beq.n	8001c34 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	b004      	add	sp, #16
 8001c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	80002000 	.word	0x80002000

08001c44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d103      	bne.n	8001c62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d007      	beq.n	8001c80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699a      	ldr	r2, [r3, #24]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	619a      	str	r2, [r3, #24]
  }
}
 8001c80:	46c0      	nop			@ (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	1dfb      	adds	r3, r7, #7
 8001c96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c98:	e03a      	b.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	6839      	ldr	r1, [r7, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f000 f8d3 	bl	8001e4c <I2C_IsErrorOccurred>
 8001ca6:	1e03      	subs	r3, r0, #0
 8001ca8:	d001      	beq.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e040      	b.n	8001d30 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	d02d      	beq.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb4:	f7ff f898 	bl	8000de8 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d302      	bcc.n	8001cca <I2C_WaitOnFlagUntilTimeout+0x42>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d122      	bne.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	425a      	negs	r2, r3
 8001cda:	4153      	adcs	r3, r2
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	001a      	movs	r2, r3
 8001ce0:	1dfb      	adds	r3, r7, #7
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d113      	bne.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cec:	2220      	movs	r2, #32
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2241      	movs	r2, #65	@ 0x41
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2242      	movs	r2, #66	@ 0x42
 8001d00:	2100      	movs	r1, #0
 8001d02:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2240      	movs	r2, #64	@ 0x40
 8001d08:	2100      	movs	r1, #0
 8001d0a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e00f      	b.n	8001d30 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	425a      	negs	r2, r3
 8001d20:	4153      	adcs	r3, r2
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	001a      	movs	r2, r3
 8001d26:	1dfb      	adds	r3, r7, #7
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d0b5      	beq.n	8001c9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b004      	add	sp, #16
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d44:	e032      	b.n	8001dac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 f87d 	bl	8001e4c <I2C_IsErrorOccurred>
 8001d52:	1e03      	subs	r3, r0, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e030      	b.n	8001dbc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	d025      	beq.n	8001dac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d60:	f7ff f842 	bl	8000de8 <HAL_GetTick>
 8001d64:	0002      	movs	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d302      	bcc.n	8001d76 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d11a      	bne.n	8001dac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d013      	beq.n	8001dac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	2220      	movs	r2, #32
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2241      	movs	r2, #65	@ 0x41
 8001d94:	2120      	movs	r1, #32
 8001d96:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2242      	movs	r2, #66	@ 0x42
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2240      	movs	r2, #64	@ 0x40
 8001da4:	2100      	movs	r1, #0
 8001da6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e007      	b.n	8001dbc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2202      	movs	r2, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d1c5      	bne.n	8001d46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b004      	add	sp, #16
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd0:	e02f      	b.n	8001e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f000 f837 	bl	8001e4c <I2C_IsErrorOccurred>
 8001dde:	1e03      	subs	r3, r0, #0
 8001de0:	d001      	beq.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e02d      	b.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de6:	f7fe ffff 	bl	8000de8 <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d302      	bcc.n	8001dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11a      	bne.n	8001e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2220      	movs	r2, #32
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d013      	beq.n	8001e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	2220      	movs	r2, #32
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2241      	movs	r2, #65	@ 0x41
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2242      	movs	r2, #66	@ 0x42
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2240      	movs	r2, #64	@ 0x40
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e007      	b.n	8001e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d1c8      	bne.n	8001dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e58:	2327      	movs	r3, #39	@ 0x27
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2210      	movs	r2, #16
 8001e74:	4013      	ands	r3, r2
 8001e76:	d100      	bne.n	8001e7a <I2C_IsErrorOccurred+0x2e>
 8001e78:	e079      	b.n	8001f6e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2210      	movs	r2, #16
 8001e80:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e82:	e057      	b.n	8001f34 <I2C_IsErrorOccurred+0xe8>
 8001e84:	2227      	movs	r2, #39	@ 0x27
 8001e86:	18bb      	adds	r3, r7, r2
 8001e88:	18ba      	adds	r2, r7, r2
 8001e8a:	7812      	ldrb	r2, [r2, #0]
 8001e8c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3301      	adds	r3, #1
 8001e92:	d04f      	beq.n	8001f34 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e94:	f7fe ffa8 	bl	8000de8 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d302      	bcc.n	8001eaa <I2C_IsErrorOccurred+0x5e>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d144      	bne.n	8001f34 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	01db      	lsls	r3, r3, #7
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001eb8:	2013      	movs	r0, #19
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	2142      	movs	r1, #66	@ 0x42
 8001ec0:	5c52      	ldrb	r2, [r2, r1]
 8001ec2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	401a      	ands	r2, r3
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	021b      	lsls	r3, r3, #8
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d126      	bne.n	8001f26 <I2C_IsErrorOccurred+0xda>
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	2380      	movs	r3, #128	@ 0x80
 8001edc:	01db      	lsls	r3, r3, #7
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d021      	beq.n	8001f26 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d01d      	beq.n	8001f26 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2180      	movs	r1, #128	@ 0x80
 8001ef6:	01c9      	lsls	r1, r1, #7
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001efc:	f7fe ff74 	bl	8000de8 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f04:	e00f      	b.n	8001f26 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f06:	f7fe ff6f 	bl	8000de8 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b19      	cmp	r3, #25
 8001f12:	d908      	bls.n	8001f26 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	2220      	movs	r2, #32
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f1c:	2327      	movs	r3, #39	@ 0x27
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]

              break;
 8001f24:	e006      	b.n	8001f34 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d1e8      	bne.n	8001f06 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d004      	beq.n	8001f4c <I2C_IsErrorOccurred+0x100>
 8001f42:	2327      	movs	r3, #39	@ 0x27
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d09b      	beq.n	8001e84 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f4c:	2327      	movs	r3, #39	@ 0x27
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	2204      	movs	r2, #4
 8001f62:	4313      	orrs	r3, r2
 8001f64:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f66:	2327      	movs	r3, #39	@ 0x27
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d00c      	beq.n	8001f9a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	2201      	movs	r2, #1
 8001f84:	4313      	orrs	r3, r2
 8001f86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	0052      	lsls	r2, r2, #1
 8001f90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f92:	2327      	movs	r3, #39	@ 0x27
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d00c      	beq.n	8001fbe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	00d2      	lsls	r2, r2, #3
 8001fb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb6:	2327      	movs	r3, #39	@ 0x27
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d00c      	beq.n	8001fe2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2280      	movs	r2, #128	@ 0x80
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fda:	2327      	movs	r3, #39	@ 0x27
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001fe2:	2327      	movs	r3, #39	@ 0x27
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01d      	beq.n	8002028 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7ff fe28 	bl	8001c44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	490e      	ldr	r1, [pc, #56]	@ (8002038 <I2C_IsErrorOccurred+0x1ec>)
 8002000:	400a      	ands	r2, r1
 8002002:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	431a      	orrs	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2241      	movs	r2, #65	@ 0x41
 8002014:	2120      	movs	r1, #32
 8002016:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2242      	movs	r2, #66	@ 0x42
 800201c:	2100      	movs	r1, #0
 800201e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2240      	movs	r2, #64	@ 0x40
 8002024:	2100      	movs	r1, #0
 8002026:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002028:	2327      	movs	r3, #39	@ 0x27
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	781b      	ldrb	r3, [r3, #0]
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b00a      	add	sp, #40	@ 0x28
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	fe00e800 	.word	0xfe00e800

0800203c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	0008      	movs	r0, r1
 8002046:	0011      	movs	r1, r2
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	240a      	movs	r4, #10
 800204c:	193b      	adds	r3, r7, r4
 800204e:	1c02      	adds	r2, r0, #0
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	2009      	movs	r0, #9
 8002054:	183b      	adds	r3, r7, r0
 8002056:	1c0a      	adds	r2, r1, #0
 8002058:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800205a:	193b      	adds	r3, r7, r4
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	059b      	lsls	r3, r3, #22
 8002060:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002062:	183b      	adds	r3, r7, r0
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	0419      	lsls	r1, r3, #16
 8002068:	23ff      	movs	r3, #255	@ 0xff
 800206a:	041b      	lsls	r3, r3, #16
 800206c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800206e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002076:	4313      	orrs	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002086:	0d51      	lsrs	r1, r2, #21
 8002088:	2280      	movs	r2, #128	@ 0x80
 800208a:	00d2      	lsls	r2, r2, #3
 800208c:	400a      	ands	r2, r1
 800208e:	4907      	ldr	r1, [pc, #28]	@ (80020ac <I2C_TransferConfig+0x70>)
 8002090:	430a      	orrs	r2, r1
 8002092:	43d2      	mvns	r2, r2
 8002094:	401a      	ands	r2, r3
 8002096:	0011      	movs	r1, r2
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b007      	add	sp, #28
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	03ff63ff 	.word	0x03ff63ff

080020b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2241      	movs	r2, #65	@ 0x41
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d138      	bne.n	8002138 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2240      	movs	r2, #64	@ 0x40
 80020ca:	5c9b      	ldrb	r3, [r3, r2]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e032      	b.n	800213a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2240      	movs	r2, #64	@ 0x40
 80020d8:	2101      	movs	r1, #1
 80020da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2241      	movs	r2, #65	@ 0x41
 80020e0:	2124      	movs	r1, #36	@ 0x24
 80020e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	438a      	bics	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4911      	ldr	r1, [pc, #68]	@ (8002144 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002100:	400a      	ands	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6819      	ldr	r1, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2101      	movs	r1, #1
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2241      	movs	r2, #65	@ 0x41
 8002128:	2120      	movs	r1, #32
 800212a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2240      	movs	r2, #64	@ 0x40
 8002130:	2100      	movs	r1, #0
 8002132:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002134:	2300      	movs	r3, #0
 8002136:	e000      	b.n	800213a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002138:	2302      	movs	r3, #2
  }
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b002      	add	sp, #8
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	ffffefff 	.word	0xffffefff

08002148 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2241      	movs	r2, #65	@ 0x41
 8002156:	5c9b      	ldrb	r3, [r3, r2]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b20      	cmp	r3, #32
 800215c:	d139      	bne.n	80021d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2240      	movs	r2, #64	@ 0x40
 8002162:	5c9b      	ldrb	r3, [r3, r2]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002168:	2302      	movs	r3, #2
 800216a:	e033      	b.n	80021d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2240      	movs	r2, #64	@ 0x40
 8002170:	2101      	movs	r1, #1
 8002172:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2241      	movs	r2, #65	@ 0x41
 8002178:	2124      	movs	r1, #36	@ 0x24
 800217a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	438a      	bics	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2101      	movs	r1, #1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2241      	movs	r2, #65	@ 0x41
 80021c2:	2120      	movs	r1, #32
 80021c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2240      	movs	r2, #64	@ 0x40
 80021ca:	2100      	movs	r1, #0
 80021cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
  }
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b004      	add	sp, #16
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	fffff0ff 	.word	0xfffff0ff

080021e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a19      	ldr	r2, [pc, #100]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d11f      	bne.n	8002244 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002204:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	0013      	movs	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	189b      	adds	r3, r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4912      	ldr	r1, [pc, #72]	@ (800225c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002212:	0018      	movs	r0, r3
 8002214:	f7fd ff7e 	bl	8000114 <__udivsi3>
 8002218:	0003      	movs	r3, r0
 800221a:	3301      	adds	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221e:	e008      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3b01      	subs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e001      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e009      	b.n	8002246 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002234:	695a      	ldr	r2, [r3, #20]
 8002236:	2380      	movs	r3, #128	@ 0x80
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	401a      	ands	r2, r3
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	429a      	cmp	r2, r3
 8002242:	d0ed      	beq.n	8002220 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b004      	add	sp, #16
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	40007000 	.word	0x40007000
 8002254:	fffff9ff 	.word	0xfffff9ff
 8002258:	20000000 	.word	0x20000000
 800225c:	000f4240 	.word	0x000f4240

08002260 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	23e0      	movs	r3, #224	@ 0xe0
 800226a:	01db      	lsls	r3, r3, #7
 800226c:	4013      	ands	r3, r2
}
 800226e:	0018      	movs	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000

08002278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e2f3      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2201      	movs	r2, #1
 8002290:	4013      	ands	r3, r2
 8002292:	d100      	bne.n	8002296 <HAL_RCC_OscConfig+0x1e>
 8002294:	e07c      	b.n	8002390 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002296:	4bc3      	ldr	r3, [pc, #780]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2238      	movs	r2, #56	@ 0x38
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a0:	4bc0      	ldr	r3, [pc, #768]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2203      	movs	r2, #3
 80022a6:	4013      	ands	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d102      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3e>
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4bb9      	ldr	r3, [pc, #740]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	029b      	lsls	r3, r3, #10
 80022c4:	4013      	ands	r3, r2
 80022c6:	d062      	beq.n	800238e <HAL_RCC_OscConfig+0x116>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d15e      	bne.n	800238e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e2ce      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	025b      	lsls	r3, r3, #9
 80022dc:	429a      	cmp	r2, r3
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x78>
 80022e0:	4bb0      	ldr	r3, [pc, #704]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4baf      	ldr	r3, [pc, #700]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80022e6:	2180      	movs	r1, #128	@ 0x80
 80022e8:	0249      	lsls	r1, r1, #9
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e020      	b.n	8002332 <HAL_RCC_OscConfig+0xba>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	23a0      	movs	r3, #160	@ 0xa0
 80022f6:	02db      	lsls	r3, r3, #11
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d10e      	bne.n	800231a <HAL_RCC_OscConfig+0xa2>
 80022fc:	4ba9      	ldr	r3, [pc, #676]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4ba8      	ldr	r3, [pc, #672]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002302:	2180      	movs	r1, #128	@ 0x80
 8002304:	02c9      	lsls	r1, r1, #11
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	4ba6      	ldr	r3, [pc, #664]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4ba5      	ldr	r3, [pc, #660]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002310:	2180      	movs	r1, #128	@ 0x80
 8002312:	0249      	lsls	r1, r1, #9
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0xba>
 800231a:	4ba2      	ldr	r3, [pc, #648]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4ba1      	ldr	r3, [pc, #644]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002320:	49a1      	ldr	r1, [pc, #644]	@ (80025a8 <HAL_RCC_OscConfig+0x330>)
 8002322:	400a      	ands	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	4b9f      	ldr	r3, [pc, #636]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b9e      	ldr	r3, [pc, #632]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800232c:	499f      	ldr	r1, [pc, #636]	@ (80025ac <HAL_RCC_OscConfig+0x334>)
 800232e:	400a      	ands	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233a:	f7fe fd55 	bl	8000de8 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002344:	f7fe fd50 	bl	8000de8 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	@ 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e28d      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002356:	4b93      	ldr	r3, [pc, #588]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	029b      	lsls	r3, r3, #10
 800235e:	4013      	ands	r3, r2
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0xcc>
 8002362:	e015      	b.n	8002390 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fd40 	bl	8000de8 <HAL_GetTick>
 8002368:	0003      	movs	r3, r0
 800236a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800236e:	f7fe fd3b 	bl	8000de8 <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b64      	cmp	r3, #100	@ 0x64
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e278      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002380:	4b88      	ldr	r3, [pc, #544]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	029b      	lsls	r3, r3, #10
 8002388:	4013      	ands	r3, r2
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0xf6>
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d100      	bne.n	800239c <HAL_RCC_OscConfig+0x124>
 800239a:	e099      	b.n	80024d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239c:	4b81      	ldr	r3, [pc, #516]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2238      	movs	r2, #56	@ 0x38
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a6:	4b7f      	ldr	r3, [pc, #508]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2203      	movs	r2, #3
 80023ac:	4013      	ands	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	d102      	bne.n	80023bc <HAL_RCC_OscConfig+0x144>
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d002      	beq.n	80023c2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d135      	bne.n	800242e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c2:	4b78      	ldr	r3, [pc, #480]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4013      	ands	r3, r2
 80023cc:	d005      	beq.n	80023da <HAL_RCC_OscConfig+0x162>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e24b      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b72      	ldr	r3, [pc, #456]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a74      	ldr	r2, [pc, #464]	@ (80025b0 <HAL_RCC_OscConfig+0x338>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	021a      	lsls	r2, r3, #8
 80023ea:	4b6e      	ldr	r3, [pc, #440]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d112      	bne.n	800241c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023f6:	4b6b      	ldr	r3, [pc, #428]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6e      	ldr	r2, [pc, #440]	@ (80025b4 <HAL_RCC_OscConfig+0x33c>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	4b67      	ldr	r3, [pc, #412]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800240a:	4b66      	ldr	r3, [pc, #408]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0adb      	lsrs	r3, r3, #11
 8002410:	2207      	movs	r2, #7
 8002412:	4013      	ands	r3, r2
 8002414:	4a68      	ldr	r2, [pc, #416]	@ (80025b8 <HAL_RCC_OscConfig+0x340>)
 8002416:	40da      	lsrs	r2, r3
 8002418:	4b68      	ldr	r3, [pc, #416]	@ (80025bc <HAL_RCC_OscConfig+0x344>)
 800241a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800241c:	4b68      	ldr	r3, [pc, #416]	@ (80025c0 <HAL_RCC_OscConfig+0x348>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0018      	movs	r0, r3
 8002422:	f7fe fc85 	bl	8000d30 <HAL_InitTick>
 8002426:	1e03      	subs	r3, r0, #0
 8002428:	d051      	beq.n	80024ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e221      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d030      	beq.n	8002498 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002436:	4b5b      	ldr	r3, [pc, #364]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a5e      	ldr	r2, [pc, #376]	@ (80025b4 <HAL_RCC_OscConfig+0x33c>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	4b57      	ldr	r3, [pc, #348]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002446:	430a      	orrs	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800244a:	4b56      	ldr	r3, [pc, #344]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b55      	ldr	r3, [pc, #340]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002450:	2180      	movs	r1, #128	@ 0x80
 8002452:	0049      	lsls	r1, r1, #1
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fcc6 	bl	8000de8 <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe fcc1 	bl	8000de8 <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1fe      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002474:	4b4b      	ldr	r3, [pc, #300]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4013      	ands	r3, r2
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b48      	ldr	r3, [pc, #288]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a4a      	ldr	r2, [pc, #296]	@ (80025b0 <HAL_RCC_OscConfig+0x338>)
 8002486:	4013      	ands	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	4b44      	ldr	r3, [pc, #272]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	e01b      	b.n	80024d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002498:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800249e:	4949      	ldr	r1, [pc, #292]	@ (80025c4 <HAL_RCC_OscConfig+0x34c>)
 80024a0:	400a      	ands	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fca0 	bl	8000de8 <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fc9b 	bl	8000de8 <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1d8      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024c0:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	@ 0x80
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4013      	ands	r3, r2
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x236>
 80024cc:	e000      	b.n	80024d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2208      	movs	r2, #8
 80024d6:	4013      	ands	r3, r2
 80024d8:	d047      	beq.n	800256a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024da:	4b32      	ldr	r3, [pc, #200]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2238      	movs	r2, #56	@ 0x38
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b18      	cmp	r3, #24
 80024e4:	d10a      	bne.n	80024fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024e6:	4b2f      	ldr	r3, [pc, #188]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 80024e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ea:	2202      	movs	r2, #2
 80024ec:	4013      	ands	r3, r2
 80024ee:	d03c      	beq.n	800256a <HAL_RCC_OscConfig+0x2f2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d138      	bne.n	800256a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e1ba      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d019      	beq.n	8002538 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002504:	4b27      	ldr	r3, [pc, #156]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002506:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002508:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800250a:	2101      	movs	r1, #1
 800250c:	430a      	orrs	r2, r1
 800250e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fc6a 	bl	8000de8 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe fc65 	bl	8000de8 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e1a2      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800252c:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800252e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002530:	2202      	movs	r2, #2
 8002532:	4013      	ands	r3, r2
 8002534:	d0f1      	beq.n	800251a <HAL_RCC_OscConfig+0x2a2>
 8002536:	e018      	b.n	800256a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002538:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800253a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800253e:	2101      	movs	r1, #1
 8002540:	438a      	bics	r2, r1
 8002542:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fc50 	bl	8000de8 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254e:	f7fe fc4b 	bl	8000de8 <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e188      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002560:	4b10      	ldr	r3, [pc, #64]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002564:	2202      	movs	r2, #2
 8002566:	4013      	ands	r3, r2
 8002568:	d1f1      	bne.n	800254e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2204      	movs	r2, #4
 8002570:	4013      	ands	r3, r2
 8002572:	d100      	bne.n	8002576 <HAL_RCC_OscConfig+0x2fe>
 8002574:	e0c6      	b.n	8002704 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2238      	movs	r2, #56	@ 0x38
 8002584:	4013      	ands	r3, r2
 8002586:	2b20      	cmp	r3, #32
 8002588:	d11e      	bne.n	80025c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCC_OscConfig+0x32c>)
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	2202      	movs	r2, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d100      	bne.n	8002596 <HAL_RCC_OscConfig+0x31e>
 8002594:	e0b6      	b.n	8002704 <HAL_RCC_OscConfig+0x48c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d000      	beq.n	80025a0 <HAL_RCC_OscConfig+0x328>
 800259e:	e0b1      	b.n	8002704 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e166      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
 80025a4:	40021000 	.word	0x40021000
 80025a8:	fffeffff 	.word	0xfffeffff
 80025ac:	fffbffff 	.word	0xfffbffff
 80025b0:	ffff80ff 	.word	0xffff80ff
 80025b4:	ffffc7ff 	.word	0xffffc7ff
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000004 	.word	0x20000004
 80025c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025c8:	4bac      	ldr	r3, [pc, #688]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80025ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	055b      	lsls	r3, r3, #21
 80025d0:	4013      	ands	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_OscConfig+0x360>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x362>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d011      	beq.n	8002602 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4ba7      	ldr	r3, [pc, #668]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80025e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025e2:	4ba6      	ldr	r3, [pc, #664]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80025e4:	2180      	movs	r1, #128	@ 0x80
 80025e6:	0549      	lsls	r1, r1, #21
 80025e8:	430a      	orrs	r2, r1
 80025ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025ec:	4ba3      	ldr	r3, [pc, #652]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80025ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	055b      	lsls	r3, r3, #21
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025fa:	231f      	movs	r3, #31
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002602:	4b9f      	ldr	r3, [pc, #636]	@ (8002880 <HAL_RCC_OscConfig+0x608>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4013      	ands	r3, r2
 800260c:	d11a      	bne.n	8002644 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800260e:	4b9c      	ldr	r3, [pc, #624]	@ (8002880 <HAL_RCC_OscConfig+0x608>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b9b      	ldr	r3, [pc, #620]	@ (8002880 <HAL_RCC_OscConfig+0x608>)
 8002614:	2180      	movs	r1, #128	@ 0x80
 8002616:	0049      	lsls	r1, r1, #1
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800261c:	f7fe fbe4 	bl	8000de8 <HAL_GetTick>
 8002620:	0003      	movs	r3, r0
 8002622:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7fe fbdf 	bl	8000de8 <HAL_GetTick>
 800262a:	0002      	movs	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e11c      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002638:	4b91      	ldr	r3, [pc, #580]	@ (8002880 <HAL_RCC_OscConfig+0x608>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x3e2>
 800264c:	4b8b      	ldr	r3, [pc, #556]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800264e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002650:	4b8a      	ldr	r3, [pc, #552]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002652:	2101      	movs	r1, #1
 8002654:	430a      	orrs	r2, r1
 8002656:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x41c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x404>
 8002662:	4b86      	ldr	r3, [pc, #536]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002664:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002666:	4b85      	ldr	r3, [pc, #532]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002668:	2104      	movs	r1, #4
 800266a:	430a      	orrs	r2, r1
 800266c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800266e:	4b83      	ldr	r3, [pc, #524]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002670:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002672:	4b82      	ldr	r3, [pc, #520]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002674:	2101      	movs	r1, #1
 8002676:	430a      	orrs	r2, r1
 8002678:	65da      	str	r2, [r3, #92]	@ 0x5c
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0x41c>
 800267c:	4b7f      	ldr	r3, [pc, #508]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800267e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002680:	4b7e      	ldr	r3, [pc, #504]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002682:	2101      	movs	r1, #1
 8002684:	438a      	bics	r2, r1
 8002686:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002688:	4b7c      	ldr	r3, [pc, #496]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800268a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800268c:	4b7b      	ldr	r3, [pc, #492]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800268e:	2104      	movs	r1, #4
 8002690:	438a      	bics	r2, r1
 8002692:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d014      	beq.n	80026c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fba4 	bl	8000de8 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a4:	e009      	b.n	80026ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe fb9f 	bl	8000de8 <HAL_GetTick>
 80026aa:	0002      	movs	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	4a74      	ldr	r2, [pc, #464]	@ (8002884 <HAL_RCC_OscConfig+0x60c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0db      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ba:	4b70      	ldr	r3, [pc, #448]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x42e>
 80026c4:	e013      	b.n	80026ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fb8f 	bl	8000de8 <HAL_GetTick>
 80026ca:	0003      	movs	r3, r0
 80026cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ce:	e009      	b.n	80026e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe fb8a 	bl	8000de8 <HAL_GetTick>
 80026d4:	0002      	movs	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	4a6a      	ldr	r2, [pc, #424]	@ (8002884 <HAL_RCC_OscConfig+0x60c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e0c6      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026e4:	4b65      	ldr	r3, [pc, #404]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2202      	movs	r2, #2
 80026ea:	4013      	ands	r3, r2
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026ee:	231f      	movs	r3, #31
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b60      	ldr	r3, [pc, #384]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80026fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026fc:	4b5f      	ldr	r3, [pc, #380]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80026fe:	4962      	ldr	r1, [pc, #392]	@ (8002888 <HAL_RCC_OscConfig+0x610>)
 8002700:	400a      	ands	r2, r1
 8002702:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d100      	bne.n	800270e <HAL_RCC_OscConfig+0x496>
 800270c:	e0b0      	b.n	8002870 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800270e:	4b5b      	ldr	r3, [pc, #364]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2238      	movs	r2, #56	@ 0x38
 8002714:	4013      	ands	r3, r2
 8002716:	2b10      	cmp	r3, #16
 8002718:	d100      	bne.n	800271c <HAL_RCC_OscConfig+0x4a4>
 800271a:	e078      	b.n	800280e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d153      	bne.n	80027cc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002724:	4b55      	ldr	r3, [pc, #340]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b54      	ldr	r3, [pc, #336]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800272a:	4958      	ldr	r1, [pc, #352]	@ (800288c <HAL_RCC_OscConfig+0x614>)
 800272c:	400a      	ands	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fb5a 	bl	8000de8 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe fb55 	bl	8000de8 <HAL_GetTick>
 800273e:	0002      	movs	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e092      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	049b      	lsls	r3, r3, #18
 8002754:	4013      	ands	r3, r2
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002758:	4b48      	ldr	r3, [pc, #288]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a4c      	ldr	r2, [pc, #304]	@ (8002890 <HAL_RCC_OscConfig+0x618>)
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1a      	ldr	r2, [r3, #32]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	431a      	orrs	r2, r3
 8002780:	4b3e      	ldr	r3, [pc, #248]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002782:	430a      	orrs	r2, r1
 8002784:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002786:	4b3d      	ldr	r3, [pc, #244]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b3c      	ldr	r3, [pc, #240]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800278c:	2180      	movs	r1, #128	@ 0x80
 800278e:	0449      	lsls	r1, r1, #17
 8002790:	430a      	orrs	r2, r1
 8002792:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002794:	4b39      	ldr	r3, [pc, #228]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	4b38      	ldr	r3, [pc, #224]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800279a:	2180      	movs	r1, #128	@ 0x80
 800279c:	0549      	lsls	r1, r1, #21
 800279e:	430a      	orrs	r2, r1
 80027a0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fb21 	bl	8000de8 <HAL_GetTick>
 80027a6:	0003      	movs	r3, r0
 80027a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe fb1c 	bl	8000de8 <HAL_GetTick>
 80027b0:	0002      	movs	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e059      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	@ 0x80
 80027c4:	049b      	lsls	r3, r3, #18
 80027c6:	4013      	ands	r3, r2
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x534>
 80027ca:	e051      	b.n	8002870 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80027d2:	492e      	ldr	r1, [pc, #184]	@ (800288c <HAL_RCC_OscConfig+0x614>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fb06 	bl	8000de8 <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e2:	f7fe fb01 	bl	8000de8 <HAL_GetTick>
 80027e6:	0002      	movs	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e03e      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f4:	4b21      	ldr	r3, [pc, #132]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	049b      	lsls	r3, r3, #18
 80027fc:	4013      	ands	r3, r2
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002800:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 8002806:	4923      	ldr	r1, [pc, #140]	@ (8002894 <HAL_RCC_OscConfig+0x61c>)
 8002808:	400a      	ands	r2, r1
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	e030      	b.n	8002870 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e02b      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800281a:	4b18      	ldr	r3, [pc, #96]	@ (800287c <HAL_RCC_OscConfig+0x604>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2203      	movs	r2, #3
 8002824:	401a      	ands	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	429a      	cmp	r2, r3
 800282c:	d11e      	bne.n	800286c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2270      	movs	r2, #112	@ 0x70
 8002832:	401a      	ands	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d117      	bne.n	800286c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	23fe      	movs	r3, #254	@ 0xfe
 8002840:	01db      	lsls	r3, r3, #7
 8002842:	401a      	ands	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d10e      	bne.n	800286c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	23f8      	movs	r3, #248	@ 0xf8
 8002852:	039b      	lsls	r3, r3, #14
 8002854:	401a      	ands	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d106      	bne.n	800286c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	0f5b      	lsrs	r3, r3, #29
 8002862:	075a      	lsls	r2, r3, #29
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b008      	add	sp, #32
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	00001388 	.word	0x00001388
 8002888:	efffffff 	.word	0xefffffff
 800288c:	feffffff 	.word	0xfeffffff
 8002890:	1fc1808c 	.word	0x1fc1808c
 8002894:	effefffc 	.word	0xeffefffc

08002898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0e9      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b76      	ldr	r3, [pc, #472]	@ (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2207      	movs	r2, #7
 80028b2:	4013      	ands	r3, r2
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d91e      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b73      	ldr	r3, [pc, #460]	@ (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2207      	movs	r2, #7
 80028c0:	4393      	bics	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	4b70      	ldr	r3, [pc, #448]	@ (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028cc:	f7fe fa8c 	bl	8000de8 <HAL_GetTick>
 80028d0:	0003      	movs	r3, r0
 80028d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028d4:	e009      	b.n	80028ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d6:	f7fe fa87 	bl	8000de8 <HAL_GetTick>
 80028da:	0002      	movs	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a8c <HAL_RCC_ClockConfig+0x1f4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e0ca      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028ea:	4b67      	ldr	r3, [pc, #412]	@ (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2207      	movs	r2, #7
 80028f0:	4013      	ands	r3, r2
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1ee      	bne.n	80028d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2202      	movs	r2, #2
 80028fe:	4013      	ands	r3, r2
 8002900:	d015      	beq.n	800292e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2204      	movs	r2, #4
 8002908:	4013      	ands	r3, r2
 800290a:	d006      	beq.n	800291a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800290c:	4b60      	ldr	r3, [pc, #384]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b5f      	ldr	r3, [pc, #380]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002912:	21e0      	movs	r1, #224	@ 0xe0
 8002914:	01c9      	lsls	r1, r1, #7
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4a5d      	ldr	r2, [pc, #372]	@ (8002a94 <HAL_RCC_ClockConfig+0x1fc>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800292a:	430a      	orrs	r2, r1
 800292c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2201      	movs	r2, #1
 8002934:	4013      	ands	r3, r2
 8002936:	d057      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002940:	4b53      	ldr	r3, [pc, #332]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	4013      	ands	r3, r2
 800294a:	d12b      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e097      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d107      	bne.n	8002968 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002958:	4b4d      	ldr	r3, [pc, #308]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	049b      	lsls	r3, r3, #18
 8002960:	4013      	ands	r3, r2
 8002962:	d11f      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e08b      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002970:	4b47      	ldr	r3, [pc, #284]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	4013      	ands	r3, r2
 800297a:	d113      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e07f      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d106      	bne.n	8002996 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002988:	4b41      	ldr	r3, [pc, #260]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 800298a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e074      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002996:	4b3e      	ldr	r3, [pc, #248]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299a:	2202      	movs	r2, #2
 800299c:	4013      	ands	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e06d      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2207      	movs	r2, #7
 80029aa:	4393      	bics	r3, r2
 80029ac:	0019      	movs	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4b37      	ldr	r3, [pc, #220]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b8:	f7fe fa16 	bl	8000de8 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c0:	e009      	b.n	80029d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7fe fa11 	bl	8000de8 <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a8c <HAL_RCC_ClockConfig+0x1f4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e054      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2238      	movs	r2, #56	@ 0x38
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1ec      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2207      	movs	r2, #7
 80029ee:	4013      	ands	r3, r2
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d21e      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b24      	ldr	r3, [pc, #144]	@ (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2207      	movs	r2, #7
 80029fc:	4393      	bics	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	4b21      	ldr	r3, [pc, #132]	@ (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a08:	f7fe f9ee 	bl	8000de8 <HAL_GetTick>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a10:	e009      	b.n	8002a26 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a12:	f7fe f9e9 	bl	8000de8 <HAL_GetTick>
 8002a16:	0002      	movs	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a8c <HAL_RCC_ClockConfig+0x1f4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e02c      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a26:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <HAL_RCC_ClockConfig+0x1f0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1ee      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2204      	movs	r2, #4
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3e:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4a15      	ldr	r2, [pc, #84]	@ (8002a98 <HAL_RCC_ClockConfig+0x200>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a52:	f000 f829 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a56:	0001      	movs	r1, r0
 8002a58:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <HAL_RCC_ClockConfig+0x1f8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	220f      	movs	r2, #15
 8002a60:	401a      	ands	r2, r3
 8002a62:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <HAL_RCC_ClockConfig+0x204>)
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	58d3      	ldr	r3, [r2, r3]
 8002a68:	221f      	movs	r2, #31
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	000a      	movs	r2, r1
 8002a6e:	40da      	lsrs	r2, r3
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_ClockConfig+0x208>)
 8002a72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCC_ClockConfig+0x20c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fe f959 	bl	8000d30 <HAL_InitTick>
 8002a7e:	0003      	movs	r3, r0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b004      	add	sp, #16
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	00001388 	.word	0x00001388
 8002a90:	40021000 	.word	0x40021000
 8002a94:	fffff0ff 	.word	0xfffff0ff
 8002a98:	ffff8fff 	.word	0xffff8fff
 8002a9c:	08004e3c 	.word	0x08004e3c
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aae:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2238      	movs	r2, #56	@ 0x38
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ab8:	4b39      	ldr	r3, [pc, #228]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0adb      	lsrs	r3, r3, #11
 8002abe:	2207      	movs	r2, #7
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	0013      	movs	r3, r2
 8002ac8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	4835      	ldr	r0, [pc, #212]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ace:	f7fd fb21 	bl	8000114 <__udivsi3>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e05d      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad8:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2238      	movs	r2, #56	@ 0x38
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d102      	bne.n	8002aea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ae4:	4b30      	ldr	r3, [pc, #192]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e054      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aea:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2238      	movs	r2, #56	@ 0x38
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d138      	bne.n	8002b68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002af6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2203      	movs	r2, #3
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	2207      	movs	r2, #7
 8002b08:	4013      	ands	r3, r2
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	4824      	ldr	r0, [pc, #144]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b18:	f7fd fafc 	bl	8000114 <__udivsi3>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	0019      	movs	r1, r3
 8002b20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	227f      	movs	r2, #127	@ 0x7f
 8002b28:	4013      	ands	r3, r2
 8002b2a:	434b      	muls	r3, r1
 8002b2c:	617b      	str	r3, [r7, #20]
        break;
 8002b2e:	e00d      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	481c      	ldr	r0, [pc, #112]	@ (8002ba4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b34:	f7fd faee 	bl	8000114 <__udivsi3>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	227f      	movs	r2, #127	@ 0x7f
 8002b44:	4013      	ands	r3, r2
 8002b46:	434b      	muls	r3, r1
 8002b48:	617b      	str	r3, [r7, #20]
        break;
 8002b4a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0f5b      	lsrs	r3, r3, #29
 8002b52:	2207      	movs	r2, #7
 8002b54:	4013      	ands	r3, r2
 8002b56:	3301      	adds	r3, #1
 8002b58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	6978      	ldr	r0, [r7, #20]
 8002b5e:	f7fd fad9 	bl	8000114 <__udivsi3>
 8002b62:	0003      	movs	r3, r0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	e015      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2238      	movs	r2, #56	@ 0x38
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d103      	bne.n	8002b7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2238      	movs	r2, #56	@ 0x38
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b18      	cmp	r3, #24
 8002b86:	d103      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b88:	23fa      	movs	r3, #250	@ 0xfa
 8002b8a:	01db      	lsls	r3, r3, #7
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e001      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b94:	693b      	ldr	r3, [r7, #16]
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b006      	add	sp, #24
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b02      	ldr	r3, [pc, #8]	@ (8002bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	20000000 	.word	0x20000000

08002bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002bc4:	f7ff fff2 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bc8:	0004      	movs	r4, r0
 8002bca:	f7ff fb49 	bl	8002260 <LL_RCC_GetAPB1Prescaler>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	0b1a      	lsrs	r2, r3, #12
 8002bd2:	4b05      	ldr	r3, [pc, #20]	@ (8002be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	58d3      	ldr	r3, [r2, r3]
 8002bd8:	221f      	movs	r2, #31
 8002bda:	4013      	ands	r3, r2
 8002bdc:	40dc      	lsrs	r4, r3
 8002bde:	0023      	movs	r3, r4
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bdb0      	pop	{r4, r5, r7, pc}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	08004e7c 	.word	0x08004e7c

08002bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002bf4:	2313      	movs	r3, #19
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	@ 0x80
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c10:	e0a3      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2011      	movs	r0, #17
 8002c14:	183b      	adds	r3, r7, r0
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1a:	4b86      	ldr	r3, [pc, #536]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	055b      	lsls	r3, r3, #21
 8002c22:	4013      	ands	r3, r2
 8002c24:	d110      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4b83      	ldr	r3, [pc, #524]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c2a:	4b82      	ldr	r3, [pc, #520]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c2c:	2180      	movs	r1, #128	@ 0x80
 8002c2e:	0549      	lsls	r1, r1, #21
 8002c30:	430a      	orrs	r2, r1
 8002c32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c34:	4b7f      	ldr	r3, [pc, #508]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	055b      	lsls	r3, r3, #21
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c42:	183b      	adds	r3, r7, r0
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c48:	4b7b      	ldr	r3, [pc, #492]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c4e:	2180      	movs	r1, #128	@ 0x80
 8002c50:	0049      	lsls	r1, r1, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c56:	f7fe f8c7 	bl	8000de8 <HAL_GetTick>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe f8c2 	bl	8000de8 <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d904      	bls.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c6e:	2313      	movs	r3, #19
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	2203      	movs	r2, #3
 8002c74:	701a      	strb	r2, [r3, #0]
        break;
 8002c76:	e005      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c78:	4b6f      	ldr	r3, [pc, #444]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	d0ed      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c84:	2313      	movs	r3, #19
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d154      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c8e:	4b69      	ldr	r3, [pc, #420]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c92:	23c0      	movs	r3, #192	@ 0xc0
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4013      	ands	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d014      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002caa:	4b62      	ldr	r3, [pc, #392]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cae:	4a63      	ldr	r2, [pc, #396]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cb4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cba:	2180      	movs	r1, #128	@ 0x80
 8002cbc:	0249      	lsls	r1, r1, #9
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cc8:	495d      	ldr	r1, [pc, #372]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cce:	4b59      	ldr	r3, [pc, #356]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d016      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe f884 	bl	8000de8 <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe f87f 	bl	8000de8 <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4a54      	ldr	r2, [pc, #336]	@ (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d904      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002cf6:	2313      	movs	r3, #19
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	701a      	strb	r2, [r3, #0]
            break;
 8002cfe:	e004      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d00:	4b4c      	ldr	r3, [pc, #304]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	2202      	movs	r2, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	d0ed      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d0a:	2313      	movs	r3, #19
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d14:	4b47      	ldr	r3, [pc, #284]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d18:	4a48      	ldr	r2, [pc, #288]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	4b44      	ldr	r3, [pc, #272]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d28:	e00c      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d2a:	2312      	movs	r3, #18
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	2213      	movs	r2, #19
 8002d30:	18ba      	adds	r2, r7, r2
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e005      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	2312      	movs	r3, #18
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2213      	movs	r2, #19
 8002d3e:	18ba      	adds	r2, r7, r2
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d44:	2311      	movs	r3, #17
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4e:	4b39      	ldr	r3, [pc, #228]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d52:	4b38      	ldr	r3, [pc, #224]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d54:	493c      	ldr	r1, [pc, #240]	@ (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4013      	ands	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d64:	4b33      	ldr	r3, [pc, #204]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4393      	bics	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4b30      	ldr	r3, [pc, #192]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d74:	430a      	orrs	r2, r1
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d82:	4b2c      	ldr	r3, [pc, #176]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d86:	220c      	movs	r2, #12
 8002d88:	4393      	bics	r3, r2
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b28      	ldr	r3, [pc, #160]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d92:	430a      	orrs	r2, r1
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da0:	4b24      	ldr	r3, [pc, #144]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da4:	4a29      	ldr	r2, [pc, #164]	@ (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b21      	ldr	r3, [pc, #132]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	01db      	lsls	r3, r3, #7
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d015      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	0899      	lsrs	r1, r3, #2
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	2380      	movs	r3, #128	@ 0x80
 8002dd8:	05db      	lsls	r3, r3, #23
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d106      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002dde:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002de4:	2180      	movs	r1, #128	@ 0x80
 8002de6:	0249      	lsls	r1, r1, #9
 8002de8:	430a      	orrs	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2380      	movs	r3, #128	@ 0x80
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	4013      	ands	r3, r2
 8002df6:	d016      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d106      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	0249      	lsls	r1, r1, #9
 8002e22:	430a      	orrs	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e26:	2312      	movs	r3, #18
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	781b      	ldrb	r3, [r3, #0]
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b006      	add	sp, #24
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	fffffcff 	.word	0xfffffcff
 8002e40:	fffeffff 	.word	0xfffeffff
 8002e44:	00001388 	.word	0x00001388
 8002e48:	efffffff 	.word	0xefffffff
 8002e4c:	ffffcfff 	.word	0xffffcfff
 8002e50:	ffff3fff 	.word	0xffff3fff

08002e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e046      	b.n	8002ef4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2288      	movs	r2, #136	@ 0x88
 8002e6a:	589b      	ldr	r3, [r3, r2]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2284      	movs	r2, #132	@ 0x84
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f7fd fe58 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2288      	movs	r2, #136	@ 0x88
 8002e84:	2124      	movs	r1, #36	@ 0x24
 8002e86:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	438a      	bics	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f000 fb5a 	bl	800355c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 f9b2 	bl	8003214 <UART_SetConfig>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e01c      	b.n	8002ef4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	490d      	ldr	r1, [pc, #52]	@ (8002efc <HAL_UART_Init+0xa8>)
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	212a      	movs	r1, #42	@ 0x2a
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 fbe9 	bl	80036c4 <UART_CheckIdleState>
 8002ef2:	0003      	movs	r3, r0
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	ffffb7ff 	.word	0xffffb7ff

08002f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	@ 0x28
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	1dbb      	adds	r3, r7, #6
 8002f0e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2288      	movs	r2, #136	@ 0x88
 8002f14:	589b      	ldr	r3, [r3, r2]
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d000      	beq.n	8002f1c <HAL_UART_Transmit+0x1c>
 8002f1a:	e090      	b.n	800303e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_UART_Transmit+0x2a>
 8002f22:	1dbb      	adds	r3, r7, #6
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e088      	b.n	8003040 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	015b      	lsls	r3, r3, #5
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d109      	bne.n	8002f4e <HAL_UART_Transmit+0x4e>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	d001      	beq.n	8002f4e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e078      	b.n	8003040 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2290      	movs	r2, #144	@ 0x90
 8002f52:	2100      	movs	r1, #0
 8002f54:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2288      	movs	r2, #136	@ 0x88
 8002f5a:	2121      	movs	r1, #33	@ 0x21
 8002f5c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f5e:	f7fd ff43 	bl	8000de8 <HAL_GetTick>
 8002f62:	0003      	movs	r3, r0
 8002f64:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1dba      	adds	r2, r7, #6
 8002f6a:	2154      	movs	r1, #84	@ 0x54
 8002f6c:	8812      	ldrh	r2, [r2, #0]
 8002f6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1dba      	adds	r2, r7, #6
 8002f74:	2156      	movs	r1, #86	@ 0x56
 8002f76:	8812      	ldrh	r2, [r2, #0]
 8002f78:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	2380      	movs	r3, #128	@ 0x80
 8002f80:	015b      	lsls	r3, r3, #5
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d108      	bne.n	8002f98 <HAL_UART_Transmit+0x98>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d104      	bne.n	8002f98 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	e003      	b.n	8002fa0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fa0:	e030      	b.n	8003004 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	0013      	movs	r3, r2
 8002fac:	2200      	movs	r2, #0
 8002fae:	2180      	movs	r1, #128	@ 0x80
 8002fb0:	f000 fc32 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 8002fb4:	1e03      	subs	r3, r0, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2288      	movs	r2, #136	@ 0x88
 8002fbc:	2120      	movs	r1, #32
 8002fbe:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e03d      	b.n	8003040 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	001a      	movs	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	05d2      	lsls	r2, r2, #23
 8002fd6:	0dd2      	lsrs	r2, r2, #23
 8002fd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	3302      	adds	r3, #2
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e007      	b.n	8002ff2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2256      	movs	r2, #86	@ 0x56
 8002ff6:	5a9b      	ldrh	r3, [r3, r2]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b299      	uxth	r1, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2256      	movs	r2, #86	@ 0x56
 8003002:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2256      	movs	r2, #86	@ 0x56
 8003008:	5a9b      	ldrh	r3, [r3, r2]
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1c8      	bne.n	8002fa2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	0013      	movs	r3, r2
 800301a:	2200      	movs	r2, #0
 800301c:	2140      	movs	r1, #64	@ 0x40
 800301e:	f000 fbfb 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d005      	beq.n	8003032 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2288      	movs	r2, #136	@ 0x88
 800302a:	2120      	movs	r1, #32
 800302c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e006      	b.n	8003040 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2288      	movs	r2, #136	@ 0x88
 8003036:	2120      	movs	r1, #32
 8003038:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800303e:	2302      	movs	r3, #2
  }
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b008      	add	sp, #32
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	@ 0x28
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	1dbb      	adds	r3, r7, #6
 8003056:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	228c      	movs	r2, #140	@ 0x8c
 800305c:	589b      	ldr	r3, [r3, r2]
 800305e:	2b20      	cmp	r3, #32
 8003060:	d000      	beq.n	8003064 <HAL_UART_Receive+0x1c>
 8003062:	e0d0      	b.n	8003206 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_Receive+0x2a>
 800306a:	1dbb      	adds	r3, r7, #6
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0c8      	b.n	8003208 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	2380      	movs	r3, #128	@ 0x80
 800307c:	015b      	lsls	r3, r3, #5
 800307e:	429a      	cmp	r2, r3
 8003080:	d109      	bne.n	8003096 <HAL_UART_Receive+0x4e>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d105      	bne.n	8003096 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2201      	movs	r2, #1
 800308e:	4013      	ands	r3, r2
 8003090:	d001      	beq.n	8003096 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0b8      	b.n	8003208 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2290      	movs	r2, #144	@ 0x90
 800309a:	2100      	movs	r1, #0
 800309c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	228c      	movs	r2, #140	@ 0x8c
 80030a2:	2122      	movs	r1, #34	@ 0x22
 80030a4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ac:	f7fd fe9c 	bl	8000de8 <HAL_GetTick>
 80030b0:	0003      	movs	r3, r0
 80030b2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1dba      	adds	r2, r7, #6
 80030b8:	215c      	movs	r1, #92	@ 0x5c
 80030ba:	8812      	ldrh	r2, [r2, #0]
 80030bc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1dba      	adds	r2, r7, #6
 80030c2:	215e      	movs	r1, #94	@ 0x5e
 80030c4:	8812      	ldrh	r2, [r2, #0]
 80030c6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	015b      	lsls	r3, r3, #5
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d10d      	bne.n	80030f0 <HAL_UART_Receive+0xa8>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <HAL_UART_Receive+0x9e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2260      	movs	r2, #96	@ 0x60
 80030e0:	494b      	ldr	r1, [pc, #300]	@ (8003210 <HAL_UART_Receive+0x1c8>)
 80030e2:	5299      	strh	r1, [r3, r2]
 80030e4:	e02e      	b.n	8003144 <HAL_UART_Receive+0xfc>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2260      	movs	r2, #96	@ 0x60
 80030ea:	21ff      	movs	r1, #255	@ 0xff
 80030ec:	5299      	strh	r1, [r3, r2]
 80030ee:	e029      	b.n	8003144 <HAL_UART_Receive+0xfc>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10d      	bne.n	8003114 <HAL_UART_Receive+0xcc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <HAL_UART_Receive+0xc2>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2260      	movs	r2, #96	@ 0x60
 8003104:	21ff      	movs	r1, #255	@ 0xff
 8003106:	5299      	strh	r1, [r3, r2]
 8003108:	e01c      	b.n	8003144 <HAL_UART_Receive+0xfc>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2260      	movs	r2, #96	@ 0x60
 800310e:	217f      	movs	r1, #127	@ 0x7f
 8003110:	5299      	strh	r1, [r3, r2]
 8003112:	e017      	b.n	8003144 <HAL_UART_Receive+0xfc>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	055b      	lsls	r3, r3, #21
 800311c:	429a      	cmp	r2, r3
 800311e:	d10d      	bne.n	800313c <HAL_UART_Receive+0xf4>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_UART_Receive+0xea>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2260      	movs	r2, #96	@ 0x60
 800312c:	217f      	movs	r1, #127	@ 0x7f
 800312e:	5299      	strh	r1, [r3, r2]
 8003130:	e008      	b.n	8003144 <HAL_UART_Receive+0xfc>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2260      	movs	r2, #96	@ 0x60
 8003136:	213f      	movs	r1, #63	@ 0x3f
 8003138:	5299      	strh	r1, [r3, r2]
 800313a:	e003      	b.n	8003144 <HAL_UART_Receive+0xfc>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2260      	movs	r2, #96	@ 0x60
 8003140:	2100      	movs	r1, #0
 8003142:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003144:	2312      	movs	r3, #18
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	2160      	movs	r1, #96	@ 0x60
 800314c:	5a52      	ldrh	r2, [r2, r1]
 800314e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	015b      	lsls	r3, r3, #5
 8003158:	429a      	cmp	r2, r3
 800315a:	d108      	bne.n	800316e <HAL_UART_Receive+0x126>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d104      	bne.n	800316e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	e003      	b.n	8003176 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003176:	e03a      	b.n	80031ee <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	0013      	movs	r3, r2
 8003182:	2200      	movs	r2, #0
 8003184:	2120      	movs	r1, #32
 8003186:	f000 fb47 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 800318a:	1e03      	subs	r3, r0, #0
 800318c:	d005      	beq.n	800319a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	228c      	movs	r2, #140	@ 0x8c
 8003192:	2120      	movs	r1, #32
 8003194:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e036      	b.n	8003208 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10e      	bne.n	80031be <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2212      	movs	r2, #18
 80031aa:	18ba      	adds	r2, r7, r2
 80031ac:	8812      	ldrh	r2, [r2, #0]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	3302      	adds	r3, #2
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	e00e      	b.n	80031dc <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2212      	movs	r2, #18
 80031c8:	18ba      	adds	r2, r7, r2
 80031ca:	8812      	ldrh	r2, [r2, #0]
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	4013      	ands	r3, r2
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3301      	adds	r3, #1
 80031da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	225e      	movs	r2, #94	@ 0x5e
 80031e0:	5a9b      	ldrh	r3, [r3, r2]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b299      	uxth	r1, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	225e      	movs	r2, #94	@ 0x5e
 80031ec:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	225e      	movs	r2, #94	@ 0x5e
 80031f2:	5a9b      	ldrh	r3, [r3, r2]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1be      	bne.n	8003178 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	228c      	movs	r2, #140	@ 0x8c
 80031fe:	2120      	movs	r1, #32
 8003200:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b008      	add	sp, #32
 800320e:	bd80      	pop	{r7, pc}
 8003210:	000001ff 	.word	0x000001ff

08003214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800321c:	231a      	movs	r3, #26
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4313      	orrs	r3, r2
 800323a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4abc      	ldr	r2, [pc, #752]	@ (8003534 <UART_SetConfig+0x320>)
 8003244:	4013      	ands	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	430a      	orrs	r2, r1
 8003250:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4ab7      	ldr	r2, [pc, #732]	@ (8003538 <UART_SetConfig+0x324>)
 800325a:	4013      	ands	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	4313      	orrs	r3, r2
 8003278:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4aae      	ldr	r2, [pc, #696]	@ (800353c <UART_SetConfig+0x328>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003296:	220f      	movs	r2, #15
 8003298:	4393      	bics	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4aa4      	ldr	r2, [pc, #656]	@ (8003540 <UART_SetConfig+0x32c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d127      	bne.n	8003302 <UART_SetConfig+0xee>
 80032b2:	4ba4      	ldr	r3, [pc, #656]	@ (8003544 <UART_SetConfig+0x330>)
 80032b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b6:	2203      	movs	r2, #3
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d017      	beq.n	80032ee <UART_SetConfig+0xda>
 80032be:	d81b      	bhi.n	80032f8 <UART_SetConfig+0xe4>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d00a      	beq.n	80032da <UART_SetConfig+0xc6>
 80032c4:	d818      	bhi.n	80032f8 <UART_SetConfig+0xe4>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <UART_SetConfig+0xbc>
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00a      	beq.n	80032e4 <UART_SetConfig+0xd0>
 80032ce:	e013      	b.n	80032f8 <UART_SetConfig+0xe4>
 80032d0:	231b      	movs	r3, #27
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
 80032d8:	e058      	b.n	800338c <UART_SetConfig+0x178>
 80032da:	231b      	movs	r3, #27
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2202      	movs	r2, #2
 80032e0:	701a      	strb	r2, [r3, #0]
 80032e2:	e053      	b.n	800338c <UART_SetConfig+0x178>
 80032e4:	231b      	movs	r3, #27
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	2204      	movs	r2, #4
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e04e      	b.n	800338c <UART_SetConfig+0x178>
 80032ee:	231b      	movs	r3, #27
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2208      	movs	r2, #8
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e049      	b.n	800338c <UART_SetConfig+0x178>
 80032f8:	231b      	movs	r3, #27
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	2210      	movs	r2, #16
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e044      	b.n	800338c <UART_SetConfig+0x178>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a90      	ldr	r2, [pc, #576]	@ (8003548 <UART_SetConfig+0x334>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d127      	bne.n	800335c <UART_SetConfig+0x148>
 800330c:	4b8d      	ldr	r3, [pc, #564]	@ (8003544 <UART_SetConfig+0x330>)
 800330e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003310:	220c      	movs	r2, #12
 8003312:	4013      	ands	r3, r2
 8003314:	2b0c      	cmp	r3, #12
 8003316:	d017      	beq.n	8003348 <UART_SetConfig+0x134>
 8003318:	d81b      	bhi.n	8003352 <UART_SetConfig+0x13e>
 800331a:	2b08      	cmp	r3, #8
 800331c:	d00a      	beq.n	8003334 <UART_SetConfig+0x120>
 800331e:	d818      	bhi.n	8003352 <UART_SetConfig+0x13e>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <UART_SetConfig+0x116>
 8003324:	2b04      	cmp	r3, #4
 8003326:	d00a      	beq.n	800333e <UART_SetConfig+0x12a>
 8003328:	e013      	b.n	8003352 <UART_SetConfig+0x13e>
 800332a:	231b      	movs	r3, #27
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e02b      	b.n	800338c <UART_SetConfig+0x178>
 8003334:	231b      	movs	r3, #27
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2202      	movs	r2, #2
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e026      	b.n	800338c <UART_SetConfig+0x178>
 800333e:	231b      	movs	r3, #27
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	2204      	movs	r2, #4
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e021      	b.n	800338c <UART_SetConfig+0x178>
 8003348:	231b      	movs	r3, #27
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	2208      	movs	r2, #8
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e01c      	b.n	800338c <UART_SetConfig+0x178>
 8003352:	231b      	movs	r3, #27
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	2210      	movs	r2, #16
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e017      	b.n	800338c <UART_SetConfig+0x178>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a7a      	ldr	r2, [pc, #488]	@ (800354c <UART_SetConfig+0x338>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d104      	bne.n	8003370 <UART_SetConfig+0x15c>
 8003366:	231b      	movs	r3, #27
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e00d      	b.n	800338c <UART_SetConfig+0x178>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a76      	ldr	r2, [pc, #472]	@ (8003550 <UART_SetConfig+0x33c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d104      	bne.n	8003384 <UART_SetConfig+0x170>
 800337a:	231b      	movs	r3, #27
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	2200      	movs	r2, #0
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e003      	b.n	800338c <UART_SetConfig+0x178>
 8003384:	231b      	movs	r3, #27
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	2210      	movs	r2, #16
 800338a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	2380      	movs	r3, #128	@ 0x80
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	429a      	cmp	r2, r3
 8003396:	d000      	beq.n	800339a <UART_SetConfig+0x186>
 8003398:	e065      	b.n	8003466 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800339a:	231b      	movs	r3, #27
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d015      	beq.n	80033d0 <UART_SetConfig+0x1bc>
 80033a4:	dc18      	bgt.n	80033d8 <UART_SetConfig+0x1c4>
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d00d      	beq.n	80033c6 <UART_SetConfig+0x1b2>
 80033aa:	dc15      	bgt.n	80033d8 <UART_SetConfig+0x1c4>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <UART_SetConfig+0x1a2>
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d005      	beq.n	80033c0 <UART_SetConfig+0x1ac>
 80033b4:	e010      	b.n	80033d8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b6:	f7ff fc03 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 80033ba:	0003      	movs	r3, r0
 80033bc:	617b      	str	r3, [r7, #20]
        break;
 80033be:	e012      	b.n	80033e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b64      	ldr	r3, [pc, #400]	@ (8003554 <UART_SetConfig+0x340>)
 80033c2:	617b      	str	r3, [r7, #20]
        break;
 80033c4:	e00f      	b.n	80033e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7ff fb6f 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 80033ca:	0003      	movs	r3, r0
 80033cc:	617b      	str	r3, [r7, #20]
        break;
 80033ce:	e00a      	b.n	80033e6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d0:	2380      	movs	r3, #128	@ 0x80
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	617b      	str	r3, [r7, #20]
        break;
 80033d6:	e006      	b.n	80033e6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033dc:	231a      	movs	r3, #26
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
        break;
 80033e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d100      	bne.n	80033ee <UART_SetConfig+0x1da>
 80033ec:	e08d      	b.n	800350a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033f2:	4b59      	ldr	r3, [pc, #356]	@ (8003558 <UART_SetConfig+0x344>)
 80033f4:	0052      	lsls	r2, r2, #1
 80033f6:	5ad3      	ldrh	r3, [r2, r3]
 80033f8:	0019      	movs	r1, r3
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7fc fe8a 	bl	8000114 <__udivsi3>
 8003400:	0003      	movs	r3, r0
 8003402:	005a      	lsls	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	18d2      	adds	r2, r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0019      	movs	r1, r3
 8003412:	0010      	movs	r0, r2
 8003414:	f7fc fe7e 	bl	8000114 <__udivsi3>
 8003418:	0003      	movs	r3, r0
 800341a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b0f      	cmp	r3, #15
 8003420:	d91c      	bls.n	800345c <UART_SetConfig+0x248>
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	025b      	lsls	r3, r3, #9
 8003428:	429a      	cmp	r2, r3
 800342a:	d217      	bcs.n	800345c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	b29a      	uxth	r2, r3
 8003430:	200e      	movs	r0, #14
 8003432:	183b      	adds	r3, r7, r0
 8003434:	210f      	movs	r1, #15
 8003436:	438a      	bics	r2, r1
 8003438:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	085b      	lsrs	r3, r3, #1
 800343e:	b29b      	uxth	r3, r3
 8003440:	2207      	movs	r2, #7
 8003442:	4013      	ands	r3, r2
 8003444:	b299      	uxth	r1, r3
 8003446:	183b      	adds	r3, r7, r0
 8003448:	183a      	adds	r2, r7, r0
 800344a:	8812      	ldrh	r2, [r2, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	183a      	adds	r2, r7, r0
 8003456:	8812      	ldrh	r2, [r2, #0]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	e056      	b.n	800350a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800345c:	231a      	movs	r3, #26
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e051      	b.n	800350a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003466:	231b      	movs	r3, #27
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d015      	beq.n	800349c <UART_SetConfig+0x288>
 8003470:	dc18      	bgt.n	80034a4 <UART_SetConfig+0x290>
 8003472:	2b04      	cmp	r3, #4
 8003474:	d00d      	beq.n	8003492 <UART_SetConfig+0x27e>
 8003476:	dc15      	bgt.n	80034a4 <UART_SetConfig+0x290>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <UART_SetConfig+0x26e>
 800347c:	2b02      	cmp	r3, #2
 800347e:	d005      	beq.n	800348c <UART_SetConfig+0x278>
 8003480:	e010      	b.n	80034a4 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003482:	f7ff fb9d 	bl	8002bc0 <HAL_RCC_GetPCLK1Freq>
 8003486:	0003      	movs	r3, r0
 8003488:	617b      	str	r3, [r7, #20]
        break;
 800348a:	e012      	b.n	80034b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800348c:	4b31      	ldr	r3, [pc, #196]	@ (8003554 <UART_SetConfig+0x340>)
 800348e:	617b      	str	r3, [r7, #20]
        break;
 8003490:	e00f      	b.n	80034b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003492:	f7ff fb09 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8003496:	0003      	movs	r3, r0
 8003498:	617b      	str	r3, [r7, #20]
        break;
 800349a:	e00a      	b.n	80034b2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	617b      	str	r3, [r7, #20]
        break;
 80034a2:	e006      	b.n	80034b2 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80034a8:	231a      	movs	r3, #26
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
        break;
 80034b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d028      	beq.n	800350a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034bc:	4b26      	ldr	r3, [pc, #152]	@ (8003558 <UART_SetConfig+0x344>)
 80034be:	0052      	lsls	r2, r2, #1
 80034c0:	5ad3      	ldrh	r3, [r2, r3]
 80034c2:	0019      	movs	r1, r3
 80034c4:	6978      	ldr	r0, [r7, #20]
 80034c6:	f7fc fe25 	bl	8000114 <__udivsi3>
 80034ca:	0003      	movs	r3, r0
 80034cc:	001a      	movs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	18d2      	adds	r2, r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	0019      	movs	r1, r3
 80034dc:	0010      	movs	r0, r2
 80034de:	f7fc fe19 	bl	8000114 <__udivsi3>
 80034e2:	0003      	movs	r3, r0
 80034e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b0f      	cmp	r3, #15
 80034ea:	d90a      	bls.n	8003502 <UART_SetConfig+0x2ee>
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	2380      	movs	r3, #128	@ 0x80
 80034f0:	025b      	lsls	r3, r3, #9
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d205      	bcs.n	8003502 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60da      	str	r2, [r3, #12]
 8003500:	e003      	b.n	800350a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003502:	231a      	movs	r3, #26
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	226a      	movs	r2, #106	@ 0x6a
 800350e:	2101      	movs	r1, #1
 8003510:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2268      	movs	r2, #104	@ 0x68
 8003516:	2101      	movs	r1, #1
 8003518:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003526:	231a      	movs	r3, #26
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	781b      	ldrb	r3, [r3, #0]
}
 800352c:	0018      	movs	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	b008      	add	sp, #32
 8003532:	bd80      	pop	{r7, pc}
 8003534:	cfff69f3 	.word	0xcfff69f3
 8003538:	ffffcfff 	.word	0xffffcfff
 800353c:	11fff4ff 	.word	0x11fff4ff
 8003540:	40013800 	.word	0x40013800
 8003544:	40021000 	.word	0x40021000
 8003548:	40004400 	.word	0x40004400
 800354c:	40004800 	.word	0x40004800
 8003550:	40004c00 	.word	0x40004c00
 8003554:	00f42400 	.word	0x00f42400
 8003558:	08004e9c 	.word	0x08004e9c

0800355c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003568:	2208      	movs	r2, #8
 800356a:	4013      	ands	r3, r2
 800356c:	d00b      	beq.n	8003586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a4a      	ldr	r2, [pc, #296]	@ (80036a0 <UART_AdvFeatureConfig+0x144>)
 8003576:	4013      	ands	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	2201      	movs	r2, #1
 800358c:	4013      	ands	r3, r2
 800358e:	d00b      	beq.n	80035a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4a43      	ldr	r2, [pc, #268]	@ (80036a4 <UART_AdvFeatureConfig+0x148>)
 8003598:	4013      	ands	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	2202      	movs	r2, #2
 80035ae:	4013      	ands	r3, r2
 80035b0:	d00b      	beq.n	80035ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a3b      	ldr	r2, [pc, #236]	@ (80036a8 <UART_AdvFeatureConfig+0x14c>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	0019      	movs	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	d00b      	beq.n	80035ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a34      	ldr	r2, [pc, #208]	@ (80036ac <UART_AdvFeatureConfig+0x150>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f0:	2210      	movs	r2, #16
 80035f2:	4013      	ands	r3, r2
 80035f4:	d00b      	beq.n	800360e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a2c      	ldr	r2, [pc, #176]	@ (80036b0 <UART_AdvFeatureConfig+0x154>)
 80035fe:	4013      	ands	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003612:	2220      	movs	r2, #32
 8003614:	4013      	ands	r3, r2
 8003616:	d00b      	beq.n	8003630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	4a25      	ldr	r2, [pc, #148]	@ (80036b4 <UART_AdvFeatureConfig+0x158>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003634:	2240      	movs	r2, #64	@ 0x40
 8003636:	4013      	ands	r3, r2
 8003638:	d01d      	beq.n	8003676 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a1d      	ldr	r2, [pc, #116]	@ (80036b8 <UART_AdvFeatureConfig+0x15c>)
 8003642:	4013      	ands	r3, r2
 8003644:	0019      	movs	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	035b      	lsls	r3, r3, #13
 800365a:	429a      	cmp	r2, r3
 800365c:	d10b      	bne.n	8003676 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4a15      	ldr	r2, [pc, #84]	@ (80036bc <UART_AdvFeatureConfig+0x160>)
 8003666:	4013      	ands	r3, r2
 8003668:	0019      	movs	r1, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	2280      	movs	r2, #128	@ 0x80
 800367c:	4013      	ands	r3, r2
 800367e:	d00b      	beq.n	8003698 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4a0e      	ldr	r2, [pc, #56]	@ (80036c0 <UART_AdvFeatureConfig+0x164>)
 8003688:	4013      	ands	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  }
}
 8003698:	46c0      	nop			@ (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	ffff7fff 	.word	0xffff7fff
 80036a4:	fffdffff 	.word	0xfffdffff
 80036a8:	fffeffff 	.word	0xfffeffff
 80036ac:	fffbffff 	.word	0xfffbffff
 80036b0:	ffffefff 	.word	0xffffefff
 80036b4:	ffffdfff 	.word	0xffffdfff
 80036b8:	ffefffff 	.word	0xffefffff
 80036bc:	ff9fffff 	.word	0xff9fffff
 80036c0:	fff7ffff 	.word	0xfff7ffff

080036c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b092      	sub	sp, #72	@ 0x48
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2290      	movs	r2, #144	@ 0x90
 80036d0:	2100      	movs	r1, #0
 80036d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036d4:	f7fd fb88 	bl	8000de8 <HAL_GetTick>
 80036d8:	0003      	movs	r3, r0
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2208      	movs	r2, #8
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d12d      	bne.n	8003746 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ec:	2280      	movs	r2, #128	@ 0x80
 80036ee:	0391      	lsls	r1, r2, #14
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4a47      	ldr	r2, [pc, #284]	@ (8003810 <UART_CheckIdleState+0x14c>)
 80036f4:	9200      	str	r2, [sp, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f000 f88e 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 80036fc:	1e03      	subs	r3, r0, #0
 80036fe:	d022      	beq.n	8003746 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003700:	f3ef 8310 	mrs	r3, PRIMASK
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003708:	63bb      	str	r3, [r7, #56]	@ 0x38
 800370a:	2301      	movs	r3, #1
 800370c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	f383 8810 	msr	PRIMASK, r3
}
 8003714:	46c0      	nop			@ (mov r8, r8)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2180      	movs	r1, #128	@ 0x80
 8003722:	438a      	bics	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372c:	f383 8810 	msr	PRIMASK, r3
}
 8003730:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2288      	movs	r2, #136	@ 0x88
 8003736:	2120      	movs	r1, #32
 8003738:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2284      	movs	r2, #132	@ 0x84
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e060      	b.n	8003808 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2204      	movs	r2, #4
 800374e:	4013      	ands	r3, r2
 8003750:	2b04      	cmp	r3, #4
 8003752:	d146      	bne.n	80037e2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003756:	2280      	movs	r2, #128	@ 0x80
 8003758:	03d1      	lsls	r1, r2, #15
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <UART_CheckIdleState+0x14c>)
 800375e:	9200      	str	r2, [sp, #0]
 8003760:	2200      	movs	r2, #0
 8003762:	f000 f859 	bl	8003818 <UART_WaitOnFlagUntilTimeout>
 8003766:	1e03      	subs	r3, r0, #0
 8003768:	d03b      	beq.n	80037e2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800376a:	f3ef 8310 	mrs	r3, PRIMASK
 800376e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003770:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003772:	637b      	str	r3, [r7, #52]	@ 0x34
 8003774:	2301      	movs	r3, #1
 8003776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f383 8810 	msr	PRIMASK, r3
}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4922      	ldr	r1, [pc, #136]	@ (8003814 <UART_CheckIdleState+0x150>)
 800378c:	400a      	ands	r2, r1
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003792:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379c:	f3ef 8310 	mrs	r3, PRIMASK
 80037a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80037a2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037a6:	2301      	movs	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	f383 8810 	msr	PRIMASK, r3
}
 80037b0:	46c0      	nop			@ (mov r8, r8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2101      	movs	r1, #1
 80037be:	438a      	bics	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	228c      	movs	r2, #140	@ 0x8c
 80037d2:	2120      	movs	r1, #32
 80037d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2284      	movs	r2, #132	@ 0x84
 80037da:	2100      	movs	r1, #0
 80037dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e012      	b.n	8003808 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2288      	movs	r2, #136	@ 0x88
 80037e6:	2120      	movs	r1, #32
 80037e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	228c      	movs	r2, #140	@ 0x8c
 80037ee:	2120      	movs	r1, #32
 80037f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2284      	movs	r2, #132	@ 0x84
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b010      	add	sp, #64	@ 0x40
 800380e:	bd80      	pop	{r7, pc}
 8003810:	01ffffff 	.word	0x01ffffff
 8003814:	fffffedf 	.word	0xfffffedf

08003818 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	1dfb      	adds	r3, r7, #7
 8003826:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003828:	e051      	b.n	80038ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	3301      	adds	r3, #1
 800382e:	d04e      	beq.n	80038ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003830:	f7fd fada 	bl	8000de8 <HAL_GetTick>
 8003834:	0002      	movs	r2, r0
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	429a      	cmp	r2, r3
 800383e:	d302      	bcc.n	8003846 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e051      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2204      	movs	r2, #4
 8003852:	4013      	ands	r3, r2
 8003854:	d03b      	beq.n	80038ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b80      	cmp	r3, #128	@ 0x80
 800385a:	d038      	beq.n	80038ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	d035      	beq.n	80038ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	2208      	movs	r2, #8
 800386a:	4013      	ands	r3, r2
 800386c:	2b08      	cmp	r3, #8
 800386e:	d111      	bne.n	8003894 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2208      	movs	r2, #8
 8003876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	0018      	movs	r0, r3
 800387c:	f000 f83c 	bl	80038f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2290      	movs	r2, #144	@ 0x90
 8003884:	2108      	movs	r1, #8
 8003886:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2284      	movs	r2, #132	@ 0x84
 800388c:	2100      	movs	r1, #0
 800388e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e02c      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	401a      	ands	r2, r3
 80038a0:	2380      	movs	r3, #128	@ 0x80
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d112      	bne.n	80038ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2280      	movs	r2, #128	@ 0x80
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 f81f 	bl	80038f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2290      	movs	r2, #144	@ 0x90
 80038be:	2120      	movs	r1, #32
 80038c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2284      	movs	r2, #132	@ 0x84
 80038c6:	2100      	movs	r1, #0
 80038c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e00f      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	425a      	negs	r2, r3
 80038de:	4153      	adcs	r3, r2
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	001a      	movs	r2, r3
 80038e4:	1dfb      	adds	r3, r7, #7
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d09e      	beq.n	800382a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08e      	sub	sp, #56	@ 0x38
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003900:	f3ef 8310 	mrs	r3, PRIMASK
 8003904:	617b      	str	r3, [r7, #20]
  return(result);
 8003906:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003908:	637b      	str	r3, [r7, #52]	@ 0x34
 800390a:	2301      	movs	r3, #1
 800390c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f383 8810 	msr	PRIMASK, r3
}
 8003914:	46c0      	nop			@ (mov r8, r8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4926      	ldr	r1, [pc, #152]	@ (80039bc <UART_EndRxTransfer+0xc4>)
 8003922:	400a      	ands	r2, r1
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003928:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	f383 8810 	msr	PRIMASK, r3
}
 8003930:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003932:	f3ef 8310 	mrs	r3, PRIMASK
 8003936:	623b      	str	r3, [r7, #32]
  return(result);
 8003938:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800393a:	633b      	str	r3, [r7, #48]	@ 0x30
 800393c:	2301      	movs	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	f383 8810 	msr	PRIMASK, r3
}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	491b      	ldr	r1, [pc, #108]	@ (80039c0 <UART_EndRxTransfer+0xc8>)
 8003954:	400a      	ands	r2, r1
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800395e:	f383 8810 	msr	PRIMASK, r3
}
 8003962:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d118      	bne.n	800399e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396c:	f3ef 8310 	mrs	r3, PRIMASK
 8003970:	60bb      	str	r3, [r7, #8]
  return(result);
 8003972:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003976:	2301      	movs	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f383 8810 	msr	PRIMASK, r3
}
 8003980:	46c0      	nop			@ (mov r8, r8)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2110      	movs	r1, #16
 800398e:	438a      	bics	r2, r1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f383 8810 	msr	PRIMASK, r3
}
 800399c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	228c      	movs	r2, #140	@ 0x8c
 80039a2:	2120      	movs	r1, #32
 80039a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b00e      	add	sp, #56	@ 0x38
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	fffffedf 	.word	0xfffffedf
 80039c0:	effffffe 	.word	0xeffffffe

080039c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2284      	movs	r2, #132	@ 0x84
 80039d0:	5c9b      	ldrb	r3, [r3, r2]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_UARTEx_DisableFifoMode+0x16>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e027      	b.n	8003a2a <HAL_UARTEx_DisableFifoMode+0x66>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2284      	movs	r2, #132	@ 0x84
 80039de:	2101      	movs	r1, #1
 80039e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2288      	movs	r2, #136	@ 0x88
 80039e6:	2124      	movs	r1, #36	@ 0x24
 80039e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2101      	movs	r1, #1
 80039fe:	438a      	bics	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a0b      	ldr	r2, [pc, #44]	@ (8003a34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2288      	movs	r2, #136	@ 0x88
 8003a1c:	2120      	movs	r1, #32
 8003a1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2284      	movs	r2, #132	@ 0x84
 8003a24:	2100      	movs	r1, #0
 8003a26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b004      	add	sp, #16
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	dfffffff 	.word	0xdfffffff

08003a38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2284      	movs	r2, #132	@ 0x84
 8003a46:	5c9b      	ldrb	r3, [r3, r2]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e02e      	b.n	8003aae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2284      	movs	r2, #132	@ 0x84
 8003a54:	2101      	movs	r1, #1
 8003a56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2288      	movs	r2, #136	@ 0x88
 8003a5c:	2124      	movs	r1, #36	@ 0x24
 8003a5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2101      	movs	r1, #1
 8003a74:	438a      	bics	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	08d9      	lsrs	r1, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 f854 	bl	8003b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2288      	movs	r2, #136	@ 0x88
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2284      	movs	r2, #132	@ 0x84
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b004      	add	sp, #16
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2284      	movs	r2, #132	@ 0x84
 8003ac6:	5c9b      	ldrb	r3, [r3, r2]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e02f      	b.n	8003b30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2284      	movs	r2, #132	@ 0x84
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2288      	movs	r2, #136	@ 0x88
 8003adc:	2124      	movs	r1, #36	@ 0x24
 8003ade:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2101      	movs	r1, #1
 8003af4:	438a      	bics	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	4a0e      	ldr	r2, [pc, #56]	@ (8003b38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f000 f813 	bl	8003b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2288      	movs	r2, #136	@ 0x88
 8003b22:	2120      	movs	r1, #32
 8003b24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2284      	movs	r2, #132	@ 0x84
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b004      	add	sp, #16
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	f1ffffff 	.word	0xf1ffffff

08003b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d108      	bne.n	8003b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	226a      	movs	r2, #106	@ 0x6a
 8003b50:	2101      	movs	r1, #1
 8003b52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2268      	movs	r2, #104	@ 0x68
 8003b58:	2101      	movs	r1, #1
 8003b5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b5c:	e043      	b.n	8003be6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b5e:	260f      	movs	r6, #15
 8003b60:	19bb      	adds	r3, r7, r6
 8003b62:	2208      	movs	r2, #8
 8003b64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b66:	200e      	movs	r0, #14
 8003b68:	183b      	adds	r3, r7, r0
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	0e5b      	lsrs	r3, r3, #25
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	240d      	movs	r4, #13
 8003b7a:	193b      	adds	r3, r7, r4
 8003b7c:	2107      	movs	r1, #7
 8003b7e:	400a      	ands	r2, r1
 8003b80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	0f5b      	lsrs	r3, r3, #29
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	250c      	movs	r5, #12
 8003b8e:	197b      	adds	r3, r7, r5
 8003b90:	2107      	movs	r1, #7
 8003b92:	400a      	ands	r2, r1
 8003b94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b96:	183b      	adds	r3, r7, r0
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	197a      	adds	r2, r7, r5
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	4914      	ldr	r1, [pc, #80]	@ (8003bf0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ba0:	5c8a      	ldrb	r2, [r1, r2]
 8003ba2:	435a      	muls	r2, r3
 8003ba4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ba6:	197b      	adds	r3, r7, r5
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003bac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bae:	0019      	movs	r1, r3
 8003bb0:	f7fc fb3a 	bl	8000228 <__divsi3>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	b299      	uxth	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	226a      	movs	r2, #106	@ 0x6a
 8003bbc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bbe:	19bb      	adds	r3, r7, r6
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	193a      	adds	r2, r7, r4
 8003bc4:	7812      	ldrb	r2, [r2, #0]
 8003bc6:	490a      	ldr	r1, [pc, #40]	@ (8003bf0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003bc8:	5c8a      	ldrb	r2, [r1, r2]
 8003bca:	435a      	muls	r2, r3
 8003bcc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bce:	193b      	adds	r3, r7, r4
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	4a08      	ldr	r2, [pc, #32]	@ (8003bf4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003bd4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	f7fc fb26 	bl	8000228 <__divsi3>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	b299      	uxth	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2268      	movs	r2, #104	@ 0x68
 8003be4:	5299      	strh	r1, [r3, r2]
}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b005      	add	sp, #20
 8003bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	08004eb4 	.word	0x08004eb4
 8003bf4:	08004ebc 	.word	0x08004ebc

08003bf8 <std>:
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	b510      	push	{r4, lr}
 8003bfc:	0004      	movs	r4, r0
 8003bfe:	6003      	str	r3, [r0, #0]
 8003c00:	6043      	str	r3, [r0, #4]
 8003c02:	6083      	str	r3, [r0, #8]
 8003c04:	8181      	strh	r1, [r0, #12]
 8003c06:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c08:	81c2      	strh	r2, [r0, #14]
 8003c0a:	6103      	str	r3, [r0, #16]
 8003c0c:	6143      	str	r3, [r0, #20]
 8003c0e:	6183      	str	r3, [r0, #24]
 8003c10:	0019      	movs	r1, r3
 8003c12:	2208      	movs	r2, #8
 8003c14:	305c      	adds	r0, #92	@ 0x5c
 8003c16:	f000 fac5 	bl	80041a4 <memset>
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <std+0x50>)
 8003c1c:	6224      	str	r4, [r4, #32]
 8003c1e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c20:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <std+0x54>)
 8003c22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c24:	4b0a      	ldr	r3, [pc, #40]	@ (8003c50 <std+0x58>)
 8003c26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c28:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <std+0x5c>)
 8003c2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c58 <std+0x60>)
 8003c2e:	429c      	cmp	r4, r3
 8003c30:	d005      	beq.n	8003c3e <std+0x46>
 8003c32:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <std+0x64>)
 8003c34:	429c      	cmp	r4, r3
 8003c36:	d002      	beq.n	8003c3e <std+0x46>
 8003c38:	4b09      	ldr	r3, [pc, #36]	@ (8003c60 <std+0x68>)
 8003c3a:	429c      	cmp	r4, r3
 8003c3c:	d103      	bne.n	8003c46 <std+0x4e>
 8003c3e:	0020      	movs	r0, r4
 8003c40:	3058      	adds	r0, #88	@ 0x58
 8003c42:	f000 fb2f 	bl	80042a4 <__retarget_lock_init_recursive>
 8003c46:	bd10      	pop	{r4, pc}
 8003c48:	08003fcd 	.word	0x08003fcd
 8003c4c:	08003ff5 	.word	0x08003ff5
 8003c50:	0800402d 	.word	0x0800402d
 8003c54:	08004059 	.word	0x08004059
 8003c58:	20000178 	.word	0x20000178
 8003c5c:	200001e0 	.word	0x200001e0
 8003c60:	20000248 	.word	0x20000248

08003c64 <stdio_exit_handler>:
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4a03      	ldr	r2, [pc, #12]	@ (8003c74 <stdio_exit_handler+0x10>)
 8003c68:	4903      	ldr	r1, [pc, #12]	@ (8003c78 <stdio_exit_handler+0x14>)
 8003c6a:	4804      	ldr	r0, [pc, #16]	@ (8003c7c <stdio_exit_handler+0x18>)
 8003c6c:	f000 f86c 	bl	8003d48 <_fwalk_sglue>
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	2000000c 	.word	0x2000000c
 8003c78:	08004b49 	.word	0x08004b49
 8003c7c:	2000001c 	.word	0x2000001c

08003c80 <cleanup_stdio>:
 8003c80:	6841      	ldr	r1, [r0, #4]
 8003c82:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <cleanup_stdio+0x30>)
 8003c84:	b510      	push	{r4, lr}
 8003c86:	0004      	movs	r4, r0
 8003c88:	4299      	cmp	r1, r3
 8003c8a:	d001      	beq.n	8003c90 <cleanup_stdio+0x10>
 8003c8c:	f000 ff5c 	bl	8004b48 <_fflush_r>
 8003c90:	68a1      	ldr	r1, [r4, #8]
 8003c92:	4b08      	ldr	r3, [pc, #32]	@ (8003cb4 <cleanup_stdio+0x34>)
 8003c94:	4299      	cmp	r1, r3
 8003c96:	d002      	beq.n	8003c9e <cleanup_stdio+0x1e>
 8003c98:	0020      	movs	r0, r4
 8003c9a:	f000 ff55 	bl	8004b48 <_fflush_r>
 8003c9e:	68e1      	ldr	r1, [r4, #12]
 8003ca0:	4b05      	ldr	r3, [pc, #20]	@ (8003cb8 <cleanup_stdio+0x38>)
 8003ca2:	4299      	cmp	r1, r3
 8003ca4:	d002      	beq.n	8003cac <cleanup_stdio+0x2c>
 8003ca6:	0020      	movs	r0, r4
 8003ca8:	f000 ff4e 	bl	8004b48 <_fflush_r>
 8003cac:	bd10      	pop	{r4, pc}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	20000178 	.word	0x20000178
 8003cb4:	200001e0 	.word	0x200001e0
 8003cb8:	20000248 	.word	0x20000248

08003cbc <global_stdio_init.part.0>:
 8003cbc:	b510      	push	{r4, lr}
 8003cbe:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <global_stdio_init.part.0+0x28>)
 8003cc0:	4a09      	ldr	r2, [pc, #36]	@ (8003ce8 <global_stdio_init.part.0+0x2c>)
 8003cc2:	2104      	movs	r1, #4
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	4809      	ldr	r0, [pc, #36]	@ (8003cec <global_stdio_init.part.0+0x30>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f7ff ff95 	bl	8003bf8 <std>
 8003cce:	2201      	movs	r2, #1
 8003cd0:	2109      	movs	r1, #9
 8003cd2:	4807      	ldr	r0, [pc, #28]	@ (8003cf0 <global_stdio_init.part.0+0x34>)
 8003cd4:	f7ff ff90 	bl	8003bf8 <std>
 8003cd8:	2202      	movs	r2, #2
 8003cda:	2112      	movs	r1, #18
 8003cdc:	4805      	ldr	r0, [pc, #20]	@ (8003cf4 <global_stdio_init.part.0+0x38>)
 8003cde:	f7ff ff8b 	bl	8003bf8 <std>
 8003ce2:	bd10      	pop	{r4, pc}
 8003ce4:	200002b0 	.word	0x200002b0
 8003ce8:	08003c65 	.word	0x08003c65
 8003cec:	20000178 	.word	0x20000178
 8003cf0:	200001e0 	.word	0x200001e0
 8003cf4:	20000248 	.word	0x20000248

08003cf8 <__sfp_lock_acquire>:
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	4802      	ldr	r0, [pc, #8]	@ (8003d04 <__sfp_lock_acquire+0xc>)
 8003cfc:	f000 fad3 	bl	80042a6 <__retarget_lock_acquire_recursive>
 8003d00:	bd10      	pop	{r4, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	200002b9 	.word	0x200002b9

08003d08 <__sfp_lock_release>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	4802      	ldr	r0, [pc, #8]	@ (8003d14 <__sfp_lock_release+0xc>)
 8003d0c:	f000 facc 	bl	80042a8 <__retarget_lock_release_recursive>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	46c0      	nop			@ (mov r8, r8)
 8003d14:	200002b9 	.word	0x200002b9

08003d18 <__sinit>:
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	0004      	movs	r4, r0
 8003d1c:	f7ff ffec 	bl	8003cf8 <__sfp_lock_acquire>
 8003d20:	6a23      	ldr	r3, [r4, #32]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <__sinit+0x14>
 8003d26:	f7ff ffef 	bl	8003d08 <__sfp_lock_release>
 8003d2a:	bd10      	pop	{r4, pc}
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <__sinit+0x28>)
 8003d2e:	6223      	str	r3, [r4, #32]
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <__sinit+0x2c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f6      	bne.n	8003d26 <__sinit+0xe>
 8003d38:	f7ff ffc0 	bl	8003cbc <global_stdio_init.part.0>
 8003d3c:	e7f3      	b.n	8003d26 <__sinit+0xe>
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	08003c81 	.word	0x08003c81
 8003d44:	200002b0 	.word	0x200002b0

08003d48 <_fwalk_sglue>:
 8003d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d4a:	0014      	movs	r4, r2
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	9000      	str	r0, [sp, #0]
 8003d50:	9101      	str	r1, [sp, #4]
 8003d52:	68a5      	ldr	r5, [r4, #8]
 8003d54:	6867      	ldr	r7, [r4, #4]
 8003d56:	3f01      	subs	r7, #1
 8003d58:	d504      	bpl.n	8003d64 <_fwalk_sglue+0x1c>
 8003d5a:	6824      	ldr	r4, [r4, #0]
 8003d5c:	2c00      	cmp	r4, #0
 8003d5e:	d1f8      	bne.n	8003d52 <_fwalk_sglue+0xa>
 8003d60:	0030      	movs	r0, r6
 8003d62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d64:	89ab      	ldrh	r3, [r5, #12]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d908      	bls.n	8003d7c <_fwalk_sglue+0x34>
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	5eab      	ldrsh	r3, [r5, r2]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	d004      	beq.n	8003d7c <_fwalk_sglue+0x34>
 8003d72:	0029      	movs	r1, r5
 8003d74:	9800      	ldr	r0, [sp, #0]
 8003d76:	9b01      	ldr	r3, [sp, #4]
 8003d78:	4798      	blx	r3
 8003d7a:	4306      	orrs	r6, r0
 8003d7c:	3568      	adds	r5, #104	@ 0x68
 8003d7e:	e7ea      	b.n	8003d56 <_fwalk_sglue+0xe>

08003d80 <iprintf>:
 8003d80:	b40f      	push	{r0, r1, r2, r3}
 8003d82:	b507      	push	{r0, r1, r2, lr}
 8003d84:	4905      	ldr	r1, [pc, #20]	@ (8003d9c <iprintf+0x1c>)
 8003d86:	ab04      	add	r3, sp, #16
 8003d88:	6808      	ldr	r0, [r1, #0]
 8003d8a:	cb04      	ldmia	r3!, {r2}
 8003d8c:	6881      	ldr	r1, [r0, #8]
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	f000 fbba 	bl	8004508 <_vfiprintf_r>
 8003d94:	b003      	add	sp, #12
 8003d96:	bc08      	pop	{r3}
 8003d98:	b004      	add	sp, #16
 8003d9a:	4718      	bx	r3
 8003d9c:	20000018 	.word	0x20000018

08003da0 <_puts_r>:
 8003da0:	6a03      	ldr	r3, [r0, #32]
 8003da2:	b570      	push	{r4, r5, r6, lr}
 8003da4:	0005      	movs	r5, r0
 8003da6:	000e      	movs	r6, r1
 8003da8:	6884      	ldr	r4, [r0, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <_puts_r+0x12>
 8003dae:	f7ff ffb3 	bl	8003d18 <__sinit>
 8003db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003db4:	07db      	lsls	r3, r3, #31
 8003db6:	d405      	bmi.n	8003dc4 <_puts_r+0x24>
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	059b      	lsls	r3, r3, #22
 8003dbc:	d402      	bmi.n	8003dc4 <_puts_r+0x24>
 8003dbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dc0:	f000 fa71 	bl	80042a6 <__retarget_lock_acquire_recursive>
 8003dc4:	89a3      	ldrh	r3, [r4, #12]
 8003dc6:	071b      	lsls	r3, r3, #28
 8003dc8:	d502      	bpl.n	8003dd0 <_puts_r+0x30>
 8003dca:	6923      	ldr	r3, [r4, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11f      	bne.n	8003e10 <_puts_r+0x70>
 8003dd0:	0021      	movs	r1, r4
 8003dd2:	0028      	movs	r0, r5
 8003dd4:	f000 f988 	bl	80040e8 <__swsetup_r>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d019      	beq.n	8003e10 <_puts_r+0x70>
 8003ddc:	2501      	movs	r5, #1
 8003dde:	426d      	negs	r5, r5
 8003de0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003de2:	07db      	lsls	r3, r3, #31
 8003de4:	d405      	bmi.n	8003df2 <_puts_r+0x52>
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	059b      	lsls	r3, r3, #22
 8003dea:	d402      	bmi.n	8003df2 <_puts_r+0x52>
 8003dec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dee:	f000 fa5b 	bl	80042a8 <__retarget_lock_release_recursive>
 8003df2:	0028      	movs	r0, r5
 8003df4:	bd70      	pop	{r4, r5, r6, pc}
 8003df6:	3601      	adds	r6, #1
 8003df8:	60a3      	str	r3, [r4, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da04      	bge.n	8003e08 <_puts_r+0x68>
 8003dfe:	69a2      	ldr	r2, [r4, #24]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	dc16      	bgt.n	8003e32 <_puts_r+0x92>
 8003e04:	290a      	cmp	r1, #10
 8003e06:	d014      	beq.n	8003e32 <_puts_r+0x92>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	6022      	str	r2, [r4, #0]
 8003e0e:	7019      	strb	r1, [r3, #0]
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	7831      	ldrb	r1, [r6, #0]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	2900      	cmp	r1, #0
 8003e18:	d1ed      	bne.n	8003df6 <_puts_r+0x56>
 8003e1a:	60a3      	str	r3, [r4, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	da0f      	bge.n	8003e40 <_puts_r+0xa0>
 8003e20:	0022      	movs	r2, r4
 8003e22:	0028      	movs	r0, r5
 8003e24:	310a      	adds	r1, #10
 8003e26:	f000 f91d 	bl	8004064 <__swbuf_r>
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d0d6      	beq.n	8003ddc <_puts_r+0x3c>
 8003e2e:	250a      	movs	r5, #10
 8003e30:	e7d6      	b.n	8003de0 <_puts_r+0x40>
 8003e32:	0022      	movs	r2, r4
 8003e34:	0028      	movs	r0, r5
 8003e36:	f000 f915 	bl	8004064 <__swbuf_r>
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d1e8      	bne.n	8003e10 <_puts_r+0x70>
 8003e3e:	e7cd      	b.n	8003ddc <_puts_r+0x3c>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	6022      	str	r2, [r4, #0]
 8003e46:	220a      	movs	r2, #10
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e7f0      	b.n	8003e2e <_puts_r+0x8e>

08003e4c <puts>:
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	4b03      	ldr	r3, [pc, #12]	@ (8003e5c <puts+0x10>)
 8003e50:	0001      	movs	r1, r0
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	f7ff ffa4 	bl	8003da0 <_puts_r>
 8003e58:	bd10      	pop	{r4, pc}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	20000018 	.word	0x20000018

08003e60 <setvbuf>:
 8003e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e62:	001d      	movs	r5, r3
 8003e64:	4b57      	ldr	r3, [pc, #348]	@ (8003fc4 <setvbuf+0x164>)
 8003e66:	b085      	sub	sp, #20
 8003e68:	681e      	ldr	r6, [r3, #0]
 8003e6a:	0004      	movs	r4, r0
 8003e6c:	000f      	movs	r7, r1
 8003e6e:	9200      	str	r2, [sp, #0]
 8003e70:	2e00      	cmp	r6, #0
 8003e72:	d005      	beq.n	8003e80 <setvbuf+0x20>
 8003e74:	6a33      	ldr	r3, [r6, #32]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <setvbuf+0x20>
 8003e7a:	0030      	movs	r0, r6
 8003e7c:	f7ff ff4c 	bl	8003d18 <__sinit>
 8003e80:	9b00      	ldr	r3, [sp, #0]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d005      	beq.n	8003e92 <setvbuf+0x32>
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d900      	bls.n	8003e8c <setvbuf+0x2c>
 8003e8a:	e097      	b.n	8003fbc <setvbuf+0x15c>
 8003e8c:	2d00      	cmp	r5, #0
 8003e8e:	da00      	bge.n	8003e92 <setvbuf+0x32>
 8003e90:	e094      	b.n	8003fbc <setvbuf+0x15c>
 8003e92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e94:	07db      	lsls	r3, r3, #31
 8003e96:	d405      	bmi.n	8003ea4 <setvbuf+0x44>
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	059b      	lsls	r3, r3, #22
 8003e9c:	d402      	bmi.n	8003ea4 <setvbuf+0x44>
 8003e9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ea0:	f000 fa01 	bl	80042a6 <__retarget_lock_acquire_recursive>
 8003ea4:	0021      	movs	r1, r4
 8003ea6:	0030      	movs	r0, r6
 8003ea8:	f000 fe4e 	bl	8004b48 <_fflush_r>
 8003eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003eae:	2900      	cmp	r1, #0
 8003eb0:	d008      	beq.n	8003ec4 <setvbuf+0x64>
 8003eb2:	0023      	movs	r3, r4
 8003eb4:	3344      	adds	r3, #68	@ 0x44
 8003eb6:	4299      	cmp	r1, r3
 8003eb8:	d002      	beq.n	8003ec0 <setvbuf+0x60>
 8003eba:	0030      	movs	r0, r6
 8003ebc:	f000 f9f6 	bl	80042ac <_free_r>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61a3      	str	r3, [r4, #24]
 8003ec8:	6063      	str	r3, [r4, #4]
 8003eca:	89a3      	ldrh	r3, [r4, #12]
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	d503      	bpl.n	8003ed8 <setvbuf+0x78>
 8003ed0:	0030      	movs	r0, r6
 8003ed2:	6921      	ldr	r1, [r4, #16]
 8003ed4:	f000 f9ea 	bl	80042ac <_free_r>
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc8 <setvbuf+0x168>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	9b00      	ldr	r3, [sp, #0]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d060      	beq.n	8003fa8 <setvbuf+0x148>
 8003ee6:	ab03      	add	r3, sp, #12
 8003ee8:	0021      	movs	r1, r4
 8003eea:	0030      	movs	r0, r6
 8003eec:	aa02      	add	r2, sp, #8
 8003eee:	f000 fe57 	bl	8004ba0 <__swhatbuf_r>
 8003ef2:	89a3      	ldrh	r3, [r4, #12]
 8003ef4:	4303      	orrs	r3, r0
 8003ef6:	81a3      	strh	r3, [r4, #12]
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	d124      	bne.n	8003f46 <setvbuf+0xe6>
 8003efc:	9d02      	ldr	r5, [sp, #8]
 8003efe:	0028      	movs	r0, r5
 8003f00:	f000 fa1e 	bl	8004340 <malloc>
 8003f04:	9501      	str	r5, [sp, #4]
 8003f06:	1e07      	subs	r7, r0, #0
 8003f08:	d148      	bne.n	8003f9c <setvbuf+0x13c>
 8003f0a:	9b02      	ldr	r3, [sp, #8]
 8003f0c:	9301      	str	r3, [sp, #4]
 8003f0e:	42ab      	cmp	r3, r5
 8003f10:	d13f      	bne.n	8003f92 <setvbuf+0x132>
 8003f12:	2501      	movs	r5, #1
 8003f14:	426d      	negs	r5, r5
 8003f16:	220c      	movs	r2, #12
 8003f18:	5ea3      	ldrsh	r3, [r4, r2]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	81a2      	strh	r2, [r4, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	60a2      	str	r2, [r4, #8]
 8003f24:	0022      	movs	r2, r4
 8003f26:	3247      	adds	r2, #71	@ 0x47
 8003f28:	6022      	str	r2, [r4, #0]
 8003f2a:	6122      	str	r2, [r4, #16]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003f30:	6162      	str	r2, [r4, #20]
 8003f32:	4211      	tst	r1, r2
 8003f34:	d104      	bne.n	8003f40 <setvbuf+0xe0>
 8003f36:	059b      	lsls	r3, r3, #22
 8003f38:	d402      	bmi.n	8003f40 <setvbuf+0xe0>
 8003f3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f3c:	f000 f9b4 	bl	80042a8 <__retarget_lock_release_recursive>
 8003f40:	0028      	movs	r0, r5
 8003f42:	b005      	add	sp, #20
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f46:	2f00      	cmp	r7, #0
 8003f48:	d0d9      	beq.n	8003efe <setvbuf+0x9e>
 8003f4a:	6a33      	ldr	r3, [r6, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <setvbuf+0xf6>
 8003f50:	0030      	movs	r0, r6
 8003f52:	f7ff fee1 	bl	8003d18 <__sinit>
 8003f56:	9b00      	ldr	r3, [sp, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d103      	bne.n	8003f64 <setvbuf+0x104>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	9a00      	ldr	r2, [sp, #0]
 8003f60:	431a      	orrs	r2, r3
 8003f62:	81a2      	strh	r2, [r4, #12]
 8003f64:	220c      	movs	r2, #12
 8003f66:	5ea3      	ldrsh	r3, [r4, r2]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	6027      	str	r7, [r4, #0]
 8003f6e:	6127      	str	r7, [r4, #16]
 8003f70:	6165      	str	r5, [r4, #20]
 8003f72:	4011      	ands	r1, r2
 8003f74:	4213      	tst	r3, r2
 8003f76:	d01b      	beq.n	8003fb0 <setvbuf+0x150>
 8003f78:	07da      	lsls	r2, r3, #31
 8003f7a:	d517      	bpl.n	8003fac <setvbuf+0x14c>
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	426d      	negs	r5, r5
 8003f80:	60a2      	str	r2, [r4, #8]
 8003f82:	61a5      	str	r5, [r4, #24]
 8003f84:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f86:	07d2      	lsls	r2, r2, #31
 8003f88:	d401      	bmi.n	8003f8e <setvbuf+0x12e>
 8003f8a:	059b      	lsls	r3, r3, #22
 8003f8c:	d512      	bpl.n	8003fb4 <setvbuf+0x154>
 8003f8e:	2500      	movs	r5, #0
 8003f90:	e7d6      	b.n	8003f40 <setvbuf+0xe0>
 8003f92:	9801      	ldr	r0, [sp, #4]
 8003f94:	f000 f9d4 	bl	8004340 <malloc>
 8003f98:	1e07      	subs	r7, r0, #0
 8003f9a:	d0ba      	beq.n	8003f12 <setvbuf+0xb2>
 8003f9c:	2380      	movs	r3, #128	@ 0x80
 8003f9e:	89a2      	ldrh	r2, [r4, #12]
 8003fa0:	9d01      	ldr	r5, [sp, #4]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	81a3      	strh	r3, [r4, #12]
 8003fa6:	e7d0      	b.n	8003f4a <setvbuf+0xea>
 8003fa8:	2500      	movs	r5, #0
 8003faa:	e7b4      	b.n	8003f16 <setvbuf+0xb6>
 8003fac:	60a5      	str	r5, [r4, #8]
 8003fae:	e7e9      	b.n	8003f84 <setvbuf+0x124>
 8003fb0:	60a1      	str	r1, [r4, #8]
 8003fb2:	e7e7      	b.n	8003f84 <setvbuf+0x124>
 8003fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fb6:	f000 f977 	bl	80042a8 <__retarget_lock_release_recursive>
 8003fba:	e7e8      	b.n	8003f8e <setvbuf+0x12e>
 8003fbc:	2501      	movs	r5, #1
 8003fbe:	426d      	negs	r5, r5
 8003fc0:	e7be      	b.n	8003f40 <setvbuf+0xe0>
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	20000018 	.word	0x20000018
 8003fc8:	fffff35c 	.word	0xfffff35c

08003fcc <__sread>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	000c      	movs	r4, r1
 8003fd0:	250e      	movs	r5, #14
 8003fd2:	5f49      	ldrsh	r1, [r1, r5]
 8003fd4:	f000 f914 	bl	8004200 <_read_r>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	db03      	blt.n	8003fe4 <__sread+0x18>
 8003fdc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003fde:	181b      	adds	r3, r3, r0
 8003fe0:	6563      	str	r3, [r4, #84]	@ 0x54
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	89a3      	ldrh	r3, [r4, #12]
 8003fe6:	4a02      	ldr	r2, [pc, #8]	@ (8003ff0 <__sread+0x24>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	e7f9      	b.n	8003fe2 <__sread+0x16>
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	ffffefff 	.word	0xffffefff

08003ff4 <__swrite>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	001f      	movs	r7, r3
 8003ff8:	898b      	ldrh	r3, [r1, #12]
 8003ffa:	0005      	movs	r5, r0
 8003ffc:	000c      	movs	r4, r1
 8003ffe:	0016      	movs	r6, r2
 8004000:	05db      	lsls	r3, r3, #23
 8004002:	d505      	bpl.n	8004010 <__swrite+0x1c>
 8004004:	230e      	movs	r3, #14
 8004006:	5ec9      	ldrsh	r1, [r1, r3]
 8004008:	2200      	movs	r2, #0
 800400a:	2302      	movs	r3, #2
 800400c:	f000 f8e4 	bl	80041d8 <_lseek_r>
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	4a05      	ldr	r2, [pc, #20]	@ (8004028 <__swrite+0x34>)
 8004014:	0028      	movs	r0, r5
 8004016:	4013      	ands	r3, r2
 8004018:	81a3      	strh	r3, [r4, #12]
 800401a:	0032      	movs	r2, r6
 800401c:	230e      	movs	r3, #14
 800401e:	5ee1      	ldrsh	r1, [r4, r3]
 8004020:	003b      	movs	r3, r7
 8004022:	f000 f901 	bl	8004228 <_write_r>
 8004026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004028:	ffffefff 	.word	0xffffefff

0800402c <__sseek>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	000c      	movs	r4, r1
 8004030:	250e      	movs	r5, #14
 8004032:	5f49      	ldrsh	r1, [r1, r5]
 8004034:	f000 f8d0 	bl	80041d8 <_lseek_r>
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	1c42      	adds	r2, r0, #1
 800403c:	d103      	bne.n	8004046 <__sseek+0x1a>
 800403e:	4a05      	ldr	r2, [pc, #20]	@ (8004054 <__sseek+0x28>)
 8004040:	4013      	ands	r3, r2
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	bd70      	pop	{r4, r5, r6, pc}
 8004046:	2280      	movs	r2, #128	@ 0x80
 8004048:	0152      	lsls	r2, r2, #5
 800404a:	4313      	orrs	r3, r2
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004050:	e7f8      	b.n	8004044 <__sseek+0x18>
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	ffffefff 	.word	0xffffefff

08004058 <__sclose>:
 8004058:	b510      	push	{r4, lr}
 800405a:	230e      	movs	r3, #14
 800405c:	5ec9      	ldrsh	r1, [r1, r3]
 800405e:	f000 f8a9 	bl	80041b4 <_close_r>
 8004062:	bd10      	pop	{r4, pc}

08004064 <__swbuf_r>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	0006      	movs	r6, r0
 8004068:	000d      	movs	r5, r1
 800406a:	0014      	movs	r4, r2
 800406c:	2800      	cmp	r0, #0
 800406e:	d004      	beq.n	800407a <__swbuf_r+0x16>
 8004070:	6a03      	ldr	r3, [r0, #32]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <__swbuf_r+0x16>
 8004076:	f7ff fe4f 	bl	8003d18 <__sinit>
 800407a:	69a3      	ldr	r3, [r4, #24]
 800407c:	60a3      	str	r3, [r4, #8]
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	071b      	lsls	r3, r3, #28
 8004082:	d502      	bpl.n	800408a <__swbuf_r+0x26>
 8004084:	6923      	ldr	r3, [r4, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <__swbuf_r+0x3a>
 800408a:	0021      	movs	r1, r4
 800408c:	0030      	movs	r0, r6
 800408e:	f000 f82b 	bl	80040e8 <__swsetup_r>
 8004092:	2800      	cmp	r0, #0
 8004094:	d003      	beq.n	800409e <__swbuf_r+0x3a>
 8004096:	2501      	movs	r5, #1
 8004098:	426d      	negs	r5, r5
 800409a:	0028      	movs	r0, r5
 800409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	6820      	ldr	r0, [r4, #0]
 80040a2:	b2ef      	uxtb	r7, r5
 80040a4:	1ac0      	subs	r0, r0, r3
 80040a6:	6963      	ldr	r3, [r4, #20]
 80040a8:	b2ed      	uxtb	r5, r5
 80040aa:	4283      	cmp	r3, r0
 80040ac:	dc05      	bgt.n	80040ba <__swbuf_r+0x56>
 80040ae:	0021      	movs	r1, r4
 80040b0:	0030      	movs	r0, r6
 80040b2:	f000 fd49 	bl	8004b48 <_fflush_r>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d1ed      	bne.n	8004096 <__swbuf_r+0x32>
 80040ba:	68a3      	ldr	r3, [r4, #8]
 80040bc:	3001      	adds	r0, #1
 80040be:	3b01      	subs	r3, #1
 80040c0:	60a3      	str	r3, [r4, #8]
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	6022      	str	r2, [r4, #0]
 80040c8:	701f      	strb	r7, [r3, #0]
 80040ca:	6963      	ldr	r3, [r4, #20]
 80040cc:	4283      	cmp	r3, r0
 80040ce:	d004      	beq.n	80040da <__swbuf_r+0x76>
 80040d0:	89a3      	ldrh	r3, [r4, #12]
 80040d2:	07db      	lsls	r3, r3, #31
 80040d4:	d5e1      	bpl.n	800409a <__swbuf_r+0x36>
 80040d6:	2d0a      	cmp	r5, #10
 80040d8:	d1df      	bne.n	800409a <__swbuf_r+0x36>
 80040da:	0021      	movs	r1, r4
 80040dc:	0030      	movs	r0, r6
 80040de:	f000 fd33 	bl	8004b48 <_fflush_r>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d0d9      	beq.n	800409a <__swbuf_r+0x36>
 80040e6:	e7d6      	b.n	8004096 <__swbuf_r+0x32>

080040e8 <__swsetup_r>:
 80040e8:	4b2d      	ldr	r3, [pc, #180]	@ (80041a0 <__swsetup_r+0xb8>)
 80040ea:	b570      	push	{r4, r5, r6, lr}
 80040ec:	0005      	movs	r5, r0
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	000c      	movs	r4, r1
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d004      	beq.n	8004100 <__swsetup_r+0x18>
 80040f6:	6a03      	ldr	r3, [r0, #32]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <__swsetup_r+0x18>
 80040fc:	f7ff fe0c 	bl	8003d18 <__sinit>
 8004100:	230c      	movs	r3, #12
 8004102:	5ee2      	ldrsh	r2, [r4, r3]
 8004104:	0713      	lsls	r3, r2, #28
 8004106:	d423      	bmi.n	8004150 <__swsetup_r+0x68>
 8004108:	06d3      	lsls	r3, r2, #27
 800410a:	d407      	bmi.n	800411c <__swsetup_r+0x34>
 800410c:	2309      	movs	r3, #9
 800410e:	602b      	str	r3, [r5, #0]
 8004110:	2340      	movs	r3, #64	@ 0x40
 8004112:	2001      	movs	r0, #1
 8004114:	4313      	orrs	r3, r2
 8004116:	81a3      	strh	r3, [r4, #12]
 8004118:	4240      	negs	r0, r0
 800411a:	e03a      	b.n	8004192 <__swsetup_r+0xaa>
 800411c:	0752      	lsls	r2, r2, #29
 800411e:	d513      	bpl.n	8004148 <__swsetup_r+0x60>
 8004120:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004122:	2900      	cmp	r1, #0
 8004124:	d008      	beq.n	8004138 <__swsetup_r+0x50>
 8004126:	0023      	movs	r3, r4
 8004128:	3344      	adds	r3, #68	@ 0x44
 800412a:	4299      	cmp	r1, r3
 800412c:	d002      	beq.n	8004134 <__swsetup_r+0x4c>
 800412e:	0028      	movs	r0, r5
 8004130:	f000 f8bc 	bl	80042ac <_free_r>
 8004134:	2300      	movs	r3, #0
 8004136:	6363      	str	r3, [r4, #52]	@ 0x34
 8004138:	2224      	movs	r2, #36	@ 0x24
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	4393      	bics	r3, r2
 800413e:	81a3      	strh	r3, [r4, #12]
 8004140:	2300      	movs	r3, #0
 8004142:	6063      	str	r3, [r4, #4]
 8004144:	6923      	ldr	r3, [r4, #16]
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	2308      	movs	r3, #8
 800414a:	89a2      	ldrh	r2, [r4, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	81a3      	strh	r3, [r4, #12]
 8004150:	6923      	ldr	r3, [r4, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <__swsetup_r+0x86>
 8004156:	21a0      	movs	r1, #160	@ 0xa0
 8004158:	2280      	movs	r2, #128	@ 0x80
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	0089      	lsls	r1, r1, #2
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	400b      	ands	r3, r1
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <__swsetup_r+0x86>
 8004166:	0021      	movs	r1, r4
 8004168:	0028      	movs	r0, r5
 800416a:	f000 fd43 	bl	8004bf4 <__smakebuf_r>
 800416e:	230c      	movs	r3, #12
 8004170:	5ee2      	ldrsh	r2, [r4, r3]
 8004172:	2101      	movs	r1, #1
 8004174:	0013      	movs	r3, r2
 8004176:	400b      	ands	r3, r1
 8004178:	420a      	tst	r2, r1
 800417a:	d00b      	beq.n	8004194 <__swsetup_r+0xac>
 800417c:	2300      	movs	r3, #0
 800417e:	60a3      	str	r3, [r4, #8]
 8004180:	6963      	ldr	r3, [r4, #20]
 8004182:	425b      	negs	r3, r3
 8004184:	61a3      	str	r3, [r4, #24]
 8004186:	2000      	movs	r0, #0
 8004188:	6923      	ldr	r3, [r4, #16]
 800418a:	4283      	cmp	r3, r0
 800418c:	d101      	bne.n	8004192 <__swsetup_r+0xaa>
 800418e:	0613      	lsls	r3, r2, #24
 8004190:	d4be      	bmi.n	8004110 <__swsetup_r+0x28>
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	0791      	lsls	r1, r2, #30
 8004196:	d400      	bmi.n	800419a <__swsetup_r+0xb2>
 8004198:	6963      	ldr	r3, [r4, #20]
 800419a:	60a3      	str	r3, [r4, #8]
 800419c:	e7f3      	b.n	8004186 <__swsetup_r+0x9e>
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	20000018 	.word	0x20000018

080041a4 <memset>:
 80041a4:	0003      	movs	r3, r0
 80041a6:	1882      	adds	r2, r0, r2
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d100      	bne.n	80041ae <memset+0xa>
 80041ac:	4770      	bx	lr
 80041ae:	7019      	strb	r1, [r3, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	e7f9      	b.n	80041a8 <memset+0x4>

080041b4 <_close_r>:
 80041b4:	2300      	movs	r3, #0
 80041b6:	b570      	push	{r4, r5, r6, lr}
 80041b8:	4d06      	ldr	r5, [pc, #24]	@ (80041d4 <_close_r+0x20>)
 80041ba:	0004      	movs	r4, r0
 80041bc:	0008      	movs	r0, r1
 80041be:	602b      	str	r3, [r5, #0]
 80041c0:	f7fc fbc2 	bl	8000948 <_close>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d103      	bne.n	80041d0 <_close_r+0x1c>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d000      	beq.n	80041d0 <_close_r+0x1c>
 80041ce:	6023      	str	r3, [r4, #0]
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	200002b4 	.word	0x200002b4

080041d8 <_lseek_r>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	0004      	movs	r4, r0
 80041dc:	0008      	movs	r0, r1
 80041de:	0011      	movs	r1, r2
 80041e0:	001a      	movs	r2, r3
 80041e2:	2300      	movs	r3, #0
 80041e4:	4d05      	ldr	r5, [pc, #20]	@ (80041fc <_lseek_r+0x24>)
 80041e6:	602b      	str	r3, [r5, #0]
 80041e8:	f7fc fbc5 	bl	8000976 <_lseek>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d103      	bne.n	80041f8 <_lseek_r+0x20>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d000      	beq.n	80041f8 <_lseek_r+0x20>
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	bd70      	pop	{r4, r5, r6, pc}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	200002b4 	.word	0x200002b4

08004200 <_read_r>:
 8004200:	b570      	push	{r4, r5, r6, lr}
 8004202:	0004      	movs	r4, r0
 8004204:	0008      	movs	r0, r1
 8004206:	0011      	movs	r1, r2
 8004208:	001a      	movs	r2, r3
 800420a:	2300      	movs	r3, #0
 800420c:	4d05      	ldr	r5, [pc, #20]	@ (8004224 <_read_r+0x24>)
 800420e:	602b      	str	r3, [r5, #0]
 8004210:	f7fc fbc2 	bl	8000998 <_read>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	d103      	bne.n	8004220 <_read_r+0x20>
 8004218:	682b      	ldr	r3, [r5, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d000      	beq.n	8004220 <_read_r+0x20>
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	bd70      	pop	{r4, r5, r6, pc}
 8004222:	46c0      	nop			@ (mov r8, r8)
 8004224:	200002b4 	.word	0x200002b4

08004228 <_write_r>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	0004      	movs	r4, r0
 800422c:	0008      	movs	r0, r1
 800422e:	0011      	movs	r1, r2
 8004230:	001a      	movs	r2, r3
 8004232:	2300      	movs	r3, #0
 8004234:	4d05      	ldr	r5, [pc, #20]	@ (800424c <_write_r+0x24>)
 8004236:	602b      	str	r3, [r5, #0]
 8004238:	f7fc fb58 	bl	80008ec <_write>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d103      	bne.n	8004248 <_write_r+0x20>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d000      	beq.n	8004248 <_write_r+0x20>
 8004246:	6023      	str	r3, [r4, #0]
 8004248:	bd70      	pop	{r4, r5, r6, pc}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	200002b4 	.word	0x200002b4

08004250 <__errno>:
 8004250:	4b01      	ldr	r3, [pc, #4]	@ (8004258 <__errno+0x8>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	4770      	bx	lr
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	20000018 	.word	0x20000018

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	2600      	movs	r6, #0
 8004260:	4c0c      	ldr	r4, [pc, #48]	@ (8004294 <__libc_init_array+0x38>)
 8004262:	4d0d      	ldr	r5, [pc, #52]	@ (8004298 <__libc_init_array+0x3c>)
 8004264:	1b64      	subs	r4, r4, r5
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	42a6      	cmp	r6, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	2600      	movs	r6, #0
 800426e:	f000 fd45 	bl	8004cfc <_init>
 8004272:	4c0a      	ldr	r4, [pc, #40]	@ (800429c <__libc_init_array+0x40>)
 8004274:	4d0a      	ldr	r5, [pc, #40]	@ (80042a0 <__libc_init_array+0x44>)
 8004276:	1b64      	subs	r4, r4, r5
 8004278:	10a4      	asrs	r4, r4, #2
 800427a:	42a6      	cmp	r6, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	00b3      	lsls	r3, r6, #2
 8004282:	58eb      	ldr	r3, [r5, r3]
 8004284:	4798      	blx	r3
 8004286:	3601      	adds	r6, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	00b3      	lsls	r3, r6, #2
 800428c:	58eb      	ldr	r3, [r5, r3]
 800428e:	4798      	blx	r3
 8004290:	3601      	adds	r6, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	08004ef8 	.word	0x08004ef8
 8004298:	08004ef8 	.word	0x08004ef8
 800429c:	08004efc 	.word	0x08004efc
 80042a0:	08004ef8 	.word	0x08004ef8

080042a4 <__retarget_lock_init_recursive>:
 80042a4:	4770      	bx	lr

080042a6 <__retarget_lock_acquire_recursive>:
 80042a6:	4770      	bx	lr

080042a8 <__retarget_lock_release_recursive>:
 80042a8:	4770      	bx	lr
	...

080042ac <_free_r>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	0005      	movs	r5, r0
 80042b0:	1e0c      	subs	r4, r1, #0
 80042b2:	d010      	beq.n	80042d6 <_free_r+0x2a>
 80042b4:	3c04      	subs	r4, #4
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	da00      	bge.n	80042be <_free_r+0x12>
 80042bc:	18e4      	adds	r4, r4, r3
 80042be:	0028      	movs	r0, r5
 80042c0:	f000 f8ea 	bl	8004498 <__malloc_lock>
 80042c4:	4a1d      	ldr	r2, [pc, #116]	@ (800433c <_free_r+0x90>)
 80042c6:	6813      	ldr	r3, [r2, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d105      	bne.n	80042d8 <_free_r+0x2c>
 80042cc:	6063      	str	r3, [r4, #4]
 80042ce:	6014      	str	r4, [r2, #0]
 80042d0:	0028      	movs	r0, r5
 80042d2:	f000 f8e9 	bl	80044a8 <__malloc_unlock>
 80042d6:	bd70      	pop	{r4, r5, r6, pc}
 80042d8:	42a3      	cmp	r3, r4
 80042da:	d908      	bls.n	80042ee <_free_r+0x42>
 80042dc:	6820      	ldr	r0, [r4, #0]
 80042de:	1821      	adds	r1, r4, r0
 80042e0:	428b      	cmp	r3, r1
 80042e2:	d1f3      	bne.n	80042cc <_free_r+0x20>
 80042e4:	6819      	ldr	r1, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	1809      	adds	r1, r1, r0
 80042ea:	6021      	str	r1, [r4, #0]
 80042ec:	e7ee      	b.n	80042cc <_free_r+0x20>
 80042ee:	001a      	movs	r2, r3
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <_free_r+0x4e>
 80042f6:	42a3      	cmp	r3, r4
 80042f8:	d9f9      	bls.n	80042ee <_free_r+0x42>
 80042fa:	6811      	ldr	r1, [r2, #0]
 80042fc:	1850      	adds	r0, r2, r1
 80042fe:	42a0      	cmp	r0, r4
 8004300:	d10b      	bne.n	800431a <_free_r+0x6e>
 8004302:	6820      	ldr	r0, [r4, #0]
 8004304:	1809      	adds	r1, r1, r0
 8004306:	1850      	adds	r0, r2, r1
 8004308:	6011      	str	r1, [r2, #0]
 800430a:	4283      	cmp	r3, r0
 800430c:	d1e0      	bne.n	80042d0 <_free_r+0x24>
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	1841      	adds	r1, r0, r1
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	6053      	str	r3, [r2, #4]
 8004318:	e7da      	b.n	80042d0 <_free_r+0x24>
 800431a:	42a0      	cmp	r0, r4
 800431c:	d902      	bls.n	8004324 <_free_r+0x78>
 800431e:	230c      	movs	r3, #12
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	e7d5      	b.n	80042d0 <_free_r+0x24>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	1821      	adds	r1, r4, r0
 8004328:	428b      	cmp	r3, r1
 800432a:	d103      	bne.n	8004334 <_free_r+0x88>
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	1809      	adds	r1, r1, r0
 8004332:	6021      	str	r1, [r4, #0]
 8004334:	6063      	str	r3, [r4, #4]
 8004336:	6054      	str	r4, [r2, #4]
 8004338:	e7ca      	b.n	80042d0 <_free_r+0x24>
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	200002c0 	.word	0x200002c0

08004340 <malloc>:
 8004340:	b510      	push	{r4, lr}
 8004342:	4b03      	ldr	r3, [pc, #12]	@ (8004350 <malloc+0x10>)
 8004344:	0001      	movs	r1, r0
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f000 f826 	bl	8004398 <_malloc_r>
 800434c:	bd10      	pop	{r4, pc}
 800434e:	46c0      	nop			@ (mov r8, r8)
 8004350:	20000018 	.word	0x20000018

08004354 <sbrk_aligned>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	4e0f      	ldr	r6, [pc, #60]	@ (8004394 <sbrk_aligned+0x40>)
 8004358:	000d      	movs	r5, r1
 800435a:	6831      	ldr	r1, [r6, #0]
 800435c:	0004      	movs	r4, r0
 800435e:	2900      	cmp	r1, #0
 8004360:	d102      	bne.n	8004368 <sbrk_aligned+0x14>
 8004362:	f000 fcad 	bl	8004cc0 <_sbrk_r>
 8004366:	6030      	str	r0, [r6, #0]
 8004368:	0029      	movs	r1, r5
 800436a:	0020      	movs	r0, r4
 800436c:	f000 fca8 	bl	8004cc0 <_sbrk_r>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	d103      	bne.n	800437c <sbrk_aligned+0x28>
 8004374:	2501      	movs	r5, #1
 8004376:	426d      	negs	r5, r5
 8004378:	0028      	movs	r0, r5
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	2303      	movs	r3, #3
 800437e:	1cc5      	adds	r5, r0, #3
 8004380:	439d      	bics	r5, r3
 8004382:	42a8      	cmp	r0, r5
 8004384:	d0f8      	beq.n	8004378 <sbrk_aligned+0x24>
 8004386:	1a29      	subs	r1, r5, r0
 8004388:	0020      	movs	r0, r4
 800438a:	f000 fc99 	bl	8004cc0 <_sbrk_r>
 800438e:	3001      	adds	r0, #1
 8004390:	d1f2      	bne.n	8004378 <sbrk_aligned+0x24>
 8004392:	e7ef      	b.n	8004374 <sbrk_aligned+0x20>
 8004394:	200002bc 	.word	0x200002bc

08004398 <_malloc_r>:
 8004398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800439a:	2203      	movs	r2, #3
 800439c:	1ccb      	adds	r3, r1, #3
 800439e:	4393      	bics	r3, r2
 80043a0:	3308      	adds	r3, #8
 80043a2:	0005      	movs	r5, r0
 80043a4:	001f      	movs	r7, r3
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	d234      	bcs.n	8004414 <_malloc_r+0x7c>
 80043aa:	270c      	movs	r7, #12
 80043ac:	42b9      	cmp	r1, r7
 80043ae:	d833      	bhi.n	8004418 <_malloc_r+0x80>
 80043b0:	0028      	movs	r0, r5
 80043b2:	f000 f871 	bl	8004498 <__malloc_lock>
 80043b6:	4e37      	ldr	r6, [pc, #220]	@ (8004494 <_malloc_r+0xfc>)
 80043b8:	6833      	ldr	r3, [r6, #0]
 80043ba:	001c      	movs	r4, r3
 80043bc:	2c00      	cmp	r4, #0
 80043be:	d12f      	bne.n	8004420 <_malloc_r+0x88>
 80043c0:	0039      	movs	r1, r7
 80043c2:	0028      	movs	r0, r5
 80043c4:	f7ff ffc6 	bl	8004354 <sbrk_aligned>
 80043c8:	0004      	movs	r4, r0
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	d15f      	bne.n	800448e <_malloc_r+0xf6>
 80043ce:	6834      	ldr	r4, [r6, #0]
 80043d0:	9400      	str	r4, [sp, #0]
 80043d2:	9b00      	ldr	r3, [sp, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d14a      	bne.n	800446e <_malloc_r+0xd6>
 80043d8:	2c00      	cmp	r4, #0
 80043da:	d052      	beq.n	8004482 <_malloc_r+0xea>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	0028      	movs	r0, r5
 80043e0:	18e3      	adds	r3, r4, r3
 80043e2:	9900      	ldr	r1, [sp, #0]
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	f000 fc6b 	bl	8004cc0 <_sbrk_r>
 80043ea:	9b01      	ldr	r3, [sp, #4]
 80043ec:	4283      	cmp	r3, r0
 80043ee:	d148      	bne.n	8004482 <_malloc_r+0xea>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	0028      	movs	r0, r5
 80043f4:	1aff      	subs	r7, r7, r3
 80043f6:	0039      	movs	r1, r7
 80043f8:	f7ff ffac 	bl	8004354 <sbrk_aligned>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d040      	beq.n	8004482 <_malloc_r+0xea>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	19db      	adds	r3, r3, r7
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	6833      	ldr	r3, [r6, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	2a00      	cmp	r2, #0
 800440c:	d133      	bne.n	8004476 <_malloc_r+0xde>
 800440e:	9b00      	ldr	r3, [sp, #0]
 8004410:	6033      	str	r3, [r6, #0]
 8004412:	e019      	b.n	8004448 <_malloc_r+0xb0>
 8004414:	2b00      	cmp	r3, #0
 8004416:	dac9      	bge.n	80043ac <_malloc_r+0x14>
 8004418:	230c      	movs	r3, #12
 800441a:	602b      	str	r3, [r5, #0]
 800441c:	2000      	movs	r0, #0
 800441e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004420:	6821      	ldr	r1, [r4, #0]
 8004422:	1bc9      	subs	r1, r1, r7
 8004424:	d420      	bmi.n	8004468 <_malloc_r+0xd0>
 8004426:	290b      	cmp	r1, #11
 8004428:	d90a      	bls.n	8004440 <_malloc_r+0xa8>
 800442a:	19e2      	adds	r2, r4, r7
 800442c:	6027      	str	r7, [r4, #0]
 800442e:	42a3      	cmp	r3, r4
 8004430:	d104      	bne.n	800443c <_malloc_r+0xa4>
 8004432:	6032      	str	r2, [r6, #0]
 8004434:	6863      	ldr	r3, [r4, #4]
 8004436:	6011      	str	r1, [r2, #0]
 8004438:	6053      	str	r3, [r2, #4]
 800443a:	e005      	b.n	8004448 <_malloc_r+0xb0>
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	e7f9      	b.n	8004434 <_malloc_r+0x9c>
 8004440:	6862      	ldr	r2, [r4, #4]
 8004442:	42a3      	cmp	r3, r4
 8004444:	d10e      	bne.n	8004464 <_malloc_r+0xcc>
 8004446:	6032      	str	r2, [r6, #0]
 8004448:	0028      	movs	r0, r5
 800444a:	f000 f82d 	bl	80044a8 <__malloc_unlock>
 800444e:	0020      	movs	r0, r4
 8004450:	2207      	movs	r2, #7
 8004452:	300b      	adds	r0, #11
 8004454:	1d23      	adds	r3, r4, #4
 8004456:	4390      	bics	r0, r2
 8004458:	1ac2      	subs	r2, r0, r3
 800445a:	4298      	cmp	r0, r3
 800445c:	d0df      	beq.n	800441e <_malloc_r+0x86>
 800445e:	1a1b      	subs	r3, r3, r0
 8004460:	50a3      	str	r3, [r4, r2]
 8004462:	e7dc      	b.n	800441e <_malloc_r+0x86>
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	e7ef      	b.n	8004448 <_malloc_r+0xb0>
 8004468:	0023      	movs	r3, r4
 800446a:	6864      	ldr	r4, [r4, #4]
 800446c:	e7a6      	b.n	80043bc <_malloc_r+0x24>
 800446e:	9c00      	ldr	r4, [sp, #0]
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	e7ad      	b.n	80043d2 <_malloc_r+0x3a>
 8004476:	001a      	movs	r2, r3
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	42a3      	cmp	r3, r4
 800447c:	d1fb      	bne.n	8004476 <_malloc_r+0xde>
 800447e:	2300      	movs	r3, #0
 8004480:	e7da      	b.n	8004438 <_malloc_r+0xa0>
 8004482:	230c      	movs	r3, #12
 8004484:	0028      	movs	r0, r5
 8004486:	602b      	str	r3, [r5, #0]
 8004488:	f000 f80e 	bl	80044a8 <__malloc_unlock>
 800448c:	e7c6      	b.n	800441c <_malloc_r+0x84>
 800448e:	6007      	str	r7, [r0, #0]
 8004490:	e7da      	b.n	8004448 <_malloc_r+0xb0>
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	200002c0 	.word	0x200002c0

08004498 <__malloc_lock>:
 8004498:	b510      	push	{r4, lr}
 800449a:	4802      	ldr	r0, [pc, #8]	@ (80044a4 <__malloc_lock+0xc>)
 800449c:	f7ff ff03 	bl	80042a6 <__retarget_lock_acquire_recursive>
 80044a0:	bd10      	pop	{r4, pc}
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	200002b8 	.word	0x200002b8

080044a8 <__malloc_unlock>:
 80044a8:	b510      	push	{r4, lr}
 80044aa:	4802      	ldr	r0, [pc, #8]	@ (80044b4 <__malloc_unlock+0xc>)
 80044ac:	f7ff fefc 	bl	80042a8 <__retarget_lock_release_recursive>
 80044b0:	bd10      	pop	{r4, pc}
 80044b2:	46c0      	nop			@ (mov r8, r8)
 80044b4:	200002b8 	.word	0x200002b8

080044b8 <__sfputc_r>:
 80044b8:	6893      	ldr	r3, [r2, #8]
 80044ba:	b510      	push	{r4, lr}
 80044bc:	3b01      	subs	r3, #1
 80044be:	6093      	str	r3, [r2, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	da04      	bge.n	80044ce <__sfputc_r+0x16>
 80044c4:	6994      	ldr	r4, [r2, #24]
 80044c6:	42a3      	cmp	r3, r4
 80044c8:	db07      	blt.n	80044da <__sfputc_r+0x22>
 80044ca:	290a      	cmp	r1, #10
 80044cc:	d005      	beq.n	80044da <__sfputc_r+0x22>
 80044ce:	6813      	ldr	r3, [r2, #0]
 80044d0:	1c58      	adds	r0, r3, #1
 80044d2:	6010      	str	r0, [r2, #0]
 80044d4:	7019      	strb	r1, [r3, #0]
 80044d6:	0008      	movs	r0, r1
 80044d8:	bd10      	pop	{r4, pc}
 80044da:	f7ff fdc3 	bl	8004064 <__swbuf_r>
 80044de:	0001      	movs	r1, r0
 80044e0:	e7f9      	b.n	80044d6 <__sfputc_r+0x1e>

080044e2 <__sfputs_r>:
 80044e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e4:	0006      	movs	r6, r0
 80044e6:	000f      	movs	r7, r1
 80044e8:	0014      	movs	r4, r2
 80044ea:	18d5      	adds	r5, r2, r3
 80044ec:	42ac      	cmp	r4, r5
 80044ee:	d101      	bne.n	80044f4 <__sfputs_r+0x12>
 80044f0:	2000      	movs	r0, #0
 80044f2:	e007      	b.n	8004504 <__sfputs_r+0x22>
 80044f4:	7821      	ldrb	r1, [r4, #0]
 80044f6:	003a      	movs	r2, r7
 80044f8:	0030      	movs	r0, r6
 80044fa:	f7ff ffdd 	bl	80044b8 <__sfputc_r>
 80044fe:	3401      	adds	r4, #1
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d1f3      	bne.n	80044ec <__sfputs_r+0xa>
 8004504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004508 <_vfiprintf_r>:
 8004508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450a:	b0a1      	sub	sp, #132	@ 0x84
 800450c:	000f      	movs	r7, r1
 800450e:	0015      	movs	r5, r2
 8004510:	001e      	movs	r6, r3
 8004512:	9003      	str	r0, [sp, #12]
 8004514:	2800      	cmp	r0, #0
 8004516:	d004      	beq.n	8004522 <_vfiprintf_r+0x1a>
 8004518:	6a03      	ldr	r3, [r0, #32]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <_vfiprintf_r+0x1a>
 800451e:	f7ff fbfb 	bl	8003d18 <__sinit>
 8004522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004524:	07db      	lsls	r3, r3, #31
 8004526:	d405      	bmi.n	8004534 <_vfiprintf_r+0x2c>
 8004528:	89bb      	ldrh	r3, [r7, #12]
 800452a:	059b      	lsls	r3, r3, #22
 800452c:	d402      	bmi.n	8004534 <_vfiprintf_r+0x2c>
 800452e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004530:	f7ff feb9 	bl	80042a6 <__retarget_lock_acquire_recursive>
 8004534:	89bb      	ldrh	r3, [r7, #12]
 8004536:	071b      	lsls	r3, r3, #28
 8004538:	d502      	bpl.n	8004540 <_vfiprintf_r+0x38>
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d113      	bne.n	8004568 <_vfiprintf_r+0x60>
 8004540:	0039      	movs	r1, r7
 8004542:	9803      	ldr	r0, [sp, #12]
 8004544:	f7ff fdd0 	bl	80040e8 <__swsetup_r>
 8004548:	2800      	cmp	r0, #0
 800454a:	d00d      	beq.n	8004568 <_vfiprintf_r+0x60>
 800454c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800454e:	07db      	lsls	r3, r3, #31
 8004550:	d503      	bpl.n	800455a <_vfiprintf_r+0x52>
 8004552:	2001      	movs	r0, #1
 8004554:	4240      	negs	r0, r0
 8004556:	b021      	add	sp, #132	@ 0x84
 8004558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455a:	89bb      	ldrh	r3, [r7, #12]
 800455c:	059b      	lsls	r3, r3, #22
 800455e:	d4f8      	bmi.n	8004552 <_vfiprintf_r+0x4a>
 8004560:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004562:	f7ff fea1 	bl	80042a8 <__retarget_lock_release_recursive>
 8004566:	e7f4      	b.n	8004552 <_vfiprintf_r+0x4a>
 8004568:	2300      	movs	r3, #0
 800456a:	ac08      	add	r4, sp, #32
 800456c:	6163      	str	r3, [r4, #20]
 800456e:	3320      	adds	r3, #32
 8004570:	7663      	strb	r3, [r4, #25]
 8004572:	3310      	adds	r3, #16
 8004574:	76a3      	strb	r3, [r4, #26]
 8004576:	9607      	str	r6, [sp, #28]
 8004578:	002e      	movs	r6, r5
 800457a:	7833      	ldrb	r3, [r6, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <_vfiprintf_r+0x7c>
 8004580:	2b25      	cmp	r3, #37	@ 0x25
 8004582:	d148      	bne.n	8004616 <_vfiprintf_r+0x10e>
 8004584:	1b73      	subs	r3, r6, r5
 8004586:	9305      	str	r3, [sp, #20]
 8004588:	42ae      	cmp	r6, r5
 800458a:	d00b      	beq.n	80045a4 <_vfiprintf_r+0x9c>
 800458c:	002a      	movs	r2, r5
 800458e:	0039      	movs	r1, r7
 8004590:	9803      	ldr	r0, [sp, #12]
 8004592:	f7ff ffa6 	bl	80044e2 <__sfputs_r>
 8004596:	3001      	adds	r0, #1
 8004598:	d100      	bne.n	800459c <_vfiprintf_r+0x94>
 800459a:	e0ae      	b.n	80046fa <_vfiprintf_r+0x1f2>
 800459c:	6963      	ldr	r3, [r4, #20]
 800459e:	9a05      	ldr	r2, [sp, #20]
 80045a0:	189b      	adds	r3, r3, r2
 80045a2:	6163      	str	r3, [r4, #20]
 80045a4:	7833      	ldrb	r3, [r6, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d100      	bne.n	80045ac <_vfiprintf_r+0xa4>
 80045aa:	e0a6      	b.n	80046fa <_vfiprintf_r+0x1f2>
 80045ac:	2201      	movs	r2, #1
 80045ae:	2300      	movs	r3, #0
 80045b0:	4252      	negs	r2, r2
 80045b2:	6062      	str	r2, [r4, #4]
 80045b4:	a904      	add	r1, sp, #16
 80045b6:	3254      	adds	r2, #84	@ 0x54
 80045b8:	1852      	adds	r2, r2, r1
 80045ba:	1c75      	adds	r5, r6, #1
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	60e3      	str	r3, [r4, #12]
 80045c0:	60a3      	str	r3, [r4, #8]
 80045c2:	7013      	strb	r3, [r2, #0]
 80045c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80045c6:	4b59      	ldr	r3, [pc, #356]	@ (800472c <_vfiprintf_r+0x224>)
 80045c8:	2205      	movs	r2, #5
 80045ca:	0018      	movs	r0, r3
 80045cc:	7829      	ldrb	r1, [r5, #0]
 80045ce:	9305      	str	r3, [sp, #20]
 80045d0:	f000 fb88 	bl	8004ce4 <memchr>
 80045d4:	1c6e      	adds	r6, r5, #1
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d11f      	bne.n	800461a <_vfiprintf_r+0x112>
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	06d3      	lsls	r3, r2, #27
 80045de:	d504      	bpl.n	80045ea <_vfiprintf_r+0xe2>
 80045e0:	2353      	movs	r3, #83	@ 0x53
 80045e2:	a904      	add	r1, sp, #16
 80045e4:	185b      	adds	r3, r3, r1
 80045e6:	2120      	movs	r1, #32
 80045e8:	7019      	strb	r1, [r3, #0]
 80045ea:	0713      	lsls	r3, r2, #28
 80045ec:	d504      	bpl.n	80045f8 <_vfiprintf_r+0xf0>
 80045ee:	2353      	movs	r3, #83	@ 0x53
 80045f0:	a904      	add	r1, sp, #16
 80045f2:	185b      	adds	r3, r3, r1
 80045f4:	212b      	movs	r1, #43	@ 0x2b
 80045f6:	7019      	strb	r1, [r3, #0]
 80045f8:	782b      	ldrb	r3, [r5, #0]
 80045fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80045fc:	d016      	beq.n	800462c <_vfiprintf_r+0x124>
 80045fe:	002e      	movs	r6, r5
 8004600:	2100      	movs	r1, #0
 8004602:	200a      	movs	r0, #10
 8004604:	68e3      	ldr	r3, [r4, #12]
 8004606:	7832      	ldrb	r2, [r6, #0]
 8004608:	1c75      	adds	r5, r6, #1
 800460a:	3a30      	subs	r2, #48	@ 0x30
 800460c:	2a09      	cmp	r2, #9
 800460e:	d950      	bls.n	80046b2 <_vfiprintf_r+0x1aa>
 8004610:	2900      	cmp	r1, #0
 8004612:	d111      	bne.n	8004638 <_vfiprintf_r+0x130>
 8004614:	e017      	b.n	8004646 <_vfiprintf_r+0x13e>
 8004616:	3601      	adds	r6, #1
 8004618:	e7af      	b.n	800457a <_vfiprintf_r+0x72>
 800461a:	9b05      	ldr	r3, [sp, #20]
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	1ac0      	subs	r0, r0, r3
 8004620:	2301      	movs	r3, #1
 8004622:	4083      	lsls	r3, r0
 8004624:	4313      	orrs	r3, r2
 8004626:	0035      	movs	r5, r6
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	e7cc      	b.n	80045c6 <_vfiprintf_r+0xbe>
 800462c:	9b07      	ldr	r3, [sp, #28]
 800462e:	1d19      	adds	r1, r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	9107      	str	r1, [sp, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	db01      	blt.n	800463c <_vfiprintf_r+0x134>
 8004638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800463a:	e004      	b.n	8004646 <_vfiprintf_r+0x13e>
 800463c:	425b      	negs	r3, r3
 800463e:	60e3      	str	r3, [r4, #12]
 8004640:	2302      	movs	r3, #2
 8004642:	4313      	orrs	r3, r2
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	7833      	ldrb	r3, [r6, #0]
 8004648:	2b2e      	cmp	r3, #46	@ 0x2e
 800464a:	d10c      	bne.n	8004666 <_vfiprintf_r+0x15e>
 800464c:	7873      	ldrb	r3, [r6, #1]
 800464e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004650:	d134      	bne.n	80046bc <_vfiprintf_r+0x1b4>
 8004652:	9b07      	ldr	r3, [sp, #28]
 8004654:	3602      	adds	r6, #2
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	9207      	str	r2, [sp, #28]
 800465c:	2b00      	cmp	r3, #0
 800465e:	da01      	bge.n	8004664 <_vfiprintf_r+0x15c>
 8004660:	2301      	movs	r3, #1
 8004662:	425b      	negs	r3, r3
 8004664:	9309      	str	r3, [sp, #36]	@ 0x24
 8004666:	4d32      	ldr	r5, [pc, #200]	@ (8004730 <_vfiprintf_r+0x228>)
 8004668:	2203      	movs	r2, #3
 800466a:	0028      	movs	r0, r5
 800466c:	7831      	ldrb	r1, [r6, #0]
 800466e:	f000 fb39 	bl	8004ce4 <memchr>
 8004672:	2800      	cmp	r0, #0
 8004674:	d006      	beq.n	8004684 <_vfiprintf_r+0x17c>
 8004676:	2340      	movs	r3, #64	@ 0x40
 8004678:	1b40      	subs	r0, r0, r5
 800467a:	4083      	lsls	r3, r0
 800467c:	6822      	ldr	r2, [r4, #0]
 800467e:	3601      	adds	r6, #1
 8004680:	4313      	orrs	r3, r2
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	7831      	ldrb	r1, [r6, #0]
 8004686:	2206      	movs	r2, #6
 8004688:	482a      	ldr	r0, [pc, #168]	@ (8004734 <_vfiprintf_r+0x22c>)
 800468a:	1c75      	adds	r5, r6, #1
 800468c:	7621      	strb	r1, [r4, #24]
 800468e:	f000 fb29 	bl	8004ce4 <memchr>
 8004692:	2800      	cmp	r0, #0
 8004694:	d040      	beq.n	8004718 <_vfiprintf_r+0x210>
 8004696:	4b28      	ldr	r3, [pc, #160]	@ (8004738 <_vfiprintf_r+0x230>)
 8004698:	2b00      	cmp	r3, #0
 800469a:	d122      	bne.n	80046e2 <_vfiprintf_r+0x1da>
 800469c:	2207      	movs	r2, #7
 800469e:	9b07      	ldr	r3, [sp, #28]
 80046a0:	3307      	adds	r3, #7
 80046a2:	4393      	bics	r3, r2
 80046a4:	3308      	adds	r3, #8
 80046a6:	9307      	str	r3, [sp, #28]
 80046a8:	6963      	ldr	r3, [r4, #20]
 80046aa:	9a04      	ldr	r2, [sp, #16]
 80046ac:	189b      	adds	r3, r3, r2
 80046ae:	6163      	str	r3, [r4, #20]
 80046b0:	e762      	b.n	8004578 <_vfiprintf_r+0x70>
 80046b2:	4343      	muls	r3, r0
 80046b4:	002e      	movs	r6, r5
 80046b6:	2101      	movs	r1, #1
 80046b8:	189b      	adds	r3, r3, r2
 80046ba:	e7a4      	b.n	8004606 <_vfiprintf_r+0xfe>
 80046bc:	2300      	movs	r3, #0
 80046be:	200a      	movs	r0, #10
 80046c0:	0019      	movs	r1, r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	6063      	str	r3, [r4, #4]
 80046c6:	7832      	ldrb	r2, [r6, #0]
 80046c8:	1c75      	adds	r5, r6, #1
 80046ca:	3a30      	subs	r2, #48	@ 0x30
 80046cc:	2a09      	cmp	r2, #9
 80046ce:	d903      	bls.n	80046d8 <_vfiprintf_r+0x1d0>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0c8      	beq.n	8004666 <_vfiprintf_r+0x15e>
 80046d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80046d6:	e7c6      	b.n	8004666 <_vfiprintf_r+0x15e>
 80046d8:	4341      	muls	r1, r0
 80046da:	002e      	movs	r6, r5
 80046dc:	2301      	movs	r3, #1
 80046de:	1889      	adds	r1, r1, r2
 80046e0:	e7f1      	b.n	80046c6 <_vfiprintf_r+0x1be>
 80046e2:	aa07      	add	r2, sp, #28
 80046e4:	9200      	str	r2, [sp, #0]
 80046e6:	0021      	movs	r1, r4
 80046e8:	003a      	movs	r2, r7
 80046ea:	4b14      	ldr	r3, [pc, #80]	@ (800473c <_vfiprintf_r+0x234>)
 80046ec:	9803      	ldr	r0, [sp, #12]
 80046ee:	e000      	b.n	80046f2 <_vfiprintf_r+0x1ea>
 80046f0:	bf00      	nop
 80046f2:	9004      	str	r0, [sp, #16]
 80046f4:	9b04      	ldr	r3, [sp, #16]
 80046f6:	3301      	adds	r3, #1
 80046f8:	d1d6      	bne.n	80046a8 <_vfiprintf_r+0x1a0>
 80046fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046fc:	07db      	lsls	r3, r3, #31
 80046fe:	d405      	bmi.n	800470c <_vfiprintf_r+0x204>
 8004700:	89bb      	ldrh	r3, [r7, #12]
 8004702:	059b      	lsls	r3, r3, #22
 8004704:	d402      	bmi.n	800470c <_vfiprintf_r+0x204>
 8004706:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004708:	f7ff fdce 	bl	80042a8 <__retarget_lock_release_recursive>
 800470c:	89bb      	ldrh	r3, [r7, #12]
 800470e:	065b      	lsls	r3, r3, #25
 8004710:	d500      	bpl.n	8004714 <_vfiprintf_r+0x20c>
 8004712:	e71e      	b.n	8004552 <_vfiprintf_r+0x4a>
 8004714:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004716:	e71e      	b.n	8004556 <_vfiprintf_r+0x4e>
 8004718:	aa07      	add	r2, sp, #28
 800471a:	9200      	str	r2, [sp, #0]
 800471c:	0021      	movs	r1, r4
 800471e:	003a      	movs	r2, r7
 8004720:	4b06      	ldr	r3, [pc, #24]	@ (800473c <_vfiprintf_r+0x234>)
 8004722:	9803      	ldr	r0, [sp, #12]
 8004724:	f000 f87c 	bl	8004820 <_printf_i>
 8004728:	e7e3      	b.n	80046f2 <_vfiprintf_r+0x1ea>
 800472a:	46c0      	nop			@ (mov r8, r8)
 800472c:	08004ec4 	.word	0x08004ec4
 8004730:	08004eca 	.word	0x08004eca
 8004734:	08004ece 	.word	0x08004ece
 8004738:	00000000 	.word	0x00000000
 800473c:	080044e3 	.word	0x080044e3

08004740 <_printf_common>:
 8004740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004742:	0016      	movs	r6, r2
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	688a      	ldr	r2, [r1, #8]
 8004748:	690b      	ldr	r3, [r1, #16]
 800474a:	000c      	movs	r4, r1
 800474c:	9000      	str	r0, [sp, #0]
 800474e:	4293      	cmp	r3, r2
 8004750:	da00      	bge.n	8004754 <_printf_common+0x14>
 8004752:	0013      	movs	r3, r2
 8004754:	0022      	movs	r2, r4
 8004756:	6033      	str	r3, [r6, #0]
 8004758:	3243      	adds	r2, #67	@ 0x43
 800475a:	7812      	ldrb	r2, [r2, #0]
 800475c:	2a00      	cmp	r2, #0
 800475e:	d001      	beq.n	8004764 <_printf_common+0x24>
 8004760:	3301      	adds	r3, #1
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	069b      	lsls	r3, r3, #26
 8004768:	d502      	bpl.n	8004770 <_printf_common+0x30>
 800476a:	6833      	ldr	r3, [r6, #0]
 800476c:	3302      	adds	r3, #2
 800476e:	6033      	str	r3, [r6, #0]
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	2306      	movs	r3, #6
 8004774:	0015      	movs	r5, r2
 8004776:	401d      	ands	r5, r3
 8004778:	421a      	tst	r2, r3
 800477a:	d027      	beq.n	80047cc <_printf_common+0x8c>
 800477c:	0023      	movs	r3, r4
 800477e:	3343      	adds	r3, #67	@ 0x43
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	1e5a      	subs	r2, r3, #1
 8004784:	4193      	sbcs	r3, r2
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	0692      	lsls	r2, r2, #26
 800478a:	d430      	bmi.n	80047ee <_printf_common+0xae>
 800478c:	0022      	movs	r2, r4
 800478e:	9901      	ldr	r1, [sp, #4]
 8004790:	9800      	ldr	r0, [sp, #0]
 8004792:	9d08      	ldr	r5, [sp, #32]
 8004794:	3243      	adds	r2, #67	@ 0x43
 8004796:	47a8      	blx	r5
 8004798:	3001      	adds	r0, #1
 800479a:	d025      	beq.n	80047e8 <_printf_common+0xa8>
 800479c:	2206      	movs	r2, #6
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	2500      	movs	r5, #0
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d105      	bne.n	80047b4 <_printf_common+0x74>
 80047a8:	6833      	ldr	r3, [r6, #0]
 80047aa:	68e5      	ldr	r5, [r4, #12]
 80047ac:	1aed      	subs	r5, r5, r3
 80047ae:	43eb      	mvns	r3, r5
 80047b0:	17db      	asrs	r3, r3, #31
 80047b2:	401d      	ands	r5, r3
 80047b4:	68a3      	ldr	r3, [r4, #8]
 80047b6:	6922      	ldr	r2, [r4, #16]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	dd01      	ble.n	80047c0 <_printf_common+0x80>
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	18ed      	adds	r5, r5, r3
 80047c0:	2600      	movs	r6, #0
 80047c2:	42b5      	cmp	r5, r6
 80047c4:	d120      	bne.n	8004808 <_printf_common+0xc8>
 80047c6:	2000      	movs	r0, #0
 80047c8:	e010      	b.n	80047ec <_printf_common+0xac>
 80047ca:	3501      	adds	r5, #1
 80047cc:	68e3      	ldr	r3, [r4, #12]
 80047ce:	6832      	ldr	r2, [r6, #0]
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	42ab      	cmp	r3, r5
 80047d4:	ddd2      	ble.n	800477c <_printf_common+0x3c>
 80047d6:	0022      	movs	r2, r4
 80047d8:	2301      	movs	r3, #1
 80047da:	9901      	ldr	r1, [sp, #4]
 80047dc:	9800      	ldr	r0, [sp, #0]
 80047de:	9f08      	ldr	r7, [sp, #32]
 80047e0:	3219      	adds	r2, #25
 80047e2:	47b8      	blx	r7
 80047e4:	3001      	adds	r0, #1
 80047e6:	d1f0      	bne.n	80047ca <_printf_common+0x8a>
 80047e8:	2001      	movs	r0, #1
 80047ea:	4240      	negs	r0, r0
 80047ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047ee:	2030      	movs	r0, #48	@ 0x30
 80047f0:	18e1      	adds	r1, r4, r3
 80047f2:	3143      	adds	r1, #67	@ 0x43
 80047f4:	7008      	strb	r0, [r1, #0]
 80047f6:	0021      	movs	r1, r4
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	3145      	adds	r1, #69	@ 0x45
 80047fc:	7809      	ldrb	r1, [r1, #0]
 80047fe:	18a2      	adds	r2, r4, r2
 8004800:	3243      	adds	r2, #67	@ 0x43
 8004802:	3302      	adds	r3, #2
 8004804:	7011      	strb	r1, [r2, #0]
 8004806:	e7c1      	b.n	800478c <_printf_common+0x4c>
 8004808:	0022      	movs	r2, r4
 800480a:	2301      	movs	r3, #1
 800480c:	9901      	ldr	r1, [sp, #4]
 800480e:	9800      	ldr	r0, [sp, #0]
 8004810:	9f08      	ldr	r7, [sp, #32]
 8004812:	321a      	adds	r2, #26
 8004814:	47b8      	blx	r7
 8004816:	3001      	adds	r0, #1
 8004818:	d0e6      	beq.n	80047e8 <_printf_common+0xa8>
 800481a:	3601      	adds	r6, #1
 800481c:	e7d1      	b.n	80047c2 <_printf_common+0x82>
	...

08004820 <_printf_i>:
 8004820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004822:	b08b      	sub	sp, #44	@ 0x2c
 8004824:	9206      	str	r2, [sp, #24]
 8004826:	000a      	movs	r2, r1
 8004828:	3243      	adds	r2, #67	@ 0x43
 800482a:	9307      	str	r3, [sp, #28]
 800482c:	9005      	str	r0, [sp, #20]
 800482e:	9203      	str	r2, [sp, #12]
 8004830:	7e0a      	ldrb	r2, [r1, #24]
 8004832:	000c      	movs	r4, r1
 8004834:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004836:	2a78      	cmp	r2, #120	@ 0x78
 8004838:	d809      	bhi.n	800484e <_printf_i+0x2e>
 800483a:	2a62      	cmp	r2, #98	@ 0x62
 800483c:	d80b      	bhi.n	8004856 <_printf_i+0x36>
 800483e:	2a00      	cmp	r2, #0
 8004840:	d100      	bne.n	8004844 <_printf_i+0x24>
 8004842:	e0bc      	b.n	80049be <_printf_i+0x19e>
 8004844:	497b      	ldr	r1, [pc, #492]	@ (8004a34 <_printf_i+0x214>)
 8004846:	9104      	str	r1, [sp, #16]
 8004848:	2a58      	cmp	r2, #88	@ 0x58
 800484a:	d100      	bne.n	800484e <_printf_i+0x2e>
 800484c:	e090      	b.n	8004970 <_printf_i+0x150>
 800484e:	0025      	movs	r5, r4
 8004850:	3542      	adds	r5, #66	@ 0x42
 8004852:	702a      	strb	r2, [r5, #0]
 8004854:	e022      	b.n	800489c <_printf_i+0x7c>
 8004856:	0010      	movs	r0, r2
 8004858:	3863      	subs	r0, #99	@ 0x63
 800485a:	2815      	cmp	r0, #21
 800485c:	d8f7      	bhi.n	800484e <_printf_i+0x2e>
 800485e:	f7fb fc4f 	bl	8000100 <__gnu_thumb1_case_shi>
 8004862:	0016      	.short	0x0016
 8004864:	fff6001f 	.word	0xfff6001f
 8004868:	fff6fff6 	.word	0xfff6fff6
 800486c:	001ffff6 	.word	0x001ffff6
 8004870:	fff6fff6 	.word	0xfff6fff6
 8004874:	fff6fff6 	.word	0xfff6fff6
 8004878:	003600a1 	.word	0x003600a1
 800487c:	fff60080 	.word	0xfff60080
 8004880:	00b2fff6 	.word	0x00b2fff6
 8004884:	0036fff6 	.word	0x0036fff6
 8004888:	fff6fff6 	.word	0xfff6fff6
 800488c:	0084      	.short	0x0084
 800488e:	0025      	movs	r5, r4
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	3542      	adds	r5, #66	@ 0x42
 8004894:	1d11      	adds	r1, r2, #4
 8004896:	6019      	str	r1, [r3, #0]
 8004898:	6813      	ldr	r3, [r2, #0]
 800489a:	702b      	strb	r3, [r5, #0]
 800489c:	2301      	movs	r3, #1
 800489e:	e0a0      	b.n	80049e2 <_printf_i+0x1c2>
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	6809      	ldr	r1, [r1, #0]
 80048a4:	1d02      	adds	r2, r0, #4
 80048a6:	060d      	lsls	r5, r1, #24
 80048a8:	d50b      	bpl.n	80048c2 <_printf_i+0xa2>
 80048aa:	6806      	ldr	r6, [r0, #0]
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	2e00      	cmp	r6, #0
 80048b0:	da03      	bge.n	80048ba <_printf_i+0x9a>
 80048b2:	232d      	movs	r3, #45	@ 0x2d
 80048b4:	9a03      	ldr	r2, [sp, #12]
 80048b6:	4276      	negs	r6, r6
 80048b8:	7013      	strb	r3, [r2, #0]
 80048ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004a34 <_printf_i+0x214>)
 80048bc:	270a      	movs	r7, #10
 80048be:	9304      	str	r3, [sp, #16]
 80048c0:	e018      	b.n	80048f4 <_printf_i+0xd4>
 80048c2:	6806      	ldr	r6, [r0, #0]
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	0649      	lsls	r1, r1, #25
 80048c8:	d5f1      	bpl.n	80048ae <_printf_i+0x8e>
 80048ca:	b236      	sxth	r6, r6
 80048cc:	e7ef      	b.n	80048ae <_printf_i+0x8e>
 80048ce:	6808      	ldr	r0, [r1, #0]
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	c940      	ldmia	r1!, {r6}
 80048d4:	0605      	lsls	r5, r0, #24
 80048d6:	d402      	bmi.n	80048de <_printf_i+0xbe>
 80048d8:	0640      	lsls	r0, r0, #25
 80048da:	d500      	bpl.n	80048de <_printf_i+0xbe>
 80048dc:	b2b6      	uxth	r6, r6
 80048de:	6019      	str	r1, [r3, #0]
 80048e0:	4b54      	ldr	r3, [pc, #336]	@ (8004a34 <_printf_i+0x214>)
 80048e2:	270a      	movs	r7, #10
 80048e4:	9304      	str	r3, [sp, #16]
 80048e6:	2a6f      	cmp	r2, #111	@ 0x6f
 80048e8:	d100      	bne.n	80048ec <_printf_i+0xcc>
 80048ea:	3f02      	subs	r7, #2
 80048ec:	0023      	movs	r3, r4
 80048ee:	2200      	movs	r2, #0
 80048f0:	3343      	adds	r3, #67	@ 0x43
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	60a3      	str	r3, [r4, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	db03      	blt.n	8004904 <_printf_i+0xe4>
 80048fc:	2104      	movs	r1, #4
 80048fe:	6822      	ldr	r2, [r4, #0]
 8004900:	438a      	bics	r2, r1
 8004902:	6022      	str	r2, [r4, #0]
 8004904:	2e00      	cmp	r6, #0
 8004906:	d102      	bne.n	800490e <_printf_i+0xee>
 8004908:	9d03      	ldr	r5, [sp, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00c      	beq.n	8004928 <_printf_i+0x108>
 800490e:	9d03      	ldr	r5, [sp, #12]
 8004910:	0030      	movs	r0, r6
 8004912:	0039      	movs	r1, r7
 8004914:	f7fb fc84 	bl	8000220 <__aeabi_uidivmod>
 8004918:	9b04      	ldr	r3, [sp, #16]
 800491a:	3d01      	subs	r5, #1
 800491c:	5c5b      	ldrb	r3, [r3, r1]
 800491e:	702b      	strb	r3, [r5, #0]
 8004920:	0033      	movs	r3, r6
 8004922:	0006      	movs	r6, r0
 8004924:	429f      	cmp	r7, r3
 8004926:	d9f3      	bls.n	8004910 <_printf_i+0xf0>
 8004928:	2f08      	cmp	r7, #8
 800492a:	d109      	bne.n	8004940 <_printf_i+0x120>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	07db      	lsls	r3, r3, #31
 8004930:	d506      	bpl.n	8004940 <_printf_i+0x120>
 8004932:	6862      	ldr	r2, [r4, #4]
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	dc02      	bgt.n	8004940 <_printf_i+0x120>
 800493a:	2330      	movs	r3, #48	@ 0x30
 800493c:	3d01      	subs	r5, #1
 800493e:	702b      	strb	r3, [r5, #0]
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	1b5b      	subs	r3, r3, r5
 8004944:	6123      	str	r3, [r4, #16]
 8004946:	9b07      	ldr	r3, [sp, #28]
 8004948:	0021      	movs	r1, r4
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	9805      	ldr	r0, [sp, #20]
 800494e:	9b06      	ldr	r3, [sp, #24]
 8004950:	aa09      	add	r2, sp, #36	@ 0x24
 8004952:	f7ff fef5 	bl	8004740 <_printf_common>
 8004956:	3001      	adds	r0, #1
 8004958:	d148      	bne.n	80049ec <_printf_i+0x1cc>
 800495a:	2001      	movs	r0, #1
 800495c:	4240      	negs	r0, r0
 800495e:	b00b      	add	sp, #44	@ 0x2c
 8004960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004962:	2220      	movs	r2, #32
 8004964:	6809      	ldr	r1, [r1, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	6022      	str	r2, [r4, #0]
 800496a:	2278      	movs	r2, #120	@ 0x78
 800496c:	4932      	ldr	r1, [pc, #200]	@ (8004a38 <_printf_i+0x218>)
 800496e:	9104      	str	r1, [sp, #16]
 8004970:	0021      	movs	r1, r4
 8004972:	3145      	adds	r1, #69	@ 0x45
 8004974:	700a      	strb	r2, [r1, #0]
 8004976:	6819      	ldr	r1, [r3, #0]
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	c940      	ldmia	r1!, {r6}
 800497c:	0610      	lsls	r0, r2, #24
 800497e:	d402      	bmi.n	8004986 <_printf_i+0x166>
 8004980:	0650      	lsls	r0, r2, #25
 8004982:	d500      	bpl.n	8004986 <_printf_i+0x166>
 8004984:	b2b6      	uxth	r6, r6
 8004986:	6019      	str	r1, [r3, #0]
 8004988:	07d3      	lsls	r3, r2, #31
 800498a:	d502      	bpl.n	8004992 <_printf_i+0x172>
 800498c:	2320      	movs	r3, #32
 800498e:	4313      	orrs	r3, r2
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	2e00      	cmp	r6, #0
 8004994:	d001      	beq.n	800499a <_printf_i+0x17a>
 8004996:	2710      	movs	r7, #16
 8004998:	e7a8      	b.n	80048ec <_printf_i+0xcc>
 800499a:	2220      	movs	r2, #32
 800499c:	6823      	ldr	r3, [r4, #0]
 800499e:	4393      	bics	r3, r2
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	e7f8      	b.n	8004996 <_printf_i+0x176>
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	680d      	ldr	r5, [r1, #0]
 80049a8:	1d10      	adds	r0, r2, #4
 80049aa:	6949      	ldr	r1, [r1, #20]
 80049ac:	6018      	str	r0, [r3, #0]
 80049ae:	6813      	ldr	r3, [r2, #0]
 80049b0:	062e      	lsls	r6, r5, #24
 80049b2:	d501      	bpl.n	80049b8 <_printf_i+0x198>
 80049b4:	6019      	str	r1, [r3, #0]
 80049b6:	e002      	b.n	80049be <_printf_i+0x19e>
 80049b8:	066d      	lsls	r5, r5, #25
 80049ba:	d5fb      	bpl.n	80049b4 <_printf_i+0x194>
 80049bc:	8019      	strh	r1, [r3, #0]
 80049be:	2300      	movs	r3, #0
 80049c0:	9d03      	ldr	r5, [sp, #12]
 80049c2:	6123      	str	r3, [r4, #16]
 80049c4:	e7bf      	b.n	8004946 <_printf_i+0x126>
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	1d11      	adds	r1, r2, #4
 80049ca:	6019      	str	r1, [r3, #0]
 80049cc:	6815      	ldr	r5, [r2, #0]
 80049ce:	2100      	movs	r1, #0
 80049d0:	0028      	movs	r0, r5
 80049d2:	6862      	ldr	r2, [r4, #4]
 80049d4:	f000 f986 	bl	8004ce4 <memchr>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d001      	beq.n	80049e0 <_printf_i+0x1c0>
 80049dc:	1b40      	subs	r0, r0, r5
 80049de:	6060      	str	r0, [r4, #4]
 80049e0:	6863      	ldr	r3, [r4, #4]
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	2300      	movs	r3, #0
 80049e6:	9a03      	ldr	r2, [sp, #12]
 80049e8:	7013      	strb	r3, [r2, #0]
 80049ea:	e7ac      	b.n	8004946 <_printf_i+0x126>
 80049ec:	002a      	movs	r2, r5
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	9906      	ldr	r1, [sp, #24]
 80049f2:	9805      	ldr	r0, [sp, #20]
 80049f4:	9d07      	ldr	r5, [sp, #28]
 80049f6:	47a8      	blx	r5
 80049f8:	3001      	adds	r0, #1
 80049fa:	d0ae      	beq.n	800495a <_printf_i+0x13a>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	079b      	lsls	r3, r3, #30
 8004a00:	d415      	bmi.n	8004a2e <_printf_i+0x20e>
 8004a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a04:	68e0      	ldr	r0, [r4, #12]
 8004a06:	4298      	cmp	r0, r3
 8004a08:	daa9      	bge.n	800495e <_printf_i+0x13e>
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	e7a7      	b.n	800495e <_printf_i+0x13e>
 8004a0e:	0022      	movs	r2, r4
 8004a10:	2301      	movs	r3, #1
 8004a12:	9906      	ldr	r1, [sp, #24]
 8004a14:	9805      	ldr	r0, [sp, #20]
 8004a16:	9e07      	ldr	r6, [sp, #28]
 8004a18:	3219      	adds	r2, #25
 8004a1a:	47b0      	blx	r6
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d09c      	beq.n	800495a <_printf_i+0x13a>
 8004a20:	3501      	adds	r5, #1
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	42ab      	cmp	r3, r5
 8004a2a:	dcf0      	bgt.n	8004a0e <_printf_i+0x1ee>
 8004a2c:	e7e9      	b.n	8004a02 <_printf_i+0x1e2>
 8004a2e:	2500      	movs	r5, #0
 8004a30:	e7f7      	b.n	8004a22 <_printf_i+0x202>
 8004a32:	46c0      	nop			@ (mov r8, r8)
 8004a34:	08004ed5 	.word	0x08004ed5
 8004a38:	08004ee6 	.word	0x08004ee6

08004a3c <__sflush_r>:
 8004a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a3e:	220c      	movs	r2, #12
 8004a40:	5e8b      	ldrsh	r3, [r1, r2]
 8004a42:	0005      	movs	r5, r0
 8004a44:	000c      	movs	r4, r1
 8004a46:	071a      	lsls	r2, r3, #28
 8004a48:	d456      	bmi.n	8004af8 <__sflush_r+0xbc>
 8004a4a:	684a      	ldr	r2, [r1, #4]
 8004a4c:	2a00      	cmp	r2, #0
 8004a4e:	dc02      	bgt.n	8004a56 <__sflush_r+0x1a>
 8004a50:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	dd4e      	ble.n	8004af4 <__sflush_r+0xb8>
 8004a56:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a58:	2f00      	cmp	r7, #0
 8004a5a:	d04b      	beq.n	8004af4 <__sflush_r+0xb8>
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2080      	movs	r0, #128	@ 0x80
 8004a60:	682e      	ldr	r6, [r5, #0]
 8004a62:	602a      	str	r2, [r5, #0]
 8004a64:	001a      	movs	r2, r3
 8004a66:	0140      	lsls	r0, r0, #5
 8004a68:	6a21      	ldr	r1, [r4, #32]
 8004a6a:	4002      	ands	r2, r0
 8004a6c:	4203      	tst	r3, r0
 8004a6e:	d033      	beq.n	8004ad8 <__sflush_r+0x9c>
 8004a70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	075b      	lsls	r3, r3, #29
 8004a76:	d506      	bpl.n	8004a86 <__sflush_r+0x4a>
 8004a78:	6863      	ldr	r3, [r4, #4]
 8004a7a:	1ad2      	subs	r2, r2, r3
 8004a7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <__sflush_r+0x4a>
 8004a82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a84:	1ad2      	subs	r2, r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	0028      	movs	r0, r5
 8004a8a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004a8c:	6a21      	ldr	r1, [r4, #32]
 8004a8e:	47b8      	blx	r7
 8004a90:	89a2      	ldrh	r2, [r4, #12]
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	d106      	bne.n	8004aa4 <__sflush_r+0x68>
 8004a96:	6829      	ldr	r1, [r5, #0]
 8004a98:	291d      	cmp	r1, #29
 8004a9a:	d846      	bhi.n	8004b2a <__sflush_r+0xee>
 8004a9c:	4b29      	ldr	r3, [pc, #164]	@ (8004b44 <__sflush_r+0x108>)
 8004a9e:	410b      	asrs	r3, r1
 8004aa0:	07db      	lsls	r3, r3, #31
 8004aa2:	d442      	bmi.n	8004b2a <__sflush_r+0xee>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	6063      	str	r3, [r4, #4]
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	04d2      	lsls	r2, r2, #19
 8004aae:	d505      	bpl.n	8004abc <__sflush_r+0x80>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d102      	bne.n	8004aba <__sflush_r+0x7e>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d100      	bne.n	8004abc <__sflush_r+0x80>
 8004aba:	6560      	str	r0, [r4, #84]	@ 0x54
 8004abc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004abe:	602e      	str	r6, [r5, #0]
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d017      	beq.n	8004af4 <__sflush_r+0xb8>
 8004ac4:	0023      	movs	r3, r4
 8004ac6:	3344      	adds	r3, #68	@ 0x44
 8004ac8:	4299      	cmp	r1, r3
 8004aca:	d002      	beq.n	8004ad2 <__sflush_r+0x96>
 8004acc:	0028      	movs	r0, r5
 8004ace:	f7ff fbed 	bl	80042ac <_free_r>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ad6:	e00d      	b.n	8004af4 <__sflush_r+0xb8>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	0028      	movs	r0, r5
 8004adc:	47b8      	blx	r7
 8004ade:	0002      	movs	r2, r0
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d1c6      	bne.n	8004a72 <__sflush_r+0x36>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0c3      	beq.n	8004a72 <__sflush_r+0x36>
 8004aea:	2b1d      	cmp	r3, #29
 8004aec:	d001      	beq.n	8004af2 <__sflush_r+0xb6>
 8004aee:	2b16      	cmp	r3, #22
 8004af0:	d11a      	bne.n	8004b28 <__sflush_r+0xec>
 8004af2:	602e      	str	r6, [r5, #0]
 8004af4:	2000      	movs	r0, #0
 8004af6:	e01e      	b.n	8004b36 <__sflush_r+0xfa>
 8004af8:	690e      	ldr	r6, [r1, #16]
 8004afa:	2e00      	cmp	r6, #0
 8004afc:	d0fa      	beq.n	8004af4 <__sflush_r+0xb8>
 8004afe:	680f      	ldr	r7, [r1, #0]
 8004b00:	600e      	str	r6, [r1, #0]
 8004b02:	1bba      	subs	r2, r7, r6
 8004b04:	9201      	str	r2, [sp, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	079b      	lsls	r3, r3, #30
 8004b0a:	d100      	bne.n	8004b0e <__sflush_r+0xd2>
 8004b0c:	694a      	ldr	r2, [r1, #20]
 8004b0e:	60a2      	str	r2, [r4, #8]
 8004b10:	9b01      	ldr	r3, [sp, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	ddee      	ble.n	8004af4 <__sflush_r+0xb8>
 8004b16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004b18:	0032      	movs	r2, r6
 8004b1a:	001f      	movs	r7, r3
 8004b1c:	0028      	movs	r0, r5
 8004b1e:	9b01      	ldr	r3, [sp, #4]
 8004b20:	6a21      	ldr	r1, [r4, #32]
 8004b22:	47b8      	blx	r7
 8004b24:	2800      	cmp	r0, #0
 8004b26:	dc07      	bgt.n	8004b38 <__sflush_r+0xfc>
 8004b28:	89a2      	ldrh	r2, [r4, #12]
 8004b2a:	2340      	movs	r3, #64	@ 0x40
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	b21b      	sxth	r3, r3
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	4240      	negs	r0, r0
 8004b36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b38:	9b01      	ldr	r3, [sp, #4]
 8004b3a:	1836      	adds	r6, r6, r0
 8004b3c:	1a1b      	subs	r3, r3, r0
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	e7e6      	b.n	8004b10 <__sflush_r+0xd4>
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	dfbffffe 	.word	0xdfbffffe

08004b48 <_fflush_r>:
 8004b48:	690b      	ldr	r3, [r1, #16]
 8004b4a:	b570      	push	{r4, r5, r6, lr}
 8004b4c:	0005      	movs	r5, r0
 8004b4e:	000c      	movs	r4, r1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <_fflush_r+0x12>
 8004b54:	2500      	movs	r5, #0
 8004b56:	0028      	movs	r0, r5
 8004b58:	bd70      	pop	{r4, r5, r6, pc}
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d004      	beq.n	8004b68 <_fflush_r+0x20>
 8004b5e:	6a03      	ldr	r3, [r0, #32]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <_fflush_r+0x20>
 8004b64:	f7ff f8d8 	bl	8003d18 <__sinit>
 8004b68:	220c      	movs	r2, #12
 8004b6a:	5ea3      	ldrsh	r3, [r4, r2]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f1      	beq.n	8004b54 <_fflush_r+0xc>
 8004b70:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b72:	07d2      	lsls	r2, r2, #31
 8004b74:	d404      	bmi.n	8004b80 <_fflush_r+0x38>
 8004b76:	059b      	lsls	r3, r3, #22
 8004b78:	d402      	bmi.n	8004b80 <_fflush_r+0x38>
 8004b7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b7c:	f7ff fb93 	bl	80042a6 <__retarget_lock_acquire_recursive>
 8004b80:	0028      	movs	r0, r5
 8004b82:	0021      	movs	r1, r4
 8004b84:	f7ff ff5a 	bl	8004a3c <__sflush_r>
 8004b88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b8a:	0005      	movs	r5, r0
 8004b8c:	07db      	lsls	r3, r3, #31
 8004b8e:	d4e2      	bmi.n	8004b56 <_fflush_r+0xe>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	059b      	lsls	r3, r3, #22
 8004b94:	d4df      	bmi.n	8004b56 <_fflush_r+0xe>
 8004b96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b98:	f7ff fb86 	bl	80042a8 <__retarget_lock_release_recursive>
 8004b9c:	e7db      	b.n	8004b56 <_fflush_r+0xe>
	...

08004ba0 <__swhatbuf_r>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	000e      	movs	r6, r1
 8004ba4:	001d      	movs	r5, r3
 8004ba6:	230e      	movs	r3, #14
 8004ba8:	5ec9      	ldrsh	r1, [r1, r3]
 8004baa:	0014      	movs	r4, r2
 8004bac:	b096      	sub	sp, #88	@ 0x58
 8004bae:	2900      	cmp	r1, #0
 8004bb0:	da0c      	bge.n	8004bcc <__swhatbuf_r+0x2c>
 8004bb2:	89b2      	ldrh	r2, [r6, #12]
 8004bb4:	2380      	movs	r3, #128	@ 0x80
 8004bb6:	0011      	movs	r1, r2
 8004bb8:	4019      	ands	r1, r3
 8004bba:	421a      	tst	r2, r3
 8004bbc:	d114      	bne.n	8004be8 <__swhatbuf_r+0x48>
 8004bbe:	2380      	movs	r3, #128	@ 0x80
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	6029      	str	r1, [r5, #0]
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	b016      	add	sp, #88	@ 0x58
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	466a      	mov	r2, sp
 8004bce:	f000 f853 	bl	8004c78 <_fstat_r>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	dbed      	blt.n	8004bb2 <__swhatbuf_r+0x12>
 8004bd6:	23f0      	movs	r3, #240	@ 0xf0
 8004bd8:	9901      	ldr	r1, [sp, #4]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	4019      	ands	r1, r3
 8004bde:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <__swhatbuf_r+0x50>)
 8004be0:	18c9      	adds	r1, r1, r3
 8004be2:	424b      	negs	r3, r1
 8004be4:	4159      	adcs	r1, r3
 8004be6:	e7ea      	b.n	8004bbe <__swhatbuf_r+0x1e>
 8004be8:	2100      	movs	r1, #0
 8004bea:	2340      	movs	r3, #64	@ 0x40
 8004bec:	e7e9      	b.n	8004bc2 <__swhatbuf_r+0x22>
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	ffffe000 	.word	0xffffe000

08004bf4 <__smakebuf_r>:
 8004bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf6:	2602      	movs	r6, #2
 8004bf8:	898b      	ldrh	r3, [r1, #12]
 8004bfa:	0005      	movs	r5, r0
 8004bfc:	000c      	movs	r4, r1
 8004bfe:	b085      	sub	sp, #20
 8004c00:	4233      	tst	r3, r6
 8004c02:	d007      	beq.n	8004c14 <__smakebuf_r+0x20>
 8004c04:	0023      	movs	r3, r4
 8004c06:	3347      	adds	r3, #71	@ 0x47
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	6163      	str	r3, [r4, #20]
 8004c10:	b005      	add	sp, #20
 8004c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c14:	ab03      	add	r3, sp, #12
 8004c16:	aa02      	add	r2, sp, #8
 8004c18:	f7ff ffc2 	bl	8004ba0 <__swhatbuf_r>
 8004c1c:	9f02      	ldr	r7, [sp, #8]
 8004c1e:	9001      	str	r0, [sp, #4]
 8004c20:	0039      	movs	r1, r7
 8004c22:	0028      	movs	r0, r5
 8004c24:	f7ff fbb8 	bl	8004398 <_malloc_r>
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d108      	bne.n	8004c3e <__smakebuf_r+0x4a>
 8004c2c:	220c      	movs	r2, #12
 8004c2e:	5ea3      	ldrsh	r3, [r4, r2]
 8004c30:	059a      	lsls	r2, r3, #22
 8004c32:	d4ed      	bmi.n	8004c10 <__smakebuf_r+0x1c>
 8004c34:	2203      	movs	r2, #3
 8004c36:	4393      	bics	r3, r2
 8004c38:	431e      	orrs	r6, r3
 8004c3a:	81a6      	strh	r6, [r4, #12]
 8004c3c:	e7e2      	b.n	8004c04 <__smakebuf_r+0x10>
 8004c3e:	2380      	movs	r3, #128	@ 0x80
 8004c40:	89a2      	ldrh	r2, [r4, #12]
 8004c42:	6020      	str	r0, [r4, #0]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	81a3      	strh	r3, [r4, #12]
 8004c48:	9b03      	ldr	r3, [sp, #12]
 8004c4a:	6120      	str	r0, [r4, #16]
 8004c4c:	6167      	str	r7, [r4, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <__smakebuf_r+0x78>
 8004c52:	0028      	movs	r0, r5
 8004c54:	230e      	movs	r3, #14
 8004c56:	5ee1      	ldrsh	r1, [r4, r3]
 8004c58:	f000 f820 	bl	8004c9c <_isatty_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d005      	beq.n	8004c6c <__smakebuf_r+0x78>
 8004c60:	2303      	movs	r3, #3
 8004c62:	89a2      	ldrh	r2, [r4, #12]
 8004c64:	439a      	bics	r2, r3
 8004c66:	3b02      	subs	r3, #2
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	9a01      	ldr	r2, [sp, #4]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	81a3      	strh	r3, [r4, #12]
 8004c74:	e7cc      	b.n	8004c10 <__smakebuf_r+0x1c>
	...

08004c78 <_fstat_r>:
 8004c78:	2300      	movs	r3, #0
 8004c7a:	b570      	push	{r4, r5, r6, lr}
 8004c7c:	4d06      	ldr	r5, [pc, #24]	@ (8004c98 <_fstat_r+0x20>)
 8004c7e:	0004      	movs	r4, r0
 8004c80:	0008      	movs	r0, r1
 8004c82:	0011      	movs	r1, r2
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	f7fb feb1 	bl	80009ec <_fstat>
 8004c8a:	1c43      	adds	r3, r0, #1
 8004c8c:	d103      	bne.n	8004c96 <_fstat_r+0x1e>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d000      	beq.n	8004c96 <_fstat_r+0x1e>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	200002b4 	.word	0x200002b4

08004c9c <_isatty_r>:
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	b570      	push	{r4, r5, r6, lr}
 8004ca0:	4d06      	ldr	r5, [pc, #24]	@ (8004cbc <_isatty_r+0x20>)
 8004ca2:	0004      	movs	r4, r0
 8004ca4:	0008      	movs	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fb fe0a 	bl	80008c0 <_isatty>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d103      	bne.n	8004cb8 <_isatty_r+0x1c>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d000      	beq.n	8004cb8 <_isatty_r+0x1c>
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	bd70      	pop	{r4, r5, r6, pc}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	200002b4 	.word	0x200002b4

08004cc0 <_sbrk_r>:
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	b570      	push	{r4, r5, r6, lr}
 8004cc4:	4d06      	ldr	r5, [pc, #24]	@ (8004ce0 <_sbrk_r+0x20>)
 8004cc6:	0004      	movs	r4, r0
 8004cc8:	0008      	movs	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fb ffaa 	bl	8000c24 <_sbrk>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d103      	bne.n	8004cdc <_sbrk_r+0x1c>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d000      	beq.n	8004cdc <_sbrk_r+0x1c>
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	bd70      	pop	{r4, r5, r6, pc}
 8004cde:	46c0      	nop			@ (mov r8, r8)
 8004ce0:	200002b4 	.word	0x200002b4

08004ce4 <memchr>:
 8004ce4:	b2c9      	uxtb	r1, r1
 8004ce6:	1882      	adds	r2, r0, r2
 8004ce8:	4290      	cmp	r0, r2
 8004cea:	d101      	bne.n	8004cf0 <memchr+0xc>
 8004cec:	2000      	movs	r0, #0
 8004cee:	4770      	bx	lr
 8004cf0:	7803      	ldrb	r3, [r0, #0]
 8004cf2:	428b      	cmp	r3, r1
 8004cf4:	d0fb      	beq.n	8004cee <memchr+0xa>
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	e7f6      	b.n	8004ce8 <memchr+0x4>
	...

08004cfc <_init>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr

08004d08 <_fini>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr
